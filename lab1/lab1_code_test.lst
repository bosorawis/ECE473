
lab1_code_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000023a  2**0
                  ALLOC
  3 .stab         000005dc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c08  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  ac:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  b4:	40 b3       	in	r20, 0x10	; 16
  b6:	20 91 00 01 	lds	r18, 0x0100
  ba:	30 91 01 01 	lds	r19, 0x0101
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	30 6e       	ori	r19, 0xE0	; 224
  c4:	84 2f       	mov	r24, r20
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	28 2b       	or	r18, r24
  cc:	39 2b       	or	r19, r25
  ce:	30 93 01 01 	sts	0x0101, r19
  d2:	20 93 00 01 	sts	0x0100, r18
  if (state == 0xF000) return 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	21 15       	cp	r18, r1
  da:	30 4f       	sbci	r19, 0xF0	; 240
  dc:	09 f0       	breq	.+2      	; 0xe0 <debounce_switch+0x2c>
  de:	80 e0       	ldi	r24, 0x00	; 0
  return 0;
}
  e0:	08 95       	ret

000000e2 <main>:
// Check switch S0.  When found low for 12 passes of "debounc_switch(), increment
// PORTB.  This will make an incrementing count on the port B LEDS. 
//*******************************************************************************
int main()
{
    DDRB = 0xFF;  //set port B to all outputs
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	87 bb       	out	0x17, r24	; 23
    int num=0;
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	0a e0       	ldi	r16, 0x0A	; 10
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	06 c0       	rjmp	.+12     	; 0xfc <main+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	83 ef       	ldi	r24, 0xF3	; 243
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <main+0x12>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x18>
  fa:	00 00       	nop
// function can be implemented at the same time.  Expects active low pushbutton on 
// Port D bit zero.  Debounce time is determined by external loop delay times 12. 
//*******************************************************************************
int8_t debounce_switch() {
  static uint16_t state = 0; //holds present state
  state = (state << 1) | (! bit_is_clear(PIND, 0)) | 0xE000;
  fc:	80 b3       	in	r24, 0x10	; 16
  fe:	20 91 00 01 	lds	r18, 0x0100
 102:	30 91 01 01 	lds	r19, 0x0101
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	30 6e       	ori	r19, 0xE0	; 224
 10c:	e8 2f       	mov	r30, r24
 10e:	e1 70       	andi	r30, 0x01	; 1
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	2e 2b       	or	r18, r30
 114:	3f 2b       	or	r19, r31
 116:	30 93 01 01 	sts	0x0101, r19
 11a:	20 93 00 01 	sts	0x0100, r18
  if (state == 0xF000) return 1;
 11e:	21 15       	cp	r18, r1
 120:	30 4f       	sbci	r19, 0xF0	; 240
 122:	31 f7       	brne	.-52     	; 0xf0 <main+0xe>
{
    DDRB = 0xFF;  //set port B to all outputs
    int num=0;
    while(1){     //do forever
	if(debounce_switch()) {
	    num += 1; 
 124:	21 96       	adiw	r28, 0x01	; 1
	    if (num > 99){
 126:	c4 36       	cpi	r28, 0x64	; 100
 128:	d1 05       	cpc	r29, r1
 12a:	2c f0       	brlt	.+10     	; 0x136 <main+0x54>
 12c:	20 e0       	ldi	r18, 0x00	; 0
	      num = 0;
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
	    int ones = num%10;	
	    //uint8_t temp = 0;
	    //temp = temp | tens;
	    //temp = temp << 4;
	    //temp = temp | ones;            
	    PORTB = (tens << 4) | ones;
 132:	28 bb       	out	0x18, r18	; 24
 134:	dd cf       	rjmp	.-70     	; 0xf0 <main+0xe>
 136:	ce 01       	movw	r24, r28
 138:	b8 01       	movw	r22, r16
 13a:	0e 94 a9 00 	call	0x152	; 0x152 <__divmodhi4>
 13e:	9b 01       	movw	r18, r22
 140:	22 95       	swap	r18
 142:	32 95       	swap	r19
 144:	30 7f       	andi	r19, 0xF0	; 240
 146:	32 27       	eor	r19, r18
 148:	20 7f       	andi	r18, 0xF0	; 240
 14a:	32 27       	eor	r19, r18
 14c:	28 2b       	or	r18, r24
 14e:	28 bb       	out	0x18, r18	; 24
 150:	cf cf       	rjmp	.-98     	; 0xf0 <main+0xe>

00000152 <__divmodhi4>:
 152:	97 fb       	bst	r25, 7
 154:	07 2e       	mov	r0, r23
 156:	16 f4       	brtc	.+4      	; 0x15c <__divmodhi4+0xa>
 158:	00 94       	com	r0
 15a:	07 d0       	rcall	.+14     	; 0x16a <__divmodhi4_neg1>
 15c:	77 fd       	sbrc	r23, 7
 15e:	09 d0       	rcall	.+18     	; 0x172 <__divmodhi4_neg2>
 160:	0e 94 bd 00 	call	0x17a	; 0x17a <__udivmodhi4>
 164:	07 fc       	sbrc	r0, 7
 166:	05 d0       	rcall	.+10     	; 0x172 <__divmodhi4_neg2>
 168:	3e f4       	brtc	.+14     	; 0x178 <__divmodhi4_exit>

0000016a <__divmodhi4_neg1>:
 16a:	90 95       	com	r25
 16c:	81 95       	neg	r24
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
 170:	08 95       	ret

00000172 <__divmodhi4_neg2>:
 172:	70 95       	com	r23
 174:	61 95       	neg	r22
 176:	7f 4f       	sbci	r23, 0xFF	; 255

00000178 <__divmodhi4_exit>:
 178:	08 95       	ret

0000017a <__udivmodhi4>:
 17a:	aa 1b       	sub	r26, r26
 17c:	bb 1b       	sub	r27, r27
 17e:	51 e1       	ldi	r21, 0x11	; 17
 180:	07 c0       	rjmp	.+14     	; 0x190 <__udivmodhi4_ep>

00000182 <__udivmodhi4_loop>:
 182:	aa 1f       	adc	r26, r26
 184:	bb 1f       	adc	r27, r27
 186:	a6 17       	cp	r26, r22
 188:	b7 07       	cpc	r27, r23
 18a:	10 f0       	brcs	.+4      	; 0x190 <__udivmodhi4_ep>
 18c:	a6 1b       	sub	r26, r22
 18e:	b7 0b       	sbc	r27, r23

00000190 <__udivmodhi4_ep>:
 190:	88 1f       	adc	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	5a 95       	dec	r21
 196:	a9 f7       	brne	.-22     	; 0x182 <__udivmodhi4_loop>
 198:	80 95       	com	r24
 19a:	90 95       	com	r25
 19c:	bc 01       	movw	r22, r24
 19e:	cd 01       	movw	r24, r26
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
