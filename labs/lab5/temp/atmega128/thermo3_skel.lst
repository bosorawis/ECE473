
thermo3_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000756  000007ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000756  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  00800100  00800100  000007ea  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  000007ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001185  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003add  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  68:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  6c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  70:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  74:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  78:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  7c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  80:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  84:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_33>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  8c:	0e 01       	movw	r0, r28
  8e:	e5 00       	.word	0x00e5	; ????
  90:	e5 00       	.word	0x00e5	; ????
  92:	e5 00       	.word	0x00e5	; ????
  94:	e5 00       	.word	0x00e5	; ????
  96:	e5 00       	.word	0x00e5	; ????
  98:	e5 00       	.word	0x00e5	; ????
  9a:	e5 00       	.word	0x00e5	; ????
  9c:	0e 01       	movw	r0, r28
  9e:	e5 00       	.word	0x00e5	; ????
  a0:	e5 00       	.word	0x00e5	; ????
  a2:	e5 00       	.word	0x00e5	; ????
  a4:	e5 00       	.word	0x00e5	; ????
  a6:	e5 00       	.word	0x00e5	; ????
  a8:	e5 00       	.word	0x00e5	; ????
  aa:	e5 00       	.word	0x00e5	; ????
  ac:	18 01       	movw	r2, r16
  ae:	e5 00       	.word	0x00e5	; ????
  b0:	e5 00       	.word	0x00e5	; ????
  b2:	e5 00       	.word	0x00e5	; ????
  b4:	e5 00       	.word	0x00e5	; ????
  b6:	e5 00       	.word	0x00e5	; ????
  b8:	e5 00       	.word	0x00e5	; ????
  ba:	e5 00       	.word	0x00e5	; ????
  bc:	e5 00       	.word	0x00e5	; ????
  be:	e5 00       	.word	0x00e5	; ????
  c0:	e5 00       	.word	0x00e5	; ????
  c2:	e5 00       	.word	0x00e5	; ????
  c4:	e5 00       	.word	0x00e5	; ????
  c6:	e5 00       	.word	0x00e5	; ????
  c8:	e5 00       	.word	0x00e5	; ????
  ca:	e5 00       	.word	0x00e5	; ????
  cc:	18 01       	movw	r2, r16
  ce:	e5 00       	.word	0x00e5	; ????
  d0:	e5 00       	.word	0x00e5	; ????
  d2:	e5 00       	.word	0x00e5	; ????
  d4:	e5 00       	.word	0x00e5	; ????
  d6:	e5 00       	.word	0x00e5	; ????
  d8:	e5 00       	.word	0x00e5	; ????
  da:	e5 00       	.word	0x00e5	; ????
  dc:	e5 00       	.word	0x00e5	; ????
  de:	e5 00       	.word	0x00e5	; ????
  e0:	e5 00       	.word	0x00e5	; ????
  e2:	e5 00       	.word	0x00e5	; ????
  e4:	e5 00       	.word	0x00e5	; ????
  e6:	e5 00       	.word	0x00e5	; ????
  e8:	e5 00       	.word	0x00e5	; ????
  ea:	e5 00       	.word	0x00e5	; ????
  ec:	2f 01       	movw	r4, r30
  ee:	e5 00       	.word	0x00e5	; ????
  f0:	e5 00       	.word	0x00e5	; ????
  f2:	e5 00       	.word	0x00e5	; ????
  f4:	e5 00       	.word	0x00e5	; ????
  f6:	e5 00       	.word	0x00e5	; ????
  f8:	e5 00       	.word	0x00e5	; ????
  fa:	e5 00       	.word	0x00e5	; ????
  fc:	33 01       	movw	r6, r6
  fe:	e5 00       	.word	0x00e5	; ????
 100:	e5 00       	.word	0x00e5	; ????
 102:	e5 00       	.word	0x00e5	; ????
 104:	e5 00       	.word	0x00e5	; ????
 106:	e5 00       	.word	0x00e5	; ????
 108:	e5 00       	.word	0x00e5	; ????
 10a:	e5 00       	.word	0x00e5	; ????
 10c:	e5 00       	.word	0x00e5	; ????
 10e:	e5 00       	.word	0x00e5	; ????
 110:	e5 00       	.word	0x00e5	; ????
 112:	e5 00       	.word	0x00e5	; ????
 114:	e5 00       	.word	0x00e5	; ????
 116:	e5 00       	.word	0x00e5	; ????
 118:	e5 00       	.word	0x00e5	; ????
 11a:	e5 00       	.word	0x00e5	; ????
 11c:	41 01       	movw	r8, r2
 11e:	e5 00       	.word	0x00e5	; ????
 120:	e5 00       	.word	0x00e5	; ????
 122:	e5 00       	.word	0x00e5	; ????
 124:	e5 00       	.word	0x00e5	; ????
 126:	e5 00       	.word	0x00e5	; ????
 128:	e5 00       	.word	0x00e5	; ????
 12a:	e5 00       	.word	0x00e5	; ????
 12c:	ff 00       	.word	0x00ff	; ????

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	ab 36       	cpi	r26, 0x6B	; 107
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 1f 03 	call	0x63e	; 0x63e <main>
 14e:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <spi_init>:
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 156:	87 b3       	in	r24, 0x17	; 23
 158:	87 60       	ori	r24, 0x07	; 7
 15a:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
    //no interrupts, enable SPI, clk low initially, rising edge sample
    SPCR=(1<<SPE) | (1<<MSTR); 
 15c:	80 e5       	ldi	r24, 0x50	; 80
 15e:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	8e b9       	out	0x0e, r24	; 14
 164:	08 95       	ret

00000166 <lm73_temp_convert>:
//******************************************************************************
uint16_t lm73_temp_convert(uint16_t lm73_temp, uint8_t f_not_c){
    //given a temperature reading from an LM73, the address of a buffer
    //array, and a format (deg F or C) it formats the temperature into ascii in 
    //the buffer pointed to by the arguement.
    lm73_temp = (lm73_temp >> 7);
 166:	88 0f       	add	r24, r24
 168:	89 2f       	mov	r24, r25
 16a:	88 1f       	adc	r24, r24
 16c:	99 0b       	sbc	r25, r25
 16e:	91 95       	neg	r25
    //temp_digits = 'C';
    //When f_not_c is 1 -> send F
    //when f_not_c is 2 -> send C
    if(f_not_c == 1){
 170:	61 30       	cpi	r22, 0x01	; 1
 172:	09 f0       	breq	.+2      	; 0x176 <lm73_temp_convert+0x10>
	//temp_digits = 'F';
    }
    return lm73_temp;
    //Yeah, this is for you to do! ;^)

}//lm73_temp_convert
 174:	08 95       	ret
    lm73_temp = (lm73_temp >> 7);
    //temp_digits = 'C';
    //When f_not_c is 1 -> send F
    //when f_not_c is 2 -> send C
    if(f_not_c == 1){
	lm73_temp = (lm73_temp*5/9)+32;
 176:	9c 01       	movw	r18, r24
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	28 0f       	add	r18, r24
 182:	39 1f       	adc	r19, r25
 184:	af e8       	ldi	r26, 0x8F	; 143
 186:	b3 ee       	ldi	r27, 0xE3	; 227
 188:	0e 94 65 03 	call	0x6ca	; 0x6ca <__umulhisi3>
 18c:	96 95       	lsr	r25
 18e:	87 95       	ror	r24
 190:	96 95       	lsr	r25
 192:	87 95       	ror	r24
 194:	96 95       	lsr	r25
 196:	87 95       	ror	r24
 198:	80 96       	adiw	r24, 0x20	; 32
	//temp_digits = 'F';
    }
    return lm73_temp;
    //Yeah, this is for you to do! ;^)

}//lm73_temp_convert
 19a:	08 95       	ret

0000019c <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	0b b6       	in	r0, 0x3b	; 59
 1a8:	0f 92       	push	r0
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1ba:	80 91 71 00 	lds	r24, 0x0071
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	fc 01       	movw	r30, r24
 1c2:	38 97       	sbiw	r30, 0x08	; 8
 1c4:	e1 35       	cpi	r30, 0x51	; 81
 1c6:	f1 05       	cpc	r31, r1
 1c8:	b0 f0       	brcs	.+44     	; 0x1f6 <__vector_33+0x5a>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 1ca:	80 91 71 00 	lds	r24, 0x0071
 1ce:	80 93 06 01 	sts	0x0106, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0b be       	out	0x3b, r0	; 59
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 1f6:	ea 5b       	subi	r30, 0xBA	; 186
 1f8:	ff 4f       	sbci	r31, 0xFF	; 255
 1fa:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 1fe:	80 91 00 01 	lds	r24, 0x0100
 202:	e0 91 07 01 	lds	r30, 0x0107
 206:	f0 91 08 01 	lds	r31, 0x0108
 20a:	e8 0f       	add	r30, r24
 20c:	f1 1d       	adc	r31, r1
 20e:	80 91 73 00 	lds	r24, 0x0073
 212:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 214:	84 e9       	ldi	r24, 0x94	; 148
 216:	80 93 74 00 	sts	0x0074, r24
      break;      
 21a:	de cf       	rjmp	.-68     	; 0x1d8 <__vector_33+0x3c>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 21c:	80 91 09 01 	lds	r24, 0x0109
 220:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 224:	10 92 00 01 	sts	0x0100, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 228:	85 e8       	ldi	r24, 0x85	; 133
 22a:	80 93 74 00 	sts	0x0074, r24
      break;
 22e:	d4 cf       	rjmp	.-88     	; 0x1d8 <__vector_33+0x3c>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 230:	80 91 00 01 	lds	r24, 0x0100
 234:	90 91 0a 01 	lds	r25, 0x010A
 238:	89 17       	cp	r24, r25
 23a:	60 f7       	brcc	.-40     	; 0x214 <__vector_33+0x78>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 23c:	e0 91 07 01 	lds	r30, 0x0107
 240:	f0 91 08 01 	lds	r31, 0x0108
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	98 0f       	add	r25, r24
 248:	90 93 00 01 	sts	0x0100, r25
 24c:	e8 0f       	add	r30, r24
 24e:	f1 1d       	adc	r31, r1
 250:	80 81       	ld	r24, Z
 252:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
 256:	85 e8       	ldi	r24, 0x85	; 133
 258:	80 93 74 00 	sts	0x0074, r24
 25c:	bd cf       	rjmp	.-134    	; 0x1d8 <__vector_33+0x3c>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 25e:	85 ea       	ldi	r24, 0xA5	; 165
 260:	80 93 74 00 	sts	0x0074, r24
      break;
 264:	b9 cf       	rjmp	.-142    	; 0x1d8 <__vector_33+0x3c>
 266:	20 91 00 01 	lds	r18, 0x0100
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 26a:	80 91 0a 01 	lds	r24, 0x010A
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	28 17       	cp	r18, r24
 276:	39 07       	cpc	r19, r25
 278:	dc f4       	brge	.+54     	; 0x2b0 <__vector_33+0x114>
 27a:	85 ec       	ldi	r24, 0xC5	; 197
 27c:	80 93 74 00 	sts	0x0074, r24
 280:	ab cf       	rjmp	.-170    	; 0x1d8 <__vector_33+0x3c>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 282:	e0 91 07 01 	lds	r30, 0x0107
 286:	f0 91 08 01 	lds	r31, 0x0108
 28a:	80 91 00 01 	lds	r24, 0x0100
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	28 0f       	add	r18, r24
 292:	20 93 00 01 	sts	0x0100, r18
 296:	e8 0f       	add	r30, r24
 298:	f1 1d       	adc	r31, r1
 29a:	80 91 73 00 	lds	r24, 0x0073
 29e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 2a0:	80 91 0a 01 	lds	r24, 0x010A
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	28 17       	cp	r18, r24
 2ac:	39 07       	cpc	r19, r25
 2ae:	2c f3       	brlt	.-54     	; 0x27a <__vector_33+0xde>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 2b0:	85 e8       	ldi	r24, 0x85	; 133
 2b2:	80 93 74 00 	sts	0x0074, r24
 2b6:	90 cf       	rjmp	.-224    	; 0x1d8 <__vector_33+0x3c>

000002b8 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2b8:	80 91 74 00 	lds	r24, 0x0074
}
 2bc:	81 70       	andi	r24, 0x01	; 1
 2be:	08 95       	ret

000002c0 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2c0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 2c4:	90 fd       	sbrc	r25, 0
 2c6:	fc cf       	rjmp	.-8      	; 0x2c0 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 2c8:	8e 7f       	andi	r24, 0xFE	; 254
 2ca:	80 93 09 01 	sts	0x0109, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 2ce:	70 93 08 01 	sts	0x0108, r23
 2d2:	60 93 07 01 	sts	0x0107, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 2d6:	40 93 0a 01 	sts	0x010A, r20
  TWCR = TWCR_START;                    //initiate START
 2da:	85 ea       	ldi	r24, 0xA5	; 165
 2dc:	80 93 74 00 	sts	0x0074, r24
 2e0:	08 95       	ret

000002e2 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 2e2:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 2e6:	90 fd       	sbrc	r25, 0
 2e8:	fc cf       	rjmp	.-8      	; 0x2e2 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 2ea:	81 60       	ori	r24, 0x01	; 1
 2ec:	80 93 09 01 	sts	0x0109, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 2f0:	70 93 08 01 	sts	0x0108, r23
 2f4:	60 93 07 01 	sts	0x0107, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 2f8:	40 93 0a 01 	sts	0x010A, r20
  TWCR = TWCR_START;                   //initiate START
 2fc:	85 ea       	ldi	r24, 0xA5	; 165
 2fe:	80 93 74 00 	sts	0x0074, r24
 302:	08 95       	ret

00000304 <init_twi>:
//10K pullups are present on the board
//For the alarm clock, an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
 30a:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 30e:	8c e0       	ldi	r24, 0x0C	; 12
 310:	80 93 70 00 	sts	0x0070, r24
 314:	08 95       	ret

00000316 <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 316:	5d 9b       	sbis	0x0b, 5	; 11
 318:	fe cf       	rjmp	.-4      	; 0x316 <uart_putc>
    UDR0 = data;    // Send data byte
 31a:	8c b9       	out	0x0c, r24	; 12
 31c:	08 95       	ret

0000031e <uart_puts>:
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 31e:	fc 01       	movw	r30, r24
 320:	20 81       	ld	r18, Z
 322:	22 23       	and	r18, r18
 324:	39 f0       	breq	.+14     	; 0x334 <uart_puts+0x16>
 326:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 328:	5d 9b       	sbis	0x0b, 5	; 11
 32a:	fe cf       	rjmp	.-4      	; 0x328 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 32c:	2c b9       	out	0x0c, r18	; 12
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 32e:	21 91       	ld	r18, Z+
 330:	21 11       	cpse	r18, r1
 332:	fa cf       	rjmp	.-12     	; 0x328 <uart_puts+0xa>
 334:	08 95       	ret

00000336 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 336:	9c 01       	movw	r18, r24
 338:	fc 01       	movw	r30, r24
 33a:	44 91       	lpm	r20, Z
 33c:	44 23       	and	r20, r20
 33e:	39 f0       	breq	.+14     	; 0x34e <uart_puts_p+0x18>
	uart_putc(pgm_read_byte(str++));
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	f9 01       	movw	r30, r18
 344:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 346:	5d 9b       	sbis	0x0b, 5	; 11
 348:	fe cf       	rjmp	.-4      	; 0x346 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 34a:	2c b9       	out	0x0c, r18	; 12
 34c:	f4 cf       	rjmp	.-24     	; 0x336 <uart_puts_p>
 34e:	08 95       	ret

00000350 <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
    //rx and tx enable, receive interrupt enabled, 8 bit characters
    //  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
 350:	8a b1       	in	r24, 0x0a	; 10
 352:	88 61       	ori	r24, 0x18	; 24
 354:	8a b9       	out	0x0a, r24	; 10
    DDRE = 0x02;
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	82 b9       	out	0x02, r24	; 2
    //  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
    //async operation, no parity,  one stop bit, 8-bit characters
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 35a:	e5 e9       	ldi	r30, 0x95	; 149
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	86 60       	ori	r24, 0x06	; 6
 362:	80 83       	st	Z, r24
    UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 364:	10 92 90 00 	sts	0x0090, r1
    UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 368:	87 e6       	ldi	r24, 0x67	; 103
 36a:	89 b9       	out	0x09, r24	; 9
 36c:	08 95       	ret

0000036e <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
    uint16_t timer = 0;

    while (!(UCSR0A & (1<<RXC0))) {
 36e:	80 e8       	ldi	r24, 0x80	; 128
 370:	9e e3       	ldi	r25, 0x3E	; 62
 372:	03 c0       	rjmp	.+6      	; 0x37a <uart_getc+0xc>
 374:	01 97       	sbiw	r24, 0x01	; 1
	timer++;
	if(timer >= 16000){ return(0);}
 376:	00 97       	sbiw	r24, 0x00	; 0
 378:	21 f0       	breq	.+8      	; 0x382 <uart_getc+0x14>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
    uint16_t timer = 0;

    while (!(UCSR0A & (1<<RXC0))) {
 37a:	5f 9b       	sbis	0x0b, 7	; 11
 37c:	fb cf       	rjmp	.-10     	; 0x374 <uart_getc+0x6>
	//what should we return if nothing comes in?
	//return the data into a global variable
	//give uart_getc the address of the variable
	//return a -1 if no data comes back.
    } // Wait for byte to arrive
    return(UDR0); //return the received data
 37e:	8c b1       	in	r24, 0x0c	; 12
 380:	08 95       	ret
char uart_getc(void) {
    uint16_t timer = 0;

    while (!(UCSR0A & (1<<RXC0))) {
	timer++;
	if(timer >= 16000){ return(0);}
 382:	80 e0       	ldi	r24, 0x00	; 0
	//return the data into a global variable
	//give uart_getc the address of the variable
	//return a -1 if no data comes back.
    } // Wait for byte to arrive
    return(UDR0); //return the received data
}
 384:	08 95       	ret

00000386 <strobe_lcd>:

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 386:	e2 e6       	ldi	r30, 0x62	; 98
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	88 60       	ori	r24, 0x08	; 8
 38e:	80 83       	st	Z, r24
	PORTF &= ~0x08;
 390:	80 81       	ld	r24, Z
 392:	87 7f       	andi	r24, 0xF7	; 247
 394:	80 83       	st	Z, r24
 396:	08 95       	ret

00000398 <clear_display>:
}          
 
void clear_display(void){
	SPDR = 0x00;    //command, not data
 398:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 39a:	77 9b       	sbis	0x0e, 7	; 14
 39c:	fe cf       	rjmp	.-4      	; 0x39a <clear_display+0x2>
	SPDR = 0x01;    //clear display command
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3a2:	77 9b       	sbis	0x0e, 7	; 14
 3a4:	fe cf       	rjmp	.-4      	; 0x3a2 <clear_display+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3a6:	80 91 62 00 	lds	r24, 0x0062
 3aa:	88 60       	ori	r24, 0x08	; 8
 3ac:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 3b0:	80 91 62 00 	lds	r24, 0x0062
 3b4:	87 7f       	andi	r24, 0xF7	; 247
 3b6:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ba:	8f e3       	ldi	r24, 0x3F	; 63
 3bc:	9f e1       	ldi	r25, 0x1F	; 31
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <clear_display+0x26>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <clear_display+0x2c>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <cursor_home>:
	strobe_lcd();   //strobe the LCD enable pin
	_delay_ms(2);   //obligatory waiting for slow LCD
}         

void cursor_home(void){
	SPDR = 0x00;    //command, not data
 3c8:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3ca:	77 9b       	sbis	0x0e, 7	; 14
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <cursor_home+0x2>
	SPDR = 0x02;   // cursor go home position
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3d2:	77 9b       	sbis	0x0e, 7	; 14
 3d4:	fe cf       	rjmp	.-4      	; 0x3d2 <cursor_home+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3d6:	80 91 62 00 	lds	r24, 0x0062
 3da:	88 60       	ori	r24, 0x08	; 8
 3dc:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 3e0:	80 91 62 00 	lds	r24, 0x0062
 3e4:	87 7f       	andi	r24, 0xF7	; 247
 3e6:	80 93 62 00 	sts	0x0062, r24
 3ea:	08 95       	ret

000003ec <home_line2>:
	strobe_lcd();
//	_delay_ms(1);  //not necessary with alarm_clock.c code
}         
  
void home_line2(void){
	SPDR = 0x00;    //command, not data
 3ec:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <home_line2+0x2>
	SPDR = 0xC0;   // cursor go home on line 2
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 3f6:	77 9b       	sbis	0x0e, 7	; 14
 3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <home_line2+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 3fa:	80 91 62 00 	lds	r24, 0x0062
 3fe:	88 60       	ori	r24, 0x08	; 8
 400:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 404:	80 91 62 00 	lds	r24, 0x0062
 408:	87 7f       	andi	r24, 0xF7	; 247
 40a:	80 93 62 00 	sts	0x0062, r24
 40e:	08 95       	ret

00000410 <fill_spaces>:
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd(); 
//	_delay_ms(1);    //not necessary with alarm_clock.c code
}                           
 
void fill_spaces(void){
 410:	80 e1       	ldi	r24, 0x10	; 16
 412:	90 e0       	ldi	r25, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 414:	41 e0       	ldi	r20, 0x01	; 1
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		SPDR = 0x20; 
 416:	30 e2       	ldi	r19, 0x20	; 32
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
		SPDR = 0x01; //set SR for data
 418:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 41a:	77 9b       	sbis	0x0e, 7	; 14
 41c:	fe cf       	rjmp	.-4      	; 0x41a <fill_spaces+0xa>
		SPDR = 0x20; 
 41e:	3f b9       	out	0x0f, r19	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 420:	77 9b       	sbis	0x0e, 7	; 14
 422:	fe cf       	rjmp	.-4      	; 0x420 <fill_spaces+0x10>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 424:	20 91 62 00 	lds	r18, 0x0062
 428:	28 60       	ori	r18, 0x08	; 8
 42a:	20 93 62 00 	sts	0x0062, r18
	PORTF &= ~0x08;
 42e:	20 91 62 00 	lds	r18, 0x0062
 432:	27 7f       	andi	r18, 0xF7	; 247
 434:	20 93 62 00 	sts	0x0062, r18
 438:	ef e9       	ldi	r30, 0x9F	; 159
 43a:	ff e0       	ldi	r31, 0x0F	; 15
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <fill_spaces+0x2c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <fill_spaces+0x32>
 442:	00 00       	nop
 444:	01 97       	sbiw	r24, 0x01	; 1
//	_delay_ms(1);    //not necessary with alarm_clock.c code
}                           
 
void fill_spaces(void){
	int count;
	for (count=0; count<=15; count++){
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	39 f7       	brne	.-50     	; 0x418 <fill_spaces+0x8>
		SPDR = 0x20; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_ms(1);
	}
}  
 44a:	08 95       	ret

0000044c <char2lcd>:
   
void char2lcd(char a_char){
	//sends a char to the LCD
	//usage: char2lcd('H');  // send an H to the LCD
	SPDR = 0x01;   //set SR for data xfer with LSB=1
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	9f b9       	out	0x0f, r25	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 450:	77 9b       	sbis	0x0e, 7	; 14
 452:	fe cf       	rjmp	.-4      	; 0x450 <char2lcd+0x4>
	SPDR = a_char; //send the char to the SPI port
 454:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 456:	77 9b       	sbis	0x0e, 7	; 14
 458:	fe cf       	rjmp	.-4      	; 0x456 <char2lcd+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 45a:	80 91 62 00 	lds	r24, 0x0062
 45e:	88 60       	ori	r24, 0x08	; 8
 460:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 464:	80 91 62 00 	lds	r24, 0x0062
 468:	87 7f       	andi	r24, 0xF7	; 247
 46a:	80 93 62 00 	sts	0x0062, r24
 46e:	8f e9       	ldi	r24, 0x9F	; 159
 470:	9f e0       	ldi	r25, 0x0F	; 15
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	f1 f7       	brne	.-4      	; 0x472 <char2lcd+0x26>
 476:	00 c0       	rjmp	.+0      	; 0x478 <char2lcd+0x2c>
 478:	00 00       	nop
 47a:	08 95       	ret

0000047c <cursor_off>:
	_delay_ms(1); //wait the prescribed time for the LCD to process
}
  
void cursor_off(void){
	//cuts cursor off 
	SPDR = 0x00;   //set SR for data xfer with LSB=1
 47c:	1f b8       	out	0x0f, r1	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 47e:	77 9b       	sbis	0x0e, 7	; 14
 480:	fe cf       	rjmp	.-4      	; 0x47e <cursor_off+0x2>
	SPDR = 0x0C; //send the command to cut off cursor
 482:	8c e0       	ldi	r24, 0x0C	; 12
 484:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 486:	77 9b       	sbis	0x0e, 7	; 14
 488:	fe cf       	rjmp	.-4      	; 0x486 <cursor_off+0xa>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 48a:	80 91 62 00 	lds	r24, 0x0062
 48e:	88 60       	ori	r24, 0x08	; 8
 490:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 494:	80 91 62 00 	lds	r24, 0x0062
 498:	87 7f       	andi	r24, 0xF7	; 247
 49a:	80 93 62 00 	sts	0x0062, r24
 49e:	8f e9       	ldi	r24, 0x9F	; 159
 4a0:	9f e0       	ldi	r25, 0x0F	; 15
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <cursor_off+0x26>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <cursor_off+0x2c>
 4a8:	00 00       	nop
 4aa:	08 95       	ret

000004ac <string2lcd>:
	while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
	strobe_lcd();  //toggle the enable bit
	_delay_ms(1); //wait the prescribed time for the LCD to process
}
  
void string2lcd(char *lcd_str){
 4ac:	dc 01       	movw	r26, r24

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
		SPDR = 0x01; //set SR for data
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	4f b9       	out	0x0f, r20	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 4ba:	77 9b       	sbis	0x0e, 7	; 14
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <string2lcd+0xe>
		SPDR = lcd_str[count]; 
 4be:	fd 01       	movw	r30, r26
 4c0:	e8 0f       	add	r30, r24
 4c2:	f9 1f       	adc	r31, r25
 4c4:	80 81       	ld	r24, Z
 4c6:	8f b9       	out	0x0f, r24	; 15
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
 4c8:	77 9b       	sbis	0x0e, 7	; 14
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <string2lcd+0x1c>

char lcd_str[16];  //holds string to send to lcd  

void strobe_lcd(void){
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
 4cc:	80 91 62 00 	lds	r24, 0x0062
 4d0:	88 60       	ori	r24, 0x08	; 8
 4d2:	80 93 62 00 	sts	0x0062, r24
	PORTF &= ~0x08;
 4d6:	80 91 62 00 	lds	r24, 0x0062
 4da:	87 7f       	andi	r24, 0xF7	; 247
 4dc:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	8f e8       	ldi	r24, 0x8F	; 143
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <string2lcd+0x38>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <string2lcd+0x3e>
 4ea:	00 00       	nop
  
void string2lcd(char *lcd_str){

	//sends a string to LCD
	int count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 4ec:	2f 5f       	subi	r18, 0xFF	; 255
 4ee:	3f 4f       	sbci	r19, 0xFF	; 255
 4f0:	c9 01       	movw	r24, r18
 4f2:	fd 01       	movw	r30, r26
 4f4:	01 90       	ld	r0, Z+
 4f6:	00 20       	and	r0, r0
 4f8:	e9 f7       	brne	.-6      	; 0x4f4 <string2lcd+0x48>
 4fa:	ea 1b       	sub	r30, r26
 4fc:	fb 0b       	sbc	r31, r27
 4fe:	32 97       	sbiw	r30, 0x02	; 2
 500:	e2 17       	cp	r30, r18
 502:	f3 07       	cpc	r31, r19
 504:	c8 f6       	brcc	.-78     	; 0x4b8 <string2lcd+0xc>
		SPDR = lcd_str[count]; 
		while (!(SPSR & 0x80)) {}	// Wait for SPI transfer to complete
		strobe_lcd();
		_delay_us(100);
	}                  
} 
 506:	08 95       	ret

00000508 <lcd_init>:
 508:	80 91 61 00 	lds	r24, 0x0061
 50c:	88 60       	ori	r24, 0x08	; 8
 50e:	80 93 61 00 	sts	0x0061, r24
 512:	8f e5       	ldi	r24, 0x5F	; 95
 514:	9a ee       	ldi	r25, 0xEA	; 234
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <lcd_init+0xe>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <lcd_init+0x14>
 51c:	00 00       	nop
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	30 e3       	ldi	r19, 0x30	; 48
 524:	1f b8       	out	0x0f, r1	; 15
 526:	77 9b       	sbis	0x0e, 7	; 14
 528:	fe cf       	rjmp	.-4      	; 0x526 <lcd_init+0x1e>
 52a:	3f b9       	out	0x0f, r19	; 15
 52c:	77 9b       	sbis	0x0e, 7	; 14
 52e:	fe cf       	rjmp	.-4      	; 0x52c <lcd_init+0x24>
 530:	20 91 62 00 	lds	r18, 0x0062
 534:	28 60       	ori	r18, 0x08	; 8
 536:	20 93 62 00 	sts	0x0062, r18
 53a:	20 91 62 00 	lds	r18, 0x0062
 53e:	27 7f       	andi	r18, 0xF7	; 247
 540:	20 93 62 00 	sts	0x0062, r18
 544:	ef e5       	ldi	r30, 0x5F	; 95
 546:	fd e6       	ldi	r31, 0x6D	; 109
 548:	31 97       	sbiw	r30, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <lcd_init+0x40>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <lcd_init+0x46>
 54e:	00 00       	nop
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	00 97       	sbiw	r24, 0x00	; 0
 554:	39 f7       	brne	.-50     	; 0x524 <lcd_init+0x1c>
 556:	1f b8       	out	0x0f, r1	; 15
 558:	77 9b       	sbis	0x0e, 7	; 14
 55a:	fe cf       	rjmp	.-4      	; 0x558 <lcd_init+0x50>
 55c:	88 e3       	ldi	r24, 0x38	; 56
 55e:	8f b9       	out	0x0f, r24	; 15
 560:	77 9b       	sbis	0x0e, 7	; 14
 562:	fe cf       	rjmp	.-4      	; 0x560 <lcd_init+0x58>
 564:	80 91 62 00 	lds	r24, 0x0062
 568:	88 60       	ori	r24, 0x08	; 8
 56a:	80 93 62 00 	sts	0x0062, r24
 56e:	80 91 62 00 	lds	r24, 0x0062
 572:	87 7f       	andi	r24, 0xF7	; 247
 574:	80 93 62 00 	sts	0x0062, r24
 578:	8f e1       	ldi	r24, 0x1F	; 31
 57a:	9e e4       	ldi	r25, 0x4E	; 78
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <lcd_init+0x74>
 580:	00 c0       	rjmp	.+0      	; 0x582 <lcd_init+0x7a>
 582:	00 00       	nop
 584:	1f b8       	out	0x0f, r1	; 15
 586:	77 9b       	sbis	0x0e, 7	; 14
 588:	fe cf       	rjmp	.-4      	; 0x586 <lcd_init+0x7e>
 58a:	88 e0       	ldi	r24, 0x08	; 8
 58c:	8f b9       	out	0x0f, r24	; 15
 58e:	77 9b       	sbis	0x0e, 7	; 14
 590:	fe cf       	rjmp	.-4      	; 0x58e <lcd_init+0x86>
 592:	80 91 62 00 	lds	r24, 0x0062
 596:	88 60       	ori	r24, 0x08	; 8
 598:	80 93 62 00 	sts	0x0062, r24
 59c:	80 91 62 00 	lds	r24, 0x0062
 5a0:	87 7f       	andi	r24, 0xF7	; 247
 5a2:	80 93 62 00 	sts	0x0062, r24
 5a6:	ef e1       	ldi	r30, 0x1F	; 31
 5a8:	fe e4       	ldi	r31, 0x4E	; 78
 5aa:	31 97       	sbiw	r30, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <lcd_init+0xa2>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <lcd_init+0xa8>
 5b0:	00 00       	nop
 5b2:	1f b8       	out	0x0f, r1	; 15
 5b4:	77 9b       	sbis	0x0e, 7	; 14
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <lcd_init+0xac>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	8f b9       	out	0x0f, r24	; 15
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <lcd_init+0xb4>
 5c0:	80 91 62 00 	lds	r24, 0x0062
 5c4:	88 60       	ori	r24, 0x08	; 8
 5c6:	80 93 62 00 	sts	0x0062, r24
 5ca:	80 91 62 00 	lds	r24, 0x0062
 5ce:	87 7f       	andi	r24, 0xF7	; 247
 5d0:	80 93 62 00 	sts	0x0062, r24
 5d4:	8f e1       	ldi	r24, 0x1F	; 31
 5d6:	9e e4       	ldi	r25, 0x4E	; 78
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <lcd_init+0xd0>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <lcd_init+0xd6>
 5de:	00 00       	nop
 5e0:	1f b8       	out	0x0f, r1	; 15
 5e2:	77 9b       	sbis	0x0e, 7	; 14
 5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <lcd_init+0xda>
 5e6:	86 e0       	ldi	r24, 0x06	; 6
 5e8:	8f b9       	out	0x0f, r24	; 15
 5ea:	77 9b       	sbis	0x0e, 7	; 14
 5ec:	fe cf       	rjmp	.-4      	; 0x5ea <lcd_init+0xe2>
 5ee:	80 91 62 00 	lds	r24, 0x0062
 5f2:	88 60       	ori	r24, 0x08	; 8
 5f4:	80 93 62 00 	sts	0x0062, r24
 5f8:	80 91 62 00 	lds	r24, 0x0062
 5fc:	87 7f       	andi	r24, 0xF7	; 247
 5fe:	80 93 62 00 	sts	0x0062, r24
 602:	ef e1       	ldi	r30, 0x1F	; 31
 604:	fe e4       	ldi	r31, 0x4E	; 78
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <lcd_init+0xfe>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <lcd_init+0x104>
 60c:	00 00       	nop
 60e:	1f b8       	out	0x0f, r1	; 15
 610:	77 9b       	sbis	0x0e, 7	; 14
 612:	fe cf       	rjmp	.-4      	; 0x610 <lcd_init+0x108>
 614:	8e e0       	ldi	r24, 0x0E	; 14
 616:	8f b9       	out	0x0f, r24	; 15
 618:	77 9b       	sbis	0x0e, 7	; 14
 61a:	fe cf       	rjmp	.-4      	; 0x618 <lcd_init+0x110>
 61c:	80 91 62 00 	lds	r24, 0x0062
 620:	88 60       	ori	r24, 0x08	; 8
 622:	80 93 62 00 	sts	0x0062, r24
 626:	80 91 62 00 	lds	r24, 0x0062
 62a:	87 7f       	andi	r24, 0xF7	; 247
 62c:	80 93 62 00 	sts	0x0062, r24
 630:	8f e1       	ldi	r24, 0x1F	; 31
 632:	9e e4       	ldi	r25, 0x4E	; 78
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <lcd_init+0x12c>
 638:	00 c0       	rjmp	.+0      	; 0x63a <lcd_init+0x132>
 63a:	00 00       	nop
 63c:	08 95       	ret

0000063e <main>:

/***********************************************************************/
/*                                main                                 */
/***********************************************************************/
int main ()
{     
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	00 d0       	rcall	.+0      	; 0x644 <main+0x6>
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
//                            spi_init                               
//Initalizes the SPI port on the mega128. Does not do any further    
// external device specific initalizations.                          
//********************************************************************
void spi_init(void){
    DDRB |=  0x07;  //Turn on SS, MOSI, SCLK
 648:	87 b3       	in	r24, 0x17	; 23
 64a:	87 60       	ori	r24, 0x07	; 7
 64c:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st, 
    //no interrupts, enable SPI, clk low initially, rising edge sample
    SPCR=(1<<SPE) | (1<<MSTR); 
 64e:	80 e5       	ldi	r24, 0x50	; 80
 650:	8d b9       	out	0x0d, r24	; 13
    SPSR=(1<<SPI2X); //SPI at 2x speed (8 MHz)  
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	8e b9       	out	0x0e, r24	; 14
    uint8_t lo, hi;
	uint16_t tmp;
    uint8_t temp_mode;
    //uint8_t send_buff_low, send_buff_high;  //Buffer for sending
    spi_init();//initalize SPI 
    init_twi();//initalize TWI (twi_master.h)  
 656:	0e 94 82 01 	call	0x304	; 0x304 <init_twi>
    uart_init();
 65a:	0e 94 a8 01 	call	0x350	; 0x350 <uart_init>
    lcd_init();
 65e:	0e 94 84 02 	call	0x508	; 0x508 <lcd_init>
    //set LM73 mode for reading temperature by loading pointer register

    //this is done outside of the normal interrupt mode of operation 

    //load lm73_wr_buf[0] with temperature pointer address
    lm73_wr_buf[0] = LM73_PTR_TEMP;
 662:	10 92 02 01 	sts	0x0102, r1
    //start the TWI write process (twi_start_wr())
    twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2); 
 666:	42 e0       	ldi	r20, 0x02	; 2
 668:	62 e0       	ldi	r22, 0x02	; 2
 66a:	71 e0       	ldi	r23, 0x01	; 1
 66c:	80 e9       	ldi	r24, 0x90	; 144
 66e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <twi_start_wr>
    sei();             //enable interrupts to allow start_wr to finish
 672:	78 94       	sei
    //string2lcd("hello");
    cursor_off();
 674:	0e 94 3e 02 	call	0x47c	; 0x47c <cursor_off>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	83 ed       	ldi	r24, 0xD3	; 211
 67c:	90 e3       	ldi	r25, 0x30	; 48
 67e:	21 50       	subi	r18, 0x01	; 1
 680:	80 40       	sbci	r24, 0x00	; 0
 682:	90 40       	sbci	r25, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <main+0x40>
 686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x4a>
 688:	00 00       	nop
	//Keep reading UART until gets command to get temperature
	// 0-do nothing
	// 1-Send celcius
	// 2-Send Farenheigh

        clear_display();
 68a:	0e 94 cc 01 	call	0x398	; 0x398 <clear_display>
	uart_putc(2);
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	0e 94 8b 01 	call	0x316	; 0x316 <uart_putc>
	//str[0] = uart_getc();
	//str[1] = uart_getc();
        lo = uart_getc();
 694:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_getc>
 698:	18 2f       	mov	r17, r24
	hi = uart_getc();
 69a:	0e 94 b7 01 	call	0x36e	; 0x36e <uart_getc>
        tmp = (hi<<8) |lo;
 69e:	21 2f       	mov	r18, r17
 6a0:	30 e0       	ldi	r19, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 6a2:	4a e0       	ldi	r20, 0x0A	; 10
 6a4:	be 01       	movw	r22, r28
 6a6:	6f 5f       	subi	r22, 0xFF	; 255
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	f9 01       	movw	r30, r18
 6ac:	f8 2b       	or	r31, r24
 6ae:	cf 01       	movw	r24, r30
 6b0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__itoa_ncheck>
	itoa(tmp, str, 10);
		//str[1] = '1';
	//str[0] = '2';
	string2lcd(str);
 6b4:	ce 01       	movw	r24, r28
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	0e 94 56 02 	call	0x4ac	; 0x4ac <string2lcd>
 6bc:	dd cf       	rjmp	.-70     	; 0x678 <main+0x3a>

000006be <__tablejump2__>:
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31

000006c2 <__tablejump__>:
 6c2:	05 90       	lpm	r0, Z+
 6c4:	f4 91       	lpm	r31, Z
 6c6:	e0 2d       	mov	r30, r0
 6c8:	09 94       	ijmp

000006ca <__umulhisi3>:
 6ca:	a2 9f       	mul	r26, r18
 6cc:	b0 01       	movw	r22, r0
 6ce:	b3 9f       	mul	r27, r19
 6d0:	c0 01       	movw	r24, r0
 6d2:	a3 9f       	mul	r26, r19
 6d4:	70 0d       	add	r23, r0
 6d6:	81 1d       	adc	r24, r1
 6d8:	11 24       	eor	r1, r1
 6da:	91 1d       	adc	r25, r1
 6dc:	b2 9f       	mul	r27, r18
 6de:	70 0d       	add	r23, r0
 6e0:	81 1d       	adc	r24, r1
 6e2:	11 24       	eor	r1, r1
 6e4:	91 1d       	adc	r25, r1
 6e6:	08 95       	ret

000006e8 <__itoa_ncheck>:
 6e8:	bb 27       	eor	r27, r27
 6ea:	4a 30       	cpi	r20, 0x0A	; 10
 6ec:	31 f4       	brne	.+12     	; 0x6fa <__itoa_ncheck+0x12>
 6ee:	99 23       	and	r25, r25
 6f0:	22 f4       	brpl	.+8      	; 0x6fa <__itoa_ncheck+0x12>
 6f2:	bd e2       	ldi	r27, 0x2D	; 45
 6f4:	90 95       	com	r25
 6f6:	81 95       	neg	r24
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	0c 94 80 03 	jmp	0x700	; 0x700 <__utoa_common>

000006fe <__utoa_ncheck>:
 6fe:	bb 27       	eor	r27, r27

00000700 <__utoa_common>:
 700:	fb 01       	movw	r30, r22
 702:	55 27       	eor	r21, r21
 704:	aa 27       	eor	r26, r26
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	aa 1f       	adc	r26, r26
 70c:	a4 17       	cp	r26, r20
 70e:	10 f0       	brcs	.+4      	; 0x714 <__utoa_common+0x14>
 710:	a4 1b       	sub	r26, r20
 712:	83 95       	inc	r24
 714:	50 51       	subi	r21, 0x10	; 16
 716:	b9 f7       	brne	.-18     	; 0x706 <__utoa_common+0x6>
 718:	a0 5d       	subi	r26, 0xD0	; 208
 71a:	aa 33       	cpi	r26, 0x3A	; 58
 71c:	08 f0       	brcs	.+2      	; 0x720 <__utoa_common+0x20>
 71e:	a9 5d       	subi	r26, 0xD9	; 217
 720:	a1 93       	st	Z+, r26
 722:	00 97       	sbiw	r24, 0x00	; 0
 724:	79 f7       	brne	.-34     	; 0x704 <__utoa_common+0x4>
 726:	b1 11       	cpse	r27, r1
 728:	b1 93       	st	Z+, r27
 72a:	11 92       	st	Z+, r1
 72c:	cb 01       	movw	r24, r22
 72e:	0c 94 99 03 	jmp	0x732	; 0x732 <strrev>

00000732 <strrev>:
 732:	dc 01       	movw	r26, r24
 734:	fc 01       	movw	r30, r24
 736:	67 2f       	mov	r22, r23
 738:	71 91       	ld	r23, Z+
 73a:	77 23       	and	r23, r23
 73c:	e1 f7       	brne	.-8      	; 0x736 <strrev+0x4>
 73e:	32 97       	sbiw	r30, 0x02	; 2
 740:	04 c0       	rjmp	.+8      	; 0x74a <strrev+0x18>
 742:	7c 91       	ld	r23, X
 744:	6d 93       	st	X+, r22
 746:	70 83       	st	Z, r23
 748:	62 91       	ld	r22, -Z
 74a:	ae 17       	cp	r26, r30
 74c:	bf 07       	cpc	r27, r31
 74e:	c8 f3       	brcs	.-14     	; 0x742 <strrev+0x10>
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
