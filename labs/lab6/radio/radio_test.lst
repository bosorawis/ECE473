
radio_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000848  000008dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000848  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  00800102  00800102  000008de  2**0
                  ALLOC
  3 .stab         00002250  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001343  00000000  00000000  00002b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003e73  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
   4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
   c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_8>
  24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  30:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  84:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_33>
  88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
  8c:	a6 01       	movw	r20, r12
  8e:	7d 01       	movw	r14, r26
  90:	7d 01       	movw	r14, r26
  92:	7d 01       	movw	r14, r26
  94:	7d 01       	movw	r14, r26
  96:	7d 01       	movw	r14, r26
  98:	7d 01       	movw	r14, r26
  9a:	7d 01       	movw	r14, r26
  9c:	a6 01       	movw	r20, r12
  9e:	7d 01       	movw	r14, r26
  a0:	7d 01       	movw	r14, r26
  a2:	7d 01       	movw	r14, r26
  a4:	7d 01       	movw	r14, r26
  a6:	7d 01       	movw	r14, r26
  a8:	7d 01       	movw	r14, r26
  aa:	7d 01       	movw	r14, r26
  ac:	b0 01       	movw	r22, r0
  ae:	7d 01       	movw	r14, r26
  b0:	7d 01       	movw	r14, r26
  b2:	7d 01       	movw	r14, r26
  b4:	7d 01       	movw	r14, r26
  b6:	7d 01       	movw	r14, r26
  b8:	7d 01       	movw	r14, r26
  ba:	7d 01       	movw	r14, r26
  bc:	7d 01       	movw	r14, r26
  be:	7d 01       	movw	r14, r26
  c0:	7d 01       	movw	r14, r26
  c2:	7d 01       	movw	r14, r26
  c4:	7d 01       	movw	r14, r26
  c6:	7d 01       	movw	r14, r26
  c8:	7d 01       	movw	r14, r26
  ca:	7d 01       	movw	r14, r26
  cc:	b0 01       	movw	r22, r0
  ce:	7d 01       	movw	r14, r26
  d0:	7d 01       	movw	r14, r26
  d2:	7d 01       	movw	r14, r26
  d4:	7d 01       	movw	r14, r26
  d6:	7d 01       	movw	r14, r26
  d8:	7d 01       	movw	r14, r26
  da:	7d 01       	movw	r14, r26
  dc:	7d 01       	movw	r14, r26
  de:	7d 01       	movw	r14, r26
  e0:	7d 01       	movw	r14, r26
  e2:	7d 01       	movw	r14, r26
  e4:	7d 01       	movw	r14, r26
  e6:	7d 01       	movw	r14, r26
  e8:	7d 01       	movw	r14, r26
  ea:	7d 01       	movw	r14, r26
  ec:	c7 01       	movw	r24, r14
  ee:	7d 01       	movw	r14, r26
  f0:	7d 01       	movw	r14, r26
  f2:	7d 01       	movw	r14, r26
  f4:	7d 01       	movw	r14, r26
  f6:	7d 01       	movw	r14, r26
  f8:	7d 01       	movw	r14, r26
  fa:	7d 01       	movw	r14, r26
  fc:	cb 01       	movw	r24, r22
  fe:	7d 01       	movw	r14, r26
 100:	7d 01       	movw	r14, r26
 102:	7d 01       	movw	r14, r26
 104:	7d 01       	movw	r14, r26
 106:	7d 01       	movw	r14, r26
 108:	7d 01       	movw	r14, r26
 10a:	7d 01       	movw	r14, r26
 10c:	7d 01       	movw	r14, r26
 10e:	7d 01       	movw	r14, r26
 110:	7d 01       	movw	r14, r26
 112:	7d 01       	movw	r14, r26
 114:	7d 01       	movw	r14, r26
 116:	7d 01       	movw	r14, r26
 118:	7d 01       	movw	r14, r26
 11a:	7d 01       	movw	r14, r26
 11c:	d9 01       	movw	r26, r18
 11e:	7d 01       	movw	r14, r26
 120:	7d 01       	movw	r14, r26
 122:	7d 01       	movw	r14, r26
 124:	7d 01       	movw	r14, r26
 126:	7d 01       	movw	r14, r26
 128:	7d 01       	movw	r14, r26
 12a:	7d 01       	movw	r14, r26
 12c:	97 01       	movw	r18, r14

0000012e <__ctors_end>:
 12e:	11 24       	eor	r1, r1
 130:	1f be       	out	0x3f, r1	; 63
 132:	cf ef       	ldi	r28, 0xFF	; 255
 134:	d0 e1       	ldi	r29, 0x10	; 16
 136:	de bf       	out	0x3e, r29	; 62
 138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	e8 e4       	ldi	r30, 0x48	; 72
 142:	f8 e0       	ldi	r31, 0x08	; 8
 144:	00 e0       	ldi	r16, 0x00	; 0
 146:	0b bf       	out	0x3b, r16	; 59
 148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
 14a:	07 90       	elpm	r0, Z+
 14c:	0d 92       	st	X+, r0
 14e:	a2 30       	cpi	r26, 0x02	; 2
 150:	b1 07       	cpc	r27, r17
 152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	a2 e0       	ldi	r26, 0x02	; 2
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
 15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
 15e:	a8 39       	cpi	r26, 0x98	; 152
 160:	b2 07       	cpc	r27, r18
 162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
 164:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <main>
 168:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

0000016c <__bad_interrupt>:
 16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <__vector_8>:
//
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect){STC_interrupt = TRUE;}
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 56 01 	sts	0x0156, r24
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <radio_init>:
//   (^ edge int from radio) bit 7--| | | | | | | |--bit 0 USART0 RX
//(shift/load_n for 74HC165) bit 6----| | | | | |----bit 1 USART0 TX
//                           bit 5------| | | |------bit 2 (new radio reset, active high)
//                  (unused) bit 4--------| |--------bit 3 (TCNT3 PWM output for volume control)
void radio_init(void){
	DDRE  |= 0x04; //Port E bit 2 is active high reset for radio
 18e:	12 9a       	sbi	0x02, 2	; 2
	DDRE  |= 0x40; //Port E bit 6 is shift/load_n for encoder 74HC165
 190:	16 9a       	sbi	0x02, 6	; 2
	DDRE  |= 0x08; //Port E bit 3 is TCNT3 PWM output for volume
 192:	13 9a       	sbi	0x02, 3	; 2
	PORTE |= 0x04; //radio reset is on at powerup (active high)
 194:	1a 9a       	sbi	0x03, 2	; 3
	PORTE |= 0x40; //pulse low to load switch values, else its in shift mode
 196:	1e 9a       	sbi	0x03, 6	; 3
 198:	08 95       	ret

0000019a <radio_reset>:
}
//Given the hardware setup reflected above, here is the radio reset sequence.
//hardware reset of Si4734
void radio_reset(void){
	PORTE &= ~(1<<PE7); //int2 initially low to sense TWI mode
 19a:	1f 98       	cbi	0x03, 7	; 3
	DDRE  |= 0x80;      //turn on Port E bit 7 to drive it low
 19c:	17 9a       	sbi	0x02, 7	; 2
	PORTE |=  (1<<PE2); //hardware reset Si4734
 19e:	1a 9a       	sbi	0x03, 2	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	82 e4       	ldi	r24, 0x42	; 66
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <radio_reset+0x8>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <radio_reset+0xe>
	_delay_us(200);     //hold for 200us, 100us by spec
	PORTE &= ~(1<<PE2); //release reset
 1a8:	1a 98       	cbi	0x03, 2	; 3
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <radio_reset+0x12>
	_delay_us(30);      //5us required because of my slow I2C translators I suspect
	//Si code in "low" has 30us delay...no explaination in documentation
	DDRE  &= ~(0x80);   //now Port E bit 7 becomes input from the radio interrupt
 1b0:	17 98       	cbi	0x02, 7	; 2
 1b2:	08 95       	ret

000001b4 <radio_powerUp>:
}

//Once its setup, you can tune the radio and get the received signal strength.
void radio_powerUp(void){
	while(twi_busy()){} //spin while TWI is busy
 1b4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 1b8:	81 11       	cpse	r24, r1
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <radio_powerUp>
	fm_pwr_up();        //power up radio
 1bc:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <fm_pwr_up>

000001c0 <radio_tune_freq>:
}
void radio_tune_freq(){
	while(twi_busy()){} //spin while TWI is busy
 1c0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 1c4:	81 11       	cpse	r24, r1
 1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <radio_tune_freq>
	fm_tune_freq();     //tune to frequency
 1c8:	0c 94 40 02 	jmp	0x480	; 0x480 <fm_tune_freq>

000001cc <radio_get_strengh>:
}
//retrive the receive strength and display on the bargraph display
void radio_get_strengh(){
	while(twi_busy()){}                //spin while TWI is busy
 1cc:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 1d0:	81 11       	cpse	r24, r1
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <radio_get_strengh>
	fm_rsq_status();                   //get status of radio tuning operation
 1d4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <fm_rsq_status>
	rssi =  si4734_tune_status_buf[4]; //get tune status
 1d8:	80 91 3d 01 	lds	r24, 0x013D
 1dc:	80 93 81 01 	sts	0x0181, r24
 1e0:	08 95       	ret

000001e2 <redefine_rssi>:
}
//redefine rssi to be a bar graph
void redefine_rssi(){
	if(rssi<= 8) {rssi = 0x00;} 
 1e2:	80 91 81 01 	lds	r24, 0x0181
 1e6:	89 30       	cpi	r24, 0x09	; 9
 1e8:	b0 f0       	brcs	.+44     	; 0x216 <redefine_rssi+0x34>
	else if(rssi<=16) {rssi = 0x01;} 
 1ea:	81 31       	cpi	r24, 0x11	; 17
 1ec:	80 f0       	brcs	.+32     	; 0x20e <redefine_rssi+0x2c>
	else if(rssi<=24) {rssi = 0x03;} 
 1ee:	89 31       	cpi	r24, 0x19	; 25
 1f0:	c8 f0       	brcs	.+50     	; 0x224 <redefine_rssi+0x42>
	else if(rssi<=32) {rssi = 0x07;} 
 1f2:	81 32       	cpi	r24, 0x21	; 33
 1f4:	98 f0       	brcs	.+38     	; 0x21c <redefine_rssi+0x3a>
	else if(rssi<=40) {rssi = 0x0F;} 
 1f6:	89 32       	cpi	r24, 0x29	; 41
 1f8:	c8 f0       	brcs	.+50     	; 0x22c <redefine_rssi+0x4a>
	else if(rssi<=48) {rssi = 0x1F;} 
 1fa:	81 33       	cpi	r24, 0x31	; 49
 1fc:	f8 f0       	brcs	.+62     	; 0x23c <redefine_rssi+0x5a>
	else if(rssi<=56) {rssi = 0x3F;} 
 1fe:	89 33       	cpi	r24, 0x39	; 57
 200:	c8 f0       	brcs	.+50     	; 0x234 <redefine_rssi+0x52>
	else if(rssi<=64) {rssi = 0x7F;}
 202:	81 34       	cpi	r24, 0x41	; 65
 204:	f8 f0       	brcs	.+62     	; 0x244 <redefine_rssi+0x62>
	else if(rssi>=64) {rssi = 0xFF;}
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	80 93 81 01 	sts	0x0181, r24
 20c:	08 95       	ret
	rssi =  si4734_tune_status_buf[4]; //get tune status
}
//redefine rssi to be a bar graph
void redefine_rssi(){
	if(rssi<= 8) {rssi = 0x00;} 
	else if(rssi<=16) {rssi = 0x01;} 
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 81 01 	sts	0x0181, r24
 214:	08 95       	ret
	fm_rsq_status();                   //get status of radio tuning operation
	rssi =  si4734_tune_status_buf[4]; //get tune status
}
//redefine rssi to be a bar graph
void redefine_rssi(){
	if(rssi<= 8) {rssi = 0x00;} 
 216:	10 92 81 01 	sts	0x0181, r1
 21a:	08 95       	ret
	else if(rssi<=16) {rssi = 0x01;} 
	else if(rssi<=24) {rssi = 0x03;} 
	else if(rssi<=32) {rssi = 0x07;} 
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	80 93 81 01 	sts	0x0181, r24
 222:	08 95       	ret
}
//redefine rssi to be a bar graph
void redefine_rssi(){
	if(rssi<= 8) {rssi = 0x00;} 
	else if(rssi<=16) {rssi = 0x01;} 
	else if(rssi<=24) {rssi = 0x03;} 
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	80 93 81 01 	sts	0x0181, r24
 22a:	08 95       	ret
	else if(rssi<=32) {rssi = 0x07;} 
	else if(rssi<=40) {rssi = 0x0F;} 
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	80 93 81 01 	sts	0x0181, r24
 232:	08 95       	ret
	else if(rssi<=48) {rssi = 0x1F;} 
	else if(rssi<=56) {rssi = 0x3F;} 
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	80 93 81 01 	sts	0x0181, r24
 23a:	08 95       	ret
	if(rssi<= 8) {rssi = 0x00;} 
	else if(rssi<=16) {rssi = 0x01;} 
	else if(rssi<=24) {rssi = 0x03;} 
	else if(rssi<=32) {rssi = 0x07;} 
	else if(rssi<=40) {rssi = 0x0F;} 
	else if(rssi<=48) {rssi = 0x1F;} 
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	80 93 81 01 	sts	0x0181, r24
 242:	08 95       	ret
	else if(rssi<=56) {rssi = 0x3F;} 
	else if(rssi<=64) {rssi = 0x7F;}
 244:	8f e7       	ldi	r24, 0x7F	; 127
 246:	80 93 81 01 	sts	0x0181, r24
 24a:	08 95       	ret

0000024c <uart_putc>:
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 24c:	5d 9b       	sbis	0x0b, 5	; 11
 24e:	fe cf       	rjmp	.-4      	; 0x24c <uart_putc>
    UDR0 = data;    // Send data byte
 250:	8c b9       	out	0x0c, r24	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 252:	5d 9b       	sbis	0x0b, 5	; 11
 254:	fe cf       	rjmp	.-4      	; 0x252 <uart_putc+0x6>
}
 256:	08 95       	ret

00000258 <uart_puts>:
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 258:	fc 01       	movw	r30, r24
 25a:	20 81       	ld	r18, Z
 25c:	22 23       	and	r18, r18
 25e:	49 f0       	breq	.+18     	; 0x272 <uart_puts+0x1a>
 260:	31 96       	adiw	r30, 0x01	; 1
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 262:	5d 9b       	sbis	0x0b, 5	; 11
 264:	fe cf       	rjmp	.-4      	; 0x262 <uart_puts+0xa>
    UDR0 = data;    // Send data byte
 266:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 268:	5d 9b       	sbis	0x0b, 5	; 11
 26a:	fe cf       	rjmp	.-4      	; 0x268 <uart_puts+0x10>
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str) {
    int i = 0;
    while(str[i] != '\0') { // Loop through string, sending each character
 26c:	21 91       	ld	r18, Z+
 26e:	21 11       	cpse	r18, r1
 270:	f8 cf       	rjmp	.-16     	; 0x262 <uart_puts+0xa>
 272:	08 95       	ret

00000274 <uart_puts_p>:
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 274:	9c 01       	movw	r18, r24
 276:	fc 01       	movw	r30, r24
 278:	44 91       	lpm	r20, Z
 27a:	44 23       	and	r20, r20
 27c:	69 f0       	breq	.+26     	; 0x298 <uart_puts_p+0x24>
	uart_putc(pgm_read_byte(str++));
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	f9 01       	movw	r30, r18
 282:	24 91       	lpm	r18, Z
//                        uart_putc
//
// Takes a character and sends it to USART0
//
void uart_putc(char data) {
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 284:	5d 9b       	sbis	0x0b, 5	; 11
 286:	fe cf       	rjmp	.-4      	; 0x284 <uart_puts_p+0x10>
    UDR0 = data;    // Send data byte
 288:	2c b9       	out	0x0c, r18	; 12
    while (!(UCSR0A&(1<<UDRE0)));    // Wait for previous transmissions
 28a:	5d 9b       	sbis	0x0b, 5	; 11
 28c:	fe cf       	rjmp	.-4      	; 0x28a <uart_puts_p+0x16>
//******************************************************************
//                        uart_puts_p
// Takes a string in flash memory and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str) {
    while(pgm_read_byte(str) != 0x00) { // Loop through string, sending each character
 28e:	9c 01       	movw	r18, r24
 290:	fc 01       	movw	r30, r24
 292:	44 91       	lpm	r20, Z
 294:	41 11       	cpse	r20, r1
 296:	f3 cf       	rjmp	.-26     	; 0x27e <uart_puts_p+0xa>
	uart_putc(pgm_read_byte(str++));
    }
}
 298:	08 95       	ret

0000029a <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init(){
    //rx and tx enable, receive interrupt enabled, 8 bit characters
    //  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);
    UCSR0B |= (1<<RXEN0) | (1<<TXEN0);  //INTERRUPS DISABLED!!!
 29a:	8a b1       	in	r24, 0x0a	; 10
 29c:	88 61       	ori	r24, 0x18	; 24
 29e:	8a b9       	out	0x0a, r24	; 10

    //  UCSR0B |= (1<<RXEN0) | (1<<TXEN0) ;
    //async operation, no parity,  one stop bit, 8-bit characters
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 2a0:	e5 e9       	ldi	r30, 0x95	; 149
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	86 60       	ori	r24, 0x06	; 6
 2a8:	80 83       	st	Z, r24
    UBRR0H = (BAUDVALUE >>8 ); //load upper byte of the baud rate into UBRR 
 2aa:	10 92 90 00 	sts	0x0090, r1
    UBRR0L =  BAUDVALUE;       //load lower byte of the baud rate into UBRR 
 2ae:	87 e6       	ldi	r24, 0x67	; 103
 2b0:	89 b9       	out	0x09, r24	; 9
 2b2:	08 95       	ret

000002b4 <uart_getc>:
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
    uint16_t timer = 0;

    while (!(UCSR0A & (1<<RXC0))) {
 2b4:	80 e8       	ldi	r24, 0x80	; 128
 2b6:	9e e3       	ldi	r25, 0x3E	; 62
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <uart_getc+0xc>
 2ba:	01 97       	sbiw	r24, 0x01	; 1
	timer++;
	if(timer >= 16000){ return(0);}
 2bc:	00 97       	sbiw	r24, 0x00	; 0
 2be:	21 f0       	breq	.+8      	; 0x2c8 <uart_getc+0x14>
//Modified to not block indefinately in the case of a lost byte
//
char uart_getc(void) {
    uint16_t timer = 0;

    while (!(UCSR0A & (1<<RXC0))) {
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	fb cf       	rjmp	.-10     	; 0x2ba <uart_getc+0x6>
	//what should we return if nothing comes in?
	//return the data into a global variable
	//give uart_getc the address of the variable
	//return a -1 if no data comes back.
    } // Wait for byte to arrive
    return(UDR0); //return the received data
 2c4:	8c b1       	in	r24, 0x0c	; 12
 2c6:	08 95       	ret
char uart_getc(void) {
    uint16_t timer = 0;

    while (!(UCSR0A & (1<<RXC0))) {
	timer++;
	if(timer >= 16000){ return(0);}
 2c8:	80 e0       	ldi	r24, 0x00	; 0
	//return the data into a global variable
	//give uart_getc the address of the variable
	//return a -1 if no data comes back.
    } // Wait for byte to arrive
    return(UDR0); //return the received data
}
 2ca:	08 95       	ret

000002cc <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	0b b6       	in	r0, 0x3b	; 59
 2d8:	0f 92       	push	r0
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 2ea:	80 91 71 00 	lds	r24, 0x0071
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	fc 01       	movw	r30, r24
 2f2:	38 97       	sbiw	r30, 0x08	; 8
 2f4:	e1 35       	cpi	r30, 0x51	; 81
 2f6:	f1 05       	cpc	r31, r1
 2f8:	b0 f0       	brcs	.+44     	; 0x326 <__vector_33+0x5a>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
 2fa:	80 91 71 00 	lds	r24, 0x0071
 2fe:	80 93 93 01 	sts	0x0193, r24
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	80 93 74 00 	sts	0x0074, r24
  }//switch
}//TWI_isr
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0b be       	out	0x3b, r0	; 59
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
 326:	ea 5b       	subi	r30, 0xBA	; 186
 328:	ff 4f       	sbci	r31, 0xFF	; 255
 32a:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
 32e:	80 91 04 01 	lds	r24, 0x0104
 332:	e0 91 94 01 	lds	r30, 0x0194
 336:	f0 91 95 01 	lds	r31, 0x0195
 33a:	e8 0f       	add	r30, r24
 33c:	f1 1d       	adc	r31, r1
 33e:	80 91 73 00 	lds	r24, 0x0073
 342:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
 344:	84 e9       	ldi	r24, 0x94	; 148
 346:	80 93 74 00 	sts	0x0074, r24
      break;      
 34a:	de cf       	rjmp	.-68     	; 0x308 <__vector_33+0x3c>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
 34c:	80 91 96 01 	lds	r24, 0x0196
 350:	80 93 73 00 	sts	0x0073, r24
      twi_buf_ptr = 0;      //initalize buffer pointer 
 354:	10 92 04 01 	sts	0x0104, r1
      TWCR = TWCR_SEND;     //send SLA+RW
 358:	85 e8       	ldi	r24, 0x85	; 133
 35a:	80 93 74 00 	sts	0x0074, r24
      break;
 35e:	d4 cf       	rjmp	.-88     	; 0x308 <__vector_33+0x3c>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
 360:	80 91 04 01 	lds	r24, 0x0104
 364:	90 91 97 01 	lds	r25, 0x0197
 368:	89 17       	cp	r24, r25
 36a:	60 f7       	brcc	.-40     	; 0x344 <__vector_33+0x78>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
 36c:	e0 91 94 01 	lds	r30, 0x0194
 370:	f0 91 95 01 	lds	r31, 0x0195
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	98 0f       	add	r25, r24
 378:	90 93 04 01 	sts	0x0104, r25
 37c:	e8 0f       	add	r30, r24
 37e:	f1 1d       	adc	r31, r1
 380:	80 81       	ld	r24, Z
 382:	80 93 73 00 	sts	0x0073, r24
        TWCR = TWCR_SEND;               //send next byte 
 386:	85 e8       	ldi	r24, 0x85	; 133
 388:	80 93 74 00 	sts	0x0074, r24
 38c:	bd cf       	rjmp	.-134    	; 0x308 <__vector_33+0x3c>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
 38e:	85 ea       	ldi	r24, 0xA5	; 165
 390:	80 93 74 00 	sts	0x0074, r24
      break;
 394:	b9 cf       	rjmp	.-142    	; 0x308 <__vector_33+0x3c>
 396:	20 91 04 01 	lds	r18, 0x0104
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 39a:	80 91 97 01 	lds	r24, 0x0197
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	dc f4       	brge	.+54     	; 0x3e0 <__vector_33+0x114>
 3aa:	85 ec       	ldi	r24, 0xC5	; 197
 3ac:	80 93 74 00 	sts	0x0074, r24
 3b0:	ab cf       	rjmp	.-170    	; 0x308 <__vector_33+0x3c>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
 3b2:	e0 91 94 01 	lds	r30, 0x0194
 3b6:	f0 91 95 01 	lds	r31, 0x0195
 3ba:	80 91 04 01 	lds	r24, 0x0104
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	28 0f       	add	r18, r24
 3c2:	20 93 04 01 	sts	0x0104, r18
 3c6:	e8 0f       	add	r30, r24
 3c8:	f1 1d       	adc	r31, r1
 3ca:	80 91 73 00 	lds	r24, 0x0073
 3ce:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
 3d0:	80 91 97 01 	lds	r24, 0x0197
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	28 17       	cp	r18, r24
 3dc:	39 07       	cpc	r19, r25
 3de:	2c f3       	brlt	.-54     	; 0x3aa <__vector_33+0xde>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
 3e0:	85 e8       	ldi	r24, 0x85	; 133
 3e2:	80 93 74 00 	sts	0x0074, r24
 3e6:	90 cf       	rjmp	.-224    	; 0x308 <__vector_33+0x3c>

000003e8 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 3e8:	80 91 74 00 	lds	r24, 0x0074
}
 3ec:	81 70       	andi	r24, 0x01	; 1
 3ee:	08 95       	ret

000003f0 <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 3f0:	90 91 74 00 	lds	r25, 0x0074
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
 3f4:	90 fd       	sbrc	r25, 0
 3f6:	fc cf       	rjmp	.-8      	; 0x3f0 <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
 3f8:	8e 7f       	andi	r24, 0xFE	; 254
 3fa:	80 93 96 01 	sts	0x0196, r24
  twi_buf = twi_data;                   //load pointer to write buffer
 3fe:	70 93 95 01 	sts	0x0195, r23
 402:	60 93 94 01 	sts	0x0194, r22
  twi_msg_size = byte_cnt;              //load size of xfer 
 406:	40 93 97 01 	sts	0x0197, r20
  TWCR = TWCR_START;                    //initiate START
 40a:	85 ea       	ldi	r24, 0xA5	; 165
 40c:	80 93 74 00 	sts	0x0074, r24
 410:	08 95       	ret

00000412 <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
 412:	90 91 74 00 	lds	r25, 0x0074
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
 416:	90 fd       	sbrc	r25, 0
 418:	fc cf       	rjmp	.-8      	; 0x412 <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
 41a:	81 60       	ori	r24, 0x01	; 1
 41c:	80 93 96 01 	sts	0x0196, r24
  twi_buf = twi_data;                  //load pointer to write buffer
 420:	70 93 95 01 	sts	0x0195, r23
 424:	60 93 94 01 	sts	0x0194, r22
  twi_msg_size = byte_cnt;             //load size of xfer 
 428:	40 93 97 01 	sts	0x0197, r20
  TWCR = TWCR_START;                   //initiate START
 42c:	85 ea       	ldi	r24, 0xA5	; 165
 42e:	80 93 74 00 	sts	0x0074, r24
 432:	08 95       	ret

00000434 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
 434:	8f ef       	ldi	r24, 0xFF	; 255
 436:	80 93 73 00 	sts	0x0073, r24
  TWSR = 0x00;     //prescaler value = 1
 43a:	10 92 71 00 	sts	0x0071, r1
  TWBR = TWI_TWBR; //defined in twi_master.h 
 43e:	8c e0       	ldi	r24, 0x0C	; 12
 440:	80 93 70 00 	sts	0x0070, r24
 444:	08 95       	ret

00000446 <get_int_status>:
//Fetch the interrupt status available from the status byte.
//
//TODO: update for interrupts
// 
uint8_t get_int_status(){
    si4734_wr_buf[0] = GET_INT_STATUS;              
 446:	84 e1       	ldi	r24, 0x14	; 20
 448:	80 93 30 01 	sts	0x0130, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	60 e3       	ldi	r22, 0x30	; 48
 450:	71 e0       	ldi	r23, 0x01	; 1
 452:	82 e2       	ldi	r24, 0x22	; 34
 454:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
 458:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 45c:	81 11       	cpse	r24, r1
 45e:	fc cf       	rjmp	.-8      	; 0x458 <get_int_status+0x12>
 460:	84 e6       	ldi	r24, 0x64	; 100
 462:	8a 95       	dec	r24
 464:	f1 f7       	brne	.-4      	; 0x462 <get_int_status+0x1c>
    _delay_us(300);        //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status 
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	64 e8       	ldi	r22, 0x84	; 132
 46a:	71 e0       	ldi	r23, 0x01	; 1
 46c:	82 e2       	ldi	r24, 0x22	; 34
 46e:	0e 94 09 02 	call	0x412	; 0x412 <twi_start_rd>
    while( twi_busy() ){}; //spin while previous TWI transaction finshes
 472:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 476:	81 11       	cpse	r24, r1
 478:	fc cf       	rjmp	.-8      	; 0x472 <get_int_status+0x2c>
    return(si4734_rd_buf[0]);
}
 47a:	80 91 84 01 	lds	r24, 0x0184
 47e:	08 95       	ret

00000480 <fm_tune_freq>:
//
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq(){
  si4734_wr_buf[0] = 0x20;  //fm tune command
 480:	80 e2       	ldi	r24, 0x20	; 32
 482:	80 93 30 01 	sts	0x0130, r24
  si4734_wr_buf[1] = 0x00;  //no FREEZE and no FAST tune
 486:	10 92 31 01 	sts	0x0131, r1
  si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
 48a:	80 91 00 01 	lds	r24, 0x0100
 48e:	90 91 01 01 	lds	r25, 0x0101
 492:	90 93 32 01 	sts	0x0132, r25
  si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
 496:	80 93 33 01 	sts	0x0133, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior
 49a:	10 92 34 01 	sts	0x0134, r1
  //send fm tune command
  STC_interrupt = FALSE;
 49e:	10 92 56 01 	sts	0x0156, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
 4a2:	45 e0       	ldi	r20, 0x05	; 5
 4a4:	60 e3       	ldi	r22, 0x30	; 48
 4a6:	71 e0       	ldi	r23, 0x01	; 1
 4a8:	82 e2       	ldi	r24, 0x22	; 34
 4aa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
 4ae:	80 91 56 01 	lds	r24, 0x0156
 4b2:	88 23       	and	r24, r24
 4b4:	e1 f3       	breq	.-8      	; 0x4ae <fm_tune_freq+0x2e>
}
 4b6:	08 95       	ret

000004b8 <am_tune_freq>:
//
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq(){
  si4734_wr_buf[0] = AM_TUNE_FREQ; //am tune command
 4b8:	80 e4       	ldi	r24, 0x40	; 64
 4ba:	80 93 30 01 	sts	0x0130, r24
  si4734_wr_buf[1] = 0x00;         //no FAST tune
 4be:	10 92 31 01 	sts	0x0131, r1
  si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
 4c2:	80 91 54 01 	lds	r24, 0x0154
 4c6:	90 91 55 01 	lds	r25, 0x0155
 4ca:	90 93 32 01 	sts	0x0132, r25
  si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
 4ce:	80 93 33 01 	sts	0x0133, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
 4d2:	10 92 34 01 	sts	0x0134, r1
  si4734_wr_buf[5] = 0x00;  //antenna tuning capactior low byte
 4d6:	10 92 35 01 	sts	0x0135, r1
  //send am tune command
  STC_interrupt = FALSE;
 4da:	10 92 56 01 	sts	0x0156, r1
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 4de:	46 e0       	ldi	r20, 0x06	; 6
 4e0:	60 e3       	ldi	r22, 0x30	; 48
 4e2:	71 e0       	ldi	r23, 0x01	; 1
 4e4:	82 e2       	ldi	r24, 0x22	; 34
 4e6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
  while( ! STC_interrupt ){}; //spin until the tune command finishes 
 4ea:	80 91 56 01 	lds	r24, 0x0156
 4ee:	88 23       	and	r24, r24
 4f0:	e1 f3       	breq	.-8      	; 0x4ea <am_tune_freq+0x32>
}
 4f2:	08 95       	ret

000004f4 <sw_tune_freq>:
//
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq(){
  si4734_wr_buf[0] = 0x40;  //am tune command
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	80 93 30 01 	sts	0x0130, r24
  si4734_wr_buf[1] = 0x00;  //no FAST tune
 4fa:	10 92 31 01 	sts	0x0131, r1
  si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
 4fe:	80 91 57 01 	lds	r24, 0x0157
 502:	90 91 58 01 	lds	r25, 0x0158
 506:	90 93 32 01 	sts	0x0132, r25
  si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
 50a:	80 93 33 01 	sts	0x0133, r24
  si4734_wr_buf[4] = 0x00;  //antenna tuning capactior high byte
 50e:	10 92 34 01 	sts	0x0134, r1
  si4734_wr_buf[5] = 0x01;  //antenna tuning capactior low byte 
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	80 93 35 01 	sts	0x0135, r24
  //send am tune command
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 518:	46 e0       	ldi	r20, 0x06	; 6
 51a:	60 e3       	ldi	r22, 0x30	; 48
 51c:	71 e0       	ldi	r23, 0x01	; 1
 51e:	82 e2       	ldi	r24, 0x22	; 34
 520:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 524:	8f e1       	ldi	r24, 0x1F	; 31
 526:	9e e4       	ldi	r25, 0x4E	; 78
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <sw_tune_freq+0x34>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <sw_tune_freq+0x3a>
 52e:	00 00       	nop
 530:	08 95       	ret

00000532 <radio_pwr_dwn>:
//

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
 532:	80 91 02 01 	lds	r24, 0x0102
 536:	90 91 03 01 	lds	r25, 0x0103
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	91 05       	cpc	r25, r1
 53e:	41 f1       	breq	.+80     	; 0x590 <radio_pwr_dwn+0x5e>
 540:	f0 f0       	brcs	.+60     	; 0x57e <radio_pwr_dwn+0x4c>
 542:	02 97       	sbiw	r24, 0x02	; 2
 544:	41 f4       	brne	.+16     	; 0x556 <radio_pwr_dwn+0x24>
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
  case(SW) : eeprom_write_word(&eeprom_sw_freq, current_sw_freq); break;
 546:	60 91 57 01 	lds	r22, 0x0157
 54a:	70 91 58 01 	lds	r23, 0x0158
 54e:	82 e8       	ldi	r24, 0x82	; 130
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	0e 94 0d 04 	call	0x81a	; 0x81a <__eewr_word_m128>
  default  : break;
}//switch      

  eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
 556:	60 91 43 01 	lds	r22, 0x0143
 55a:	85 e0       	ldi	r24, 0x05	; 5
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 00 04 	call	0x800	; 0x800 <__eewr_byte_m128>

//send fm power down command
    si4734_wr_buf[0] = 0x11;
 562:	81 e1       	ldi	r24, 0x11	; 17
 564:	80 93 30 01 	sts	0x0130, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
 568:	41 e0       	ldi	r20, 0x01	; 1
 56a:	60 e3       	ldi	r22, 0x30	; 48
 56c:	71 e0       	ldi	r23, 0x01	; 1
 56e:	82 e2       	ldi	r24, 0x22	; 34
 570:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 574:	87 e6       	ldi	r24, 0x67	; 103
 576:	8a 95       	dec	r24
 578:	f1 f7       	brne	.-4      	; 0x576 <radio_pwr_dwn+0x44>
 57a:	00 00       	nop
 57c:	08 95       	ret

void radio_pwr_dwn(){

//save current frequency to EEPROM
switch(current_radio_band){
  case(FM) : eeprom_write_word(&eeprom_fm_freq, current_fm_freq); break;
 57e:	60 91 00 01 	lds	r22, 0x0100
 582:	70 91 01 01 	lds	r23, 0x0101
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	0e 94 0d 04 	call	0x81a	; 0x81a <__eewr_word_m128>
 58e:	e3 cf       	rjmp	.-58     	; 0x556 <radio_pwr_dwn+0x24>
  case(AM) : eeprom_write_word(&eeprom_am_freq, current_am_freq); break;
 590:	60 91 54 01 	lds	r22, 0x0154
 594:	70 91 55 01 	lds	r23, 0x0155
 598:	81 e4       	ldi	r24, 0x41	; 65
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0e 94 0d 04 	call	0x81a	; 0x81a <__eewr_word_m128>
 5a0:	da cf       	rjmp	.-76     	; 0x556 <radio_pwr_dwn+0x24>

000005a2 <fm_rsq_status>:
//inside the chip. 
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status(){

    si4734_wr_buf[0] = FM_RSQ_STATUS;            //fm_rsq_status command
 5a2:	83 e2       	ldi	r24, 0x23	; 35
 5a4:	80 93 30 01 	sts	0x0130, r24
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 31 01 	sts	0x0131, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 5ae:	42 e0       	ldi	r20, 0x02	; 2
 5b0:	60 e3       	ldi	r22, 0x30	; 48
 5b2:	71 e0       	ldi	r23, 0x01	; 1
 5b4:	82 e2       	ldi	r24, 0x22	; 34
 5b6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 5ba:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 5be:	81 11       	cpse	r24, r1
 5c0:	fc cf       	rjmp	.-8      	; 0x5ba <fm_rsq_status+0x18>
 5c2:	84 e6       	ldi	r24, 0x64	; 100
 5c4:	8a 95       	dec	r24
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <fm_rsq_status+0x22>
    _delay_us(300);      //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you 
    //when the command is received and has been processed.
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 5c8:	48 e0       	ldi	r20, 0x08	; 8
 5ca:	69 e3       	ldi	r22, 0x39	; 57
 5cc:	71 e0       	ldi	r23, 0x01	; 1
 5ce:	82 e2       	ldi	r24, 0x22	; 34
 5d0:	0e 94 09 02 	call	0x412	; 0x412 <twi_start_rd>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 5d4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 5d8:	81 11       	cpse	r24, r1
 5da:	fc cf       	rjmp	.-8      	; 0x5d4 <fm_rsq_status+0x32>
}
 5dc:	08 95       	ret

000005de <fm_tune_status>:
//is cleared.
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status(){

    si4734_wr_buf[0] = FM_TUNE_STATUS;            //fm_tune_status command
 5de:	82 e2       	ldi	r24, 0x22	; 34
 5e0:	80 93 30 01 	sts	0x0130, r24
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	80 93 31 01 	sts	0x0131, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 5ea:	42 e0       	ldi	r20, 0x02	; 2
 5ec:	60 e3       	ldi	r22, 0x30	; 48
 5ee:	71 e0       	ldi	r23, 0x01	; 1
 5f0:	82 e2       	ldi	r24, 0x22	; 34
 5f2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 5f6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 5fa:	81 11       	cpse	r24, r1
 5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <fm_tune_status+0x18>
 5fe:	84 e6       	ldi	r24, 0x64	; 100
 600:	8a 95       	dec	r24
 602:	f1 f7       	brne	.-4      	; 0x600 <fm_tune_status+0x22>
    _delay_us(300);        //delay for si4734 to process
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 604:	48 e0       	ldi	r20, 0x08	; 8
 606:	69 e3       	ldi	r22, 0x39	; 57
 608:	71 e0       	ldi	r23, 0x01	; 1
 60a:	82 e2       	ldi	r24, 0x22	; 34
 60c:	0e 94 09 02 	call	0x412	; 0x412 <twi_start_rd>
    while( twi_busy() ){}; //spin till TWI read transaction finshes
 610:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 614:	81 11       	cpse	r24, r1
 616:	fc cf       	rjmp	.-8      	; 0x610 <fm_tune_status+0x32>
}
 618:	08 95       	ret

0000061a <am_tune_status>:
//TODO: could probably just have one tune_status() function
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status(){

    si4734_wr_buf[0] = AM_TUNE_STATUS;            //fm_tune_status command
 61a:	82 e4       	ldi	r24, 0x42	; 66
 61c:	80 93 30 01 	sts	0x0130, r24
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK;  //clear STCINT bit if set
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	80 93 31 01 	sts	0x0131, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 626:	42 e0       	ldi	r20, 0x02	; 2
 628:	60 e3       	ldi	r22, 0x30	; 48
 62a:	71 e0       	ldi	r23, 0x01	; 1
 62c:	82 e2       	ldi	r24, 0x22	; 34
 62e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 632:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 636:	81 11       	cpse	r24, r1
 638:	fc cf       	rjmp	.-8      	; 0x632 <am_tune_status+0x18>
 63a:	84 e6       	ldi	r24, 0x64	; 100
 63c:	8a 95       	dec	r24
 63e:	f1 f7       	brne	.-4      	; 0x63c <am_tune_status+0x22>
    _delay_us(300);        //delay for si4734 to process command
    //get the am tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 640:	48 e0       	ldi	r20, 0x08	; 8
 642:	69 e3       	ldi	r22, 0x39	; 57
 644:	71 e0       	ldi	r23, 0x01	; 1
 646:	82 e2       	ldi	r24, 0x22	; 34
 648:	0c 94 09 02 	jmp	0x412	; 0x412 <twi_start_rd>

0000064c <am_rsq_status>:
//
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status(){

    si4734_wr_buf[0] = AM_RSQ_STATUS;            //am_rsq_status command
 64c:	83 e4       	ldi	r24, 0x43	; 67
 64e:	80 93 30 01 	sts	0x0130, r24
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK;  //clear STCINT bit if set
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 31 01 	sts	0x0131, r24
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
 658:	42 e0       	ldi	r20, 0x02	; 2
 65a:	60 e3       	ldi	r22, 0x30	; 48
 65c:	71 e0       	ldi	r23, 0x01	; 1
 65e:	82 e2       	ldi	r24, 0x22	; 34
 660:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
    while(twi_busy()){}; //spin while previous TWI transaction finshes
 664:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <twi_busy>
 668:	81 11       	cpse	r24, r1
 66a:	fc cf       	rjmp	.-8      	; 0x664 <am_rsq_status+0x18>
 66c:	84 e6       	ldi	r24, 0x64	; 100
 66e:	8a 95       	dec	r24
 670:	f1 f7       	brne	.-4      	; 0x66e <am_rsq_status+0x22>
    _delay_us(300);        //delay for si4734 to process command
    //get the fm tune status 
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
 672:	48 e0       	ldi	r20, 0x08	; 8
 674:	69 e3       	ldi	r22, 0x39	; 57
 676:	71 e0       	ldi	r23, 0x01	; 1
 678:	82 e2       	ldi	r24, 0x22	; 34
 67a:	0c 94 09 02 	jmp	0x412	; 0x412 <twi_start_rd>

0000067e <set_property>:
//The set property command does not have a indication that it has completed. This
//command is guarnteed by design to finish in 10ms. 
//
void set_property(uint16_t property, uint16_t property_value){

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
 67e:	22 e1       	ldi	r18, 0x12	; 18
 680:	20 93 30 01 	sts	0x0130, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
 684:	10 92 31 01 	sts	0x0131, r1
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
 688:	90 93 32 01 	sts	0x0132, r25
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
 68c:	80 93 33 01 	sts	0x0133, r24
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
 690:	70 93 34 01 	sts	0x0134, r23
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
 694:	60 93 35 01 	sts	0x0135, r22
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
 698:	46 e0       	ldi	r20, 0x06	; 6
 69a:	60 e3       	ldi	r22, 0x30	; 48
 69c:	71 e0       	ldi	r23, 0x01	; 1
 69e:	82 e2       	ldi	r24, 0x22	; 34
 6a0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6a4:	83 ec       	ldi	r24, 0xC3	; 195
 6a6:	99 e0       	ldi	r25, 0x09	; 9
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <set_property+0x2a>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <set_property+0x30>
 6ae:	00 00       	nop
 6b0:	08 95       	ret

000006b2 <fm_pwr_up>:
//********************************************************************************
//                            fm_pwr_up()
//
void fm_pwr_up(){
//restore the previous fm frequency  
 current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work 
 6b2:	86 e0       	ldi	r24, 0x06	; 6
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__eerd_word_m128>
 6ba:	90 93 01 01 	sts	0x0101, r25
 6be:	80 93 00 01 	sts	0x0100, r24
 current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 6c2:	85 e0       	ldi	r24, 0x05	; 5
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__eerd_byte_m128>
 6ca:	80 93 43 01 	sts	0x0143, r24

//send fm power up command
  si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	80 93 30 01 	sts	0x0130, r24
  si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
 6d4:	80 e5       	ldi	r24, 0x50	; 80
 6d6:	80 93 31 01 	sts	0x0131, r24
  si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
 6da:	85 e0       	ldi	r24, 0x05	; 5
 6dc:	80 93 32 01 	sts	0x0132, r24
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 6e0:	43 e0       	ldi	r20, 0x03	; 3
 6e2:	60 e3       	ldi	r22, 0x30	; 48
 6e4:	71 e0       	ldi	r23, 0x01	; 1
 6e6:	82 e2       	ldi	r24, 0x22	; 34
 6e8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
 6ec:	8f e2       	ldi	r24, 0x2F	; 47
 6ee:	95 e7       	ldi	r25, 0x75	; 117
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <fm_pwr_up+0x3e>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <fm_pwr_up+0x44>
 6f6:	00 00       	nop
  _delay_ms(120);               //startup delay as specified 
  //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
  //low pulse will be output from GPIO2/INT when tune or seek is completed.
  set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0c 94 3f 03 	jmp	0x67e	; 0x67e <set_property>

00000704 <am_pwr_up>:
//********************************************************************************
//                            am_pwr_up()
//
void am_pwr_up(){
//restore the previous am frequency  
  current_am_freq = eeprom_read_word(&eeprom_am_freq);
 704:	81 e4       	ldi	r24, 0x41	; 65
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__eerd_word_m128>
 70c:	90 93 55 01 	sts	0x0155, r25
 710:	80 93 54 01 	sts	0x0154, r24
  current_volume  = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work 
 714:	85 e0       	ldi	r24, 0x05	; 5
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__eerd_byte_m128>
 71c:	80 93 43 01 	sts	0x0143, r24

//send am power up command
  si4734_wr_buf[0] = AM_PWR_UP;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	80 93 30 01 	sts	0x0130, r24
  si4734_wr_buf[1] = 0x51;//GPO2OEN and XOSCEN selected
 726:	81 e5       	ldi	r24, 0x51	; 81
 728:	80 93 31 01 	sts	0x0131, r24
  si4734_wr_buf[2] = 0x05;
 72c:	85 e0       	ldi	r24, 0x05	; 5
 72e:	80 93 32 01 	sts	0x0132, r24
  twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
 732:	43 e0       	ldi	r20, 0x03	; 3
 734:	60 e3       	ldi	r22, 0x30	; 48
 736:	71 e0       	ldi	r23, 0x01	; 1
 738:	82 e2       	ldi	r24, 0x22	; 34
 73a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
 73e:	8f e2       	ldi	r24, 0x2F	; 47
 740:	95 e7       	ldi	r25, 0x75	; 117
 742:	01 97       	sbiw	r24, 0x01	; 1
 744:	f1 f7       	brne	.-4      	; 0x742 <am_pwr_up+0x3e>
 746:	00 c0       	rjmp	.+0      	; 0x748 <am_pwr_up+0x44>
 748:	00 00       	nop
  _delay_ms(120);   
  set_property(GPO_IEN, GPO_IEN_STCIEN);    //Seek/Tune Complete interrupt
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0c 94 3f 03 	jmp	0x67e	; 0x67e <set_property>

00000756 <sw_pwr_up>:
 756:	82 e8       	ldi	r24, 0x82	; 130
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__eerd_word_m128>
 75e:	90 93 58 01 	sts	0x0158, r25
 762:	80 93 57 01 	sts	0x0157, r24
 766:	85 e0       	ldi	r24, 0x05	; 5
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__eerd_byte_m128>
 76e:	80 93 43 01 	sts	0x0143, r24
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	80 93 30 01 	sts	0x0130, r24
 778:	81 e5       	ldi	r24, 0x51	; 81
 77a:	80 93 31 01 	sts	0x0131, r24
 77e:	85 e0       	ldi	r24, 0x05	; 5
 780:	80 93 32 01 	sts	0x0132, r24
 784:	43 e0       	ldi	r20, 0x03	; 3
 786:	60 e3       	ldi	r22, 0x30	; 48
 788:	71 e0       	ldi	r23, 0x01	; 1
 78a:	82 e2       	ldi	r24, 0x22	; 34
 78c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <twi_start_wr>
 790:	8f e2       	ldi	r24, 0x2F	; 47
 792:	95 e7       	ldi	r25, 0x75	; 117
 794:	01 97       	sbiw	r24, 0x01	; 1
 796:	f1 f7       	brne	.-4      	; 0x794 <sw_pwr_up+0x3e>
 798:	00 c0       	rjmp	.+0      	; 0x79a <sw_pwr_up+0x44>
 79a:	00 00       	nop
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	93 e3       	ldi	r25, 0x33	; 51
 7a4:	0e 94 3f 03 	call	0x67e	; 0x67e <set_property>
 7a8:	61 e0       	ldi	r22, 0x01	; 1
 7aa:	71 e0       	ldi	r23, 0x01	; 1
 7ac:	82 e0       	ldi	r24, 0x02	; 2
 7ae:	91 e3       	ldi	r25, 0x31	; 49
 7b0:	0e 94 3f 03 	call	0x67e	; 0x67e <set_property>
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0c 94 3f 03 	jmp	0x67e	; 0x67e <set_property>

000007c0 <main>:
}



int main(void){
	radio_init();
 7c0:	0e 94 c7 00 	call	0x18e	; 0x18e <radio_init>
	//redefine_rssi();
	init_twi();
 7c4:	0e 94 1a 02 	call	0x434	; 0x434 <init_twi>
	uart_init();
 7c8:	0e 94 4d 01 	call	0x29a	; 0x29a <uart_init>
	radio_powerUp();
 7cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <radio_powerUp>
	radio_tune_freq();
 7d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <radio_tune_freq>
	sei();
 7d4:	78 94       	sei
 7d6:	ff cf       	rjmp	.-2      	; 0x7d6 <main+0x16>

000007d8 <__tablejump2__>:
 7d8:	ee 0f       	add	r30, r30
 7da:	ff 1f       	adc	r31, r31

000007dc <__tablejump__>:
 7dc:	05 90       	lpm	r0, Z+
 7de:	f4 91       	lpm	r31, Z
 7e0:	e0 2d       	mov	r30, r0
 7e2:	09 94       	ijmp

000007e4 <__eerd_byte_m128>:
 7e4:	e1 99       	sbic	0x1c, 1	; 28
 7e6:	fe cf       	rjmp	.-4      	; 0x7e4 <__eerd_byte_m128>
 7e8:	9f bb       	out	0x1f, r25	; 31
 7ea:	8e bb       	out	0x1e, r24	; 30
 7ec:	e0 9a       	sbi	0x1c, 0	; 28
 7ee:	99 27       	eor	r25, r25
 7f0:	8d b3       	in	r24, 0x1d	; 29
 7f2:	08 95       	ret

000007f4 <__eerd_word_m128>:
 7f4:	a8 e1       	ldi	r26, 0x18	; 24
 7f6:	b0 e0       	ldi	r27, 0x00	; 0
 7f8:	42 e0       	ldi	r20, 0x02	; 2
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	0c 94 14 04 	jmp	0x828	; 0x828 <__eerd_blraw_m128>

00000800 <__eewr_byte_m128>:
 800:	26 2f       	mov	r18, r22

00000802 <__eewr_r18_m128>:
 802:	e1 99       	sbic	0x1c, 1	; 28
 804:	fe cf       	rjmp	.-4      	; 0x802 <__eewr_r18_m128>
 806:	9f bb       	out	0x1f, r25	; 31
 808:	8e bb       	out	0x1e, r24	; 30
 80a:	2d bb       	out	0x1d, r18	; 29
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	e2 9a       	sbi	0x1c, 2	; 28
 812:	e1 9a       	sbi	0x1c, 1	; 28
 814:	0f be       	out	0x3f, r0	; 63
 816:	01 96       	adiw	r24, 0x01	; 1
 818:	08 95       	ret

0000081a <__eewr_word_m128>:
 81a:	0e 94 00 04 	call	0x800	; 0x800 <__eewr_byte_m128>
 81e:	27 2f       	mov	r18, r23
 820:	0c 94 01 04 	jmp	0x802	; 0x802 <__eewr_r18_m128>

00000824 <__eerd_block_m128>:
 824:	dc 01       	movw	r26, r24
 826:	cb 01       	movw	r24, r22

00000828 <__eerd_blraw_m128>:
 828:	fc 01       	movw	r30, r24
 82a:	e1 99       	sbic	0x1c, 1	; 28
 82c:	fe cf       	rjmp	.-4      	; 0x82a <__eerd_blraw_m128+0x2>
 82e:	06 c0       	rjmp	.+12     	; 0x83c <__eerd_blraw_m128+0x14>
 830:	ff bb       	out	0x1f, r31	; 31
 832:	ee bb       	out	0x1e, r30	; 30
 834:	e0 9a       	sbi	0x1c, 0	; 28
 836:	31 96       	adiw	r30, 0x01	; 1
 838:	0d b2       	in	r0, 0x1d	; 29
 83a:	0d 92       	st	X+, r0
 83c:	41 50       	subi	r20, 0x01	; 1
 83e:	50 40       	sbci	r21, 0x00	; 0
 840:	b8 f7       	brcc	.-18     	; 0x830 <__eerd_blraw_m128+0x8>
 842:	08 95       	ret

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
