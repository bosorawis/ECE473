
test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000020ec  00002180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800110  00800110  00002190  2**0
                  ALLOC
  3 .stab         0000384c  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ee  00000000  00000000  000059dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006bca  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__vector_10>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_12>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_16>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__vector_21>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      70:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      8c:	22 02       	muls	r18, r18
      8e:	2a 02       	muls	r18, r26
      90:	32 02       	muls	r19, r18
      92:	3a 02       	muls	r19, r26
      94:	42 02       	muls	r20, r18
      96:	4b 02       	muls	r20, r27
      98:	54 02       	muls	r21, r20
      9a:	12 02       	muls	r17, r18
      9c:	1a 02       	muls	r17, r26
      9e:	a8 03       	fmulsu	r18, r16
      a0:	a0 03       	fmuls	r18, r16
      a2:	9b 03       	fmulsu	r17, r19
      a4:	c5 03       	fmuls	r20, r21
      a6:	b8 03       	fmulsu	r19, r16
      a8:	c0 03       	fmuls	r20, r16
      aa:	b0 03       	fmuls	r19, r16
      ac:	79 03       	fmul	r23, r17
      ae:	71 03       	mulsu	r23, r17
      b0:	6c 03       	fmul	r22, r20
      b2:	64 03       	mulsu	r22, r20
      b4:	cd 03       	fmulsu	r20, r21
      b6:	81 03       	fmuls	r16, r17
      b8:	57 03       	mulsu	r21, r23
      ba:	3f 03       	fmul	r19, r23
      bc:	ed 03       	fmulsu	r22, r21
      be:	96 03       	fmuls	r17, r22
      c0:	8e 03       	fmulsu	r16, r22
      c2:	86 03       	fmuls	r16, r22
      c4:	0d 04       	cpc	r0, r13
      c6:	47 03       	mulsu	r20, r23
      c8:	fd 03       	fmulsu	r23, r21
      ca:	4f 03       	fmul	r20, r23
      cc:	1a 04       	cpc	r1, r10
      ce:	e5 03       	fmuls	r22, r21
      d0:	05 04       	cpc	r0, r5
      d2:	5f 03       	fmul	r21, r23
      d4:	dd 03       	fmulsu	r21, r21
      d6:	d5 03       	fmuls	r21, r21
      d8:	f5 03       	fmuls	r23, r21
      da:	3a 03       	fmul	r19, r18
      dc:	08 03       	fmul	r16, r16
      de:	00 03       	mulsu	r16, r16
      e0:	10 03       	mulsu	r17, r16
      e2:	12 04       	cpc	r1, r2
      e4:	f3 02       	muls	r31, r19
      e6:	eb 02       	muls	r30, r27
      e8:	15 03       	mulsu	r17, r21
      ea:	ce 02       	muls	r28, r30
      ec:	32 03       	mulsu	r19, r18
      ee:	fb 02       	muls	r31, r27
      f0:	de 02       	muls	r29, r30
      f2:	d6 02       	muls	r29, r22
      f4:	22 03       	mulsu	r18, r18
      f6:	e6 02       	muls	r30, r22
      f8:	1a 03       	fmul	r17, r18
      fa:	c6 02       	muls	r28, r22
      fc:	ac 02       	muls	r26, r28
      fe:	2a 03       	fmul	r18, r18
     100:	9c 02       	muls	r25, r28
     102:	94 02       	muls	r25, r20
     104:	b9 02       	muls	r27, r25
     106:	b1 02       	muls	r27, r17
     108:	be 02       	muls	r27, r30
     10a:	8f 02       	muls	r24, r31
     10c:	a4 02       	muls	r26, r20
     10e:	77 02       	muls	r23, r23
     110:	87 02       	muls	r24, r23
     112:	72 02       	muls	r23, r18
     114:	6a 02       	muls	r22, r26
     116:	62 02       	muls	r22, r18
     118:	5d 02       	muls	r21, r29
     11a:	7f 02       	muls	r23, r31
     11c:	24 05       	cpc	r18, r4
     11e:	42 05       	cpc	r20, r2
     120:	1e 05       	cpc	r17, r14
     122:	30 05       	cpc	r19, r0
     124:	12 05       	cpc	r17, r2
     126:	18 05       	cpc	r17, r8
     128:	12 05       	cpc	r17, r2
     12a:	18 05       	cpc	r17, r8
     12c:	48 05       	cpc	r20, r8
     12e:	24 05       	cpc	r18, r4
     130:	42 05       	cpc	r20, r2
     132:	1e 05       	cpc	r17, r14
     134:	30 05       	cpc	r19, r0
     136:	2a 05       	cpc	r18, r10
     138:	0c 05       	cpc	r16, r12
     13a:	2a 05       	cpc	r18, r10
     13c:	0c 05       	cpc	r16, r12
     13e:	72 05       	cpc	r23, r2
     140:	ae 05       	cpc	r26, r14
     142:	66 05       	cpc	r22, r6
     144:	de 05       	cpc	r29, r14
     146:	66 05       	cpc	r22, r6
     148:	a2 05       	cpc	r26, r2
     14a:	9c 05       	cpc	r25, r12
     14c:	0c 05       	cpc	r16, r12
     14e:	78 05       	cpc	r23, r8
     150:	0c 05       	cpc	r16, r12
     152:	8a 05       	cpc	r24, r10
     154:	36 05       	cpc	r19, r6
     156:	cc 05       	cpc	r28, r12
     158:	12 05       	cpc	r17, r2
     15a:	c0 05       	cpc	r28, r0
     15c:	4e 05       	cpc	r20, r14
     15e:	c6 05       	cpc	r28, r6
     160:	54 05       	cpc	r21, r4
     162:	d2 05       	cpc	r29, r2
     164:	96 05       	cpc	r25, r6
     166:	3c 05       	cpc	r19, r12
     168:	36 05       	cpc	r19, r6
     16a:	7e 05       	cpc	r23, r14
     16c:	5a 05       	cpc	r21, r10
     16e:	24 05       	cpc	r18, r4
     170:	42 05       	cpc	r20, r2
     172:	1e 05       	cpc	r17, r14
     174:	30 05       	cpc	r19, r0
     176:	12 05       	cpc	r17, r2
     178:	18 05       	cpc	r17, r8
     17a:	12 05       	cpc	r17, r2
     17c:	18 05       	cpc	r17, r8
     17e:	48 05       	cpc	r20, r8
     180:	24 05       	cpc	r18, r4
     182:	a8 05       	cpc	r26, r8
     184:	3c 05       	cpc	r19, r12
     186:	1e 05       	cpc	r17, r14
     188:	2a 05       	cpc	r18, r10
     18a:	0c 05       	cpc	r16, r12
     18c:	2a 05       	cpc	r18, r10
     18e:	0c 05       	cpc	r16, r12
     190:	72 05       	cpc	r23, r2
     192:	b4 05       	cpc	r27, r4
     194:	84 05       	cpc	r24, r4
     196:	48 05       	cpc	r20, r8
     198:	ba 05       	cpc	r27, r10
     19a:	78 05       	cpc	r23, r8
     19c:	4e 05       	cpc	r20, r14
     19e:	54 05       	cpc	r21, r4
     1a0:	36 05       	cpc	r19, r6
     1a2:	3c 05       	cpc	r19, r12
     1a4:	d8 05       	cpc	r29, r8
     1a6:	5a 05       	cpc	r21, r10
     1a8:	f6 05       	cpc	r31, r6
     1aa:	1a 06       	cpc	r1, r26
     1ac:	f0 05       	cpc	r31, r0
     1ae:	14 06       	cpc	r1, r20
     1b0:	98 06       	cpc	r9, r24
     1b2:	92 06       	cpc	r9, r18
     1b4:	f0 05       	cpc	r31, r0
     1b6:	1a 06       	cpc	r1, r26
     1b8:	20 06       	cpc	r2, r16
     1ba:	fc 05       	cpc	r31, r12
     1bc:	a4 06       	cpc	r10, r20
     1be:	f0 05       	cpc	r31, r0
     1c0:	f6 05       	cpc	r31, r6
     1c2:	14 06       	cpc	r1, r20
     1c4:	f0 05       	cpc	r31, r0
     1c6:	5c 06       	cpc	r5, r28
     1c8:	f0 05       	cpc	r31, r0
     1ca:	08 06       	cpc	r0, r24
     1cc:	f6 05       	cpc	r31, r6
     1ce:	38 06       	cpc	r3, r24
     1d0:	20 06       	cpc	r2, r16
     1d2:	fc 05       	cpc	r31, r12
     1d4:	32 06       	cpc	r3, r18
     1d6:	b6 06       	cpc	r11, r22
     1d8:	08 06       	cpc	r0, r24
     1da:	26 06       	cpc	r2, r22
     1dc:	c2 06       	cpc	r12, r18
     1de:	74 06       	cpc	r7, r20
     1e0:	26 06       	cpc	r2, r22
     1e2:	8c 06       	cpc	r8, r28
     1e4:	f0 05       	cpc	r31, r0
     1e6:	f6 05       	cpc	r31, r6
     1e8:	14 06       	cpc	r1, r20
     1ea:	f0 05       	cpc	r31, r0
     1ec:	56 06       	cpc	r5, r22
     1ee:	fc 05       	cpc	r31, r12
     1f0:	1a 06       	cpc	r1, r26
     1f2:	f0 05       	cpc	r31, r0
     1f4:	08 06       	cpc	r0, r24
     1f6:	f6 05       	cpc	r31, r6
     1f8:	38 06       	cpc	r3, r24
     1fa:	20 06       	cpc	r2, r16
     1fc:	fc 05       	cpc	r31, r12
     1fe:	b0 06       	cpc	r11, r16
     200:	4a 06       	cpc	r4, r26
     202:	44 06       	cpc	r4, r20
     204:	0e 06       	cpc	r0, r30
     206:	3e 06       	cpc	r3, r30
     208:	2c 06       	cpc	r2, r28
     20a:	0e 06       	cpc	r0, r30
     20c:	80 06       	cpc	r8, r16
     20e:	86 06       	cpc	r8, r22
     210:	7a 06       	cpc	r7, r26
     212:	4a 06       	cpc	r4, r26
     214:	44 06       	cpc	r4, r20
     216:	0e 06       	cpc	r0, r30
     218:	3e 06       	cpc	r3, r30
     21a:	2c 06       	cpc	r2, r28
     21c:	9e 06       	cpc	r9, r30
     21e:	aa 06       	cpc	r10, r26
     220:	32 06       	cpc	r3, r18
     222:	62 06       	cpc	r6, r18
     224:	68 06       	cpc	r6, r24
     226:	72 0b       	sbc	r23, r18
     228:	66 0b       	sbc	r22, r22
     22a:	60 0b       	sbc	r22, r16
     22c:	54 0b       	sbc	r21, r20
     22e:	4e 0b       	sbc	r20, r30
     230:	42 0b       	sbc	r20, r18
     232:	3c 0b       	sbc	r19, r28
     234:	36 0b       	sbc	r19, r22
     236:	30 0b       	sbc	r19, r16
     238:	2a 0b       	sbc	r18, r26
     23a:	1e 0b       	sbc	r17, r30
     23c:	18 0b       	sbc	r17, r24
     23e:	12 0b       	sbc	r17, r18
     240:	06 0b       	sbc	r16, r22
     242:	00 0b       	sbc	r16, r16
     244:	f4 0a       	sbc	r15, r20
     246:	ee 0a       	sbc	r14, r30
     248:	e2 0a       	sbc	r14, r18
     24a:	dc 0a       	sbc	r13, r28
     24c:	d0 0a       	sbc	r13, r16
     24e:	ca 0a       	sbc	r12, r26
     250:	c4 0a       	sbc	r12, r20
     252:	be 0a       	sbc	r11, r30
     254:	b8 0a       	sbc	r11, r24
     256:	ac 0a       	sbc	r10, r28
     258:	a6 0a       	sbc	r10, r22
     25a:	a0 0a       	sbc	r10, r16
     25c:	9a 0a       	sbc	r9, r26
     25e:	94 0a       	sbc	r9, r20
     260:	88 0a       	sbc	r8, r24
     262:	82 0a       	sbc	r8, r18
     264:	76 0a       	sbc	r7, r22
     266:	70 0a       	sbc	r7, r16
     268:	6a 0a       	sbc	r6, r26
     26a:	64 0a       	sbc	r6, r20
     26c:	58 0a       	sbc	r5, r24
     26e:	52 0a       	sbc	r5, r18
     270:	46 0a       	sbc	r4, r22
     272:	40 0a       	sbc	r4, r16
     274:	34 0a       	sbc	r3, r20
     276:	2e 0a       	sbc	r2, r30
     278:	22 0a       	sbc	r2, r18
     27a:	1c 0a       	sbc	r1, r28
     27c:	10 0a       	sbc	r1, r16
     27e:	0a 0a       	sbc	r0, r26
     280:	fe 09       	sbc	r31, r14
     282:	f8 09       	sbc	r31, r8
     284:	f2 09       	sbc	r31, r2
     286:	ec 09       	sbc	r30, r12
     288:	e6 09       	sbc	r30, r6
     28a:	da 09       	sbc	r29, r10
     28c:	d4 09       	sbc	r29, r4
     28e:	ce 09       	sbc	r28, r14
     290:	c8 09       	sbc	r28, r8
     292:	c2 09       	sbc	r28, r2
     294:	b6 09       	sbc	r27, r6
     296:	b0 09       	sbc	r27, r0
     298:	a4 09       	sbc	r26, r4
     29a:	9e 09       	sbc	r25, r14
     29c:	98 09       	sbc	r25, r8
     29e:	92 09       	sbc	r25, r2
     2a0:	86 09       	sbc	r24, r6
     2a2:	80 09       	sbc	r24, r0
     2a4:	7a 09       	sbc	r23, r10
     2a6:	74 09       	sbc	r23, r4
     2a8:	6e 09       	sbc	r22, r14
     2aa:	62 09       	sbc	r22, r2
     2ac:	5c 09       	sbc	r21, r12
     2ae:	50 09       	sbc	r21, r0
     2b0:	4a 09       	sbc	r20, r10
     2b2:	44 09       	sbc	r20, r4
     2b4:	3e 09       	sbc	r19, r14
     2b6:	32 09       	sbc	r19, r2
     2b8:	2c 09       	sbc	r18, r12
     2ba:	26 09       	sbc	r18, r6
     2bc:	20 09       	sbc	r18, r0
     2be:	14 09       	sbc	r17, r4
     2c0:	0e 09       	sbc	r16, r14
     2c2:	08 09       	sbc	r16, r8
     2c4:	02 09       	sbc	r16, r2
     2c6:	fc 08       	sbc	r15, r12
     2c8:	f0 08       	sbc	r15, r0
     2ca:	ea 08       	sbc	r14, r10
     2cc:	de 08       	sbc	r13, r14
     2ce:	d8 08       	sbc	r13, r8
     2d0:	cc 08       	sbc	r12, r12
     2d2:	c6 08       	sbc	r12, r6
     2d4:	ba 08       	sbc	r11, r10
     2d6:	b4 08       	sbc	r11, r4
     2d8:	a8 08       	sbc	r10, r8
     2da:	a2 08       	sbc	r10, r2
     2dc:	9c 08       	sbc	r9, r12
     2de:	96 08       	sbc	r9, r6
     2e0:	90 08       	sbc	r9, r0
     2e2:	84 08       	sbc	r8, r4
     2e4:	7e 08       	sbc	r7, r14
     2e6:	72 08       	sbc	r7, r2
     2e8:	6c 08       	sbc	r6, r12
     2ea:	66 08       	sbc	r6, r6
     2ec:	60 08       	sbc	r6, r0
     2ee:	54 08       	sbc	r5, r4
     2f0:	4e 08       	sbc	r4, r14
     2f2:	48 08       	sbc	r4, r8
     2f4:	42 08       	sbc	r4, r2
     2f6:	36 08       	sbc	r3, r6
     2f8:	30 08       	sbc	r3, r0
     2fa:	24 08       	sbc	r2, r4
     2fc:	1e 08       	sbc	r1, r14
     2fe:	12 08       	sbc	r1, r2
     300:	0c 08       	sbc	r0, r12
     302:	00 08       	sbc	r0, r0
     304:	fa 07       	cpc	r31, r26
     306:	ee 07       	cpc	r30, r30
     308:	e8 07       	cpc	r30, r24
     30a:	dc 07       	cpc	r29, r28
     30c:	d6 07       	cpc	r29, r22
     30e:	ca 07       	cpc	r28, r26
     310:	c4 07       	cpc	r28, r20
     312:	be 07       	cpc	r27, r30
     314:	b8 07       	cpc	r27, r24
     316:	b2 07       	cpc	r27, r18
     318:	a6 07       	cpc	r26, r22
     31a:	a0 07       	cpc	r26, r16
     31c:	9a 07       	cpc	r25, r26
     31e:	8e 07       	cpc	r24, r30
     320:	88 07       	cpc	r24, r24
     322:	7c 07       	cpc	r23, r28
     324:	76 07       	cpc	r23, r22
     326:	6a 07       	cpc	r22, r26
     328:	64 07       	cpc	r22, r20
     32a:	58 07       	cpc	r21, r24
     32c:	52 07       	cpc	r21, r18
     32e:	4c 07       	cpc	r20, r28
     330:	46 07       	cpc	r20, r22
     332:	3a 07       	cpc	r19, r26
     334:	34 07       	cpc	r19, r20
     336:	28 07       	cpc	r18, r24
     338:	22 07       	cpc	r18, r18
     33a:	16 07       	cpc	r17, r22
     33c:	10 07       	cpc	r17, r16
     33e:	04 07       	cpc	r16, r20
     340:	fe 06       	cpc	r15, r30
     342:	f8 06       	cpc	r15, r24
     344:	f2 06       	cpc	r15, r18
     346:	ec 06       	cpc	r14, r28
     348:	e0 06       	cpc	r14, r16
     34a:	da 06       	cpc	r13, r26
     34c:	d4 06       	cpc	r13, r20
     34e:	78 0b       	sbc	r23, r24
     350:	a2 0b       	sbc	r26, r18
     352:	90 0b       	sbc	r25, r16
     354:	a2 0b       	sbc	r26, r18
     356:	90 0b       	sbc	r25, r16
     358:	a2 0b       	sbc	r26, r18
     35a:	90 0b       	sbc	r25, r16
     35c:	c6 0b       	sbc	r28, r22
     35e:	90 0b       	sbc	r25, r16
     360:	c6 0b       	sbc	r28, r22
     362:	ae 0b       	sbc	r26, r30
     364:	9c 0b       	sbc	r25, r28
     366:	de 0b       	sbc	r29, r30
     368:	9c 0b       	sbc	r25, r28
     36a:	cc 0b       	sbc	r28, r28
     36c:	ba 0b       	sbc	r27, r26
     36e:	a8 0b       	sbc	r26, r24
     370:	90 0b       	sbc	r25, r16
     372:	a8 0b       	sbc	r26, r24
     374:	90 0b       	sbc	r25, r16
     376:	a8 0b       	sbc	r26, r24
     378:	90 0b       	sbc	r25, r16
     37a:	c0 0b       	sbc	r28, r16
     37c:	90 0b       	sbc	r25, r16
     37e:	c0 0b       	sbc	r28, r16
     380:	ae 0b       	sbc	r26, r30
     382:	d2 0b       	sbc	r29, r18
     384:	d8 0b       	sbc	r29, r24
     386:	90 0b       	sbc	r25, r16
     388:	9c 0b       	sbc	r25, r28
     38a:	e4 0b       	sbc	r30, r20
     38c:	ba 0b       	sbc	r27, r26

0000038e <__ctors_end>:
     38e:	11 24       	eor	r1, r1
     390:	1f be       	out	0x3f, r1	; 63
     392:	cf ef       	ldi	r28, 0xFF	; 255
     394:	d0 e1       	ldi	r29, 0x10	; 16
     396:	de bf       	out	0x3e, r29	; 62
     398:	cd bf       	out	0x3d, r28	; 61

0000039a <__do_copy_data>:
     39a:	11 e0       	ldi	r17, 0x01	; 1
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b1 e0       	ldi	r27, 0x01	; 1
     3a0:	ec ee       	ldi	r30, 0xEC	; 236
     3a2:	f0 e2       	ldi	r31, 0x20	; 32
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	0b bf       	out	0x3b, r16	; 59
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__do_copy_data+0x14>
     3aa:	07 90       	elpm	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	a0 31       	cpi	r26, 0x10	; 16
     3b0:	b1 07       	cpc	r27, r17
     3b2:	d9 f7       	brne	.-10     	; 0x3aa <__do_copy_data+0x10>

000003b4 <__do_clear_bss>:
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	a0 e1       	ldi	r26, 0x10	; 16
     3b8:	b1 e0       	ldi	r27, 0x01	; 1
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	af 33       	cpi	r26, 0x3F	; 63
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 3e 10 	call	0x207c	; 0x207c <main>
     3c8:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     3d0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     3d2:	10 92 38 01 	sts	0x0138, r1
     3d6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	90 93 36 01 	sts	0x0136, r25
     3e0:	80 93 35 01 	sts	0x0135, r24
     3e4:	08 95       	ret

000003e6 <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     3e6:	cf 93       	push	r28
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     3e8:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     3ea:	10 92 38 01 	sts	0x0138, r1
     3ee:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;  //set the max beat
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	30 93 36 01 	sts	0x0136, r19
     3f8:	20 93 35 01 	sts	0x0135, r18
  switch (octave) {
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	49 30       	cpi	r20, 0x09	; 9
     400:	51 05       	cpc	r21, r1
     402:	20 f0       	brcs	.+8      	; 0x40c <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     404:	1b bc       	out	0x2b, r1	; 43
     406:	1a bc       	out	0x2a, r1	; 42
  }
}
     408:	cf 91       	pop	r28
     40a:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     40c:	4a 5b       	subi	r20, 0xBA	; 186
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	fa 01       	movw	r30, r20
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     412:	99 27       	eor	r25, r25
     414:	87 fd       	sbrc	r24, 7
     416:	90 95       	com	r25
     418:	a9 2f       	mov	r26, r25
     41a:	b9 2f       	mov	r27, r25
     41c:	81 54       	subi	r24, 0x41	; 65
     41e:	91 09       	sbc	r25, r1
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     420:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     424:	87 30       	cpi	r24, 0x07	; 7
     426:	91 05       	cpc	r25, r1
     428:	78 f7       	brcc	.-34     	; 0x408 <play_note+0x22>
     42a:	81 5b       	subi	r24, 0xB1	; 177
     42c:	9f 4f       	sbci	r25, 0xFF	; 255
     42e:	fc 01       	movw	r30, r24
     430:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     434:	87 30       	cpi	r24, 0x07	; 7
     436:	91 05       	cpc	r25, r1
     438:	38 f7       	brcc	.-50     	; 0x408 <play_note+0x22>
     43a:	8a 5a       	subi	r24, 0xAA	; 170
     43c:	9f 4f       	sbci	r25, 0xFF	; 255
     43e:	fc 01       	movw	r30, r24
     440:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     444:	87 30       	cpi	r24, 0x07	; 7
     446:	91 05       	cpc	r25, r1
     448:	f8 f6       	brcc	.-66     	; 0x408 <play_note+0x22>
     44a:	83 5a       	subi	r24, 0xA3	; 163
     44c:	9f 4f       	sbci	r25, 0xFF	; 255
     44e:	fc 01       	movw	r30, r24
     450:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     454:	87 30       	cpi	r24, 0x07	; 7
     456:	91 05       	cpc	r25, r1
     458:	b8 f6       	brcc	.-82     	; 0x408 <play_note+0x22>
     45a:	8c 59       	subi	r24, 0x9C	; 156
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	fc 01       	movw	r30, r24
     460:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     464:	87 30       	cpi	r24, 0x07	; 7
     466:	91 05       	cpc	r25, r1
     468:	78 f6       	brcc	.-98     	; 0x408 <play_note+0x22>
     46a:	85 59       	subi	r24, 0x95	; 149
     46c:	9f 4f       	sbci	r25, 0xFF	; 255
     46e:	fc 01       	movw	r30, r24
     470:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     474:	87 30       	cpi	r24, 0x07	; 7
     476:	91 05       	cpc	r25, r1
     478:	38 f6       	brcc	.-114    	; 0x408 <play_note+0x22>
     47a:	8e 58       	subi	r24, 0x8E	; 142
     47c:	9f 4f       	sbci	r25, 0xFF	; 255
     47e:	fc 01       	movw	r30, r24
     480:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     484:	87 30       	cpi	r24, 0x07	; 7
     486:	91 05       	cpc	r25, r1
     488:	08 f0       	brcs	.+2      	; 0x48c <play_note+0xa6>
     48a:	be cf       	rjmp	.-132    	; 0x408 <play_note+0x22>
     48c:	87 58       	subi	r24, 0x87	; 135
     48e:	9f 4f       	sbci	r25, 0xFF	; 255
     490:	fc 01       	movw	r30, r24
     492:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     496:	87 30       	cpi	r24, 0x07	; 7
     498:	91 05       	cpc	r25, r1
     49a:	08 f0       	brcs	.+2      	; 0x49e <play_note+0xb8>
     49c:	b5 cf       	rjmp	.-150    	; 0x408 <play_note+0x22>
     49e:	80 58       	subi	r24, 0x80	; 128
     4a0:	9f 4f       	sbci	r25, 0xFF	; 255
     4a2:	fc 01       	movw	r30, r24
     4a4:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     4a8:	87 30       	cpi	r24, 0x07	; 7
     4aa:	91 05       	cpc	r25, r1
     4ac:	08 f0       	brcs	.+2      	; 0x4b0 <play_note+0xca>
     4ae:	ac cf       	rjmp	.-168    	; 0x408 <play_note+0x22>
     4b0:	89 57       	subi	r24, 0x79	; 121
     4b2:	9f 4f       	sbci	r25, 0xFF	; 255
     4b4:	fc 01       	movw	r30, r24
     4b6:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     4ba:	88 e5       	ldi	r24, 0x58	; 88
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9b bd       	out	0x2b, r25	; 43
     4c0:	8a bd       	out	0x2a, r24	; 42
	break;
     4c2:	a2 cf       	rjmp	.-188    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     4c4:	66 23       	and	r22, r22
     4c6:	09 f4       	brne	.+2      	; 0x4ca <play_note+0xe4>
     4c8:	0f c2       	rjmp	.+1054   	; 0x8e8 <play_note+0x502>
     4ca:	83 e6       	ldi	r24, 0x63	; 99
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	9b bd       	out	0x2b, r25	; 43
     4d0:	8a bd       	out	0x2a, r24	; 42
     4d2:	9a cf       	rjmp	.-204    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     4d4:	66 23       	and	r22, r22
     4d6:	09 f4       	brne	.+2      	; 0x4da <play_note+0xf4>
     4d8:	11 c2       	rjmp	.+1058   	; 0x8fc <play_note+0x516>
     4da:	8f e6       	ldi	r24, 0x6F	; 111
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	9b bd       	out	0x2b, r25	; 43
     4e0:	8a bd       	out	0x2a, r24	; 42
     4e2:	92 cf       	rjmp	.-220    	; 0x408 <play_note+0x22>
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     4e4:	86 e7       	ldi	r24, 0x76	; 118
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	9b bd       	out	0x2b, r25	; 43
     4ea:	8a bd       	out	0x2a, r24	; 42
	break;
     4ec:	8d cf       	rjmp	.-230    	; 0x408 <play_note+0x22>
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     4ee:	66 23       	and	r22, r22
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <play_note+0x10e>
     4f2:	ff c1       	rjmp	.+1022   	; 0x8f2 <play_note+0x50c>
     4f4:	8a e4       	ldi	r24, 0x4A	; 74
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	9b bd       	out	0x2b, r25	; 43
     4fa:	8a bd       	out	0x2a, r24	; 42
     4fc:	85 cf       	rjmp	.-246    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     4fe:	66 23       	and	r22, r22
     500:	09 f4       	brne	.+2      	; 0x504 <play_note+0x11e>
     502:	01 c2       	rjmp	.+1026   	; 0x906 <play_note+0x520>
     504:	83 e5       	ldi	r24, 0x53	; 83
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9b bd       	out	0x2b, r25	; 43
     50a:	8a bd       	out	0x2a, r24	; 42
     50c:	7d cf       	rjmp	.-262    	; 0x408 <play_note+0x22>
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     50e:	66 23       	and	r22, r22
     510:	09 f4       	brne	.+2      	; 0x514 <play_note+0x12e>
     512:	b8 c1       	rjmp	.+880    	; 0x884 <play_note+0x49e>
     514:	82 e4       	ldi	r24, 0x42	; 66
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	9b bd       	out	0x2b, r25	; 43
     51a:	8a bd       	out	0x2a, r24	; 42
     51c:	75 cf       	rjmp	.-278    	; 0x408 <play_note+0x22>
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     51e:	81 eb       	ldi	r24, 0xB1	; 177
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	9b bd       	out	0x2b, r25	; 43
     524:	8a bd       	out	0x2a, r24	; 42
	break;
     526:	70 cf       	rjmp	.-288    	; 0x408 <play_note+0x22>
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     528:	66 23       	and	r22, r22
     52a:	09 f4       	brne	.+2      	; 0x52e <play_note+0x148>
     52c:	d3 c1       	rjmp	.+934    	; 0x8d4 <play_note+0x4ee>
     52e:	85 e8       	ldi	r24, 0x85	; 133
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9b bd       	out	0x2b, r25	; 43
     534:	8a bd       	out	0x2a, r24	; 42
     536:	68 cf       	rjmp	.-304    	; 0x408 <play_note+0x22>
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     538:	66 23       	and	r22, r22
     53a:	09 f4       	brne	.+2      	; 0x53e <play_note+0x158>
     53c:	c1 c1       	rjmp	.+898    	; 0x8c0 <play_note+0x4da>
     53e:	85 e9       	ldi	r24, 0x95	; 149
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	9b bd       	out	0x2b, r25	; 43
     544:	8a bd       	out	0x2a, r24	; 42
     546:	60 cf       	rjmp	.-320    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     548:	66 23       	and	r22, r22
     54a:	09 f4       	brne	.+2      	; 0x54e <play_note+0x168>
     54c:	be c1       	rjmp	.+892    	; 0x8ca <play_note+0x4e4>
     54e:	87 ea       	ldi	r24, 0xA7	; 167
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	9b bd       	out	0x2b, r25	; 43
     554:	8a bd       	out	0x2a, r24	; 42
     556:	58 cf       	rjmp	.-336    	; 0x408 <play_note+0x22>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     558:	84 e6       	ldi	r24, 0x64	; 100
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9b bd       	out	0x2b, r25	; 43
     55e:	8a bd       	out	0x2a, r24	; 42
	break;
     560:	53 cf       	rjmp	.-346    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     562:	66 23       	and	r22, r22
     564:	09 f4       	brne	.+2      	; 0x568 <play_note+0x182>
     566:	bb c1       	rjmp	.+886    	; 0x8de <play_note+0x4f8>
     568:	80 ee       	ldi	r24, 0xE0	; 224
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9b bd       	out	0x2b, r25	; 43
     56e:	8a bd       	out	0x2a, r24	; 42
     570:	4b cf       	rjmp	.-362    	; 0x408 <play_note+0x22>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     572:	8d ee       	ldi	r24, 0xED	; 237
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9b bd       	out	0x2b, r25	; 43
     578:	8a bd       	out	0x2a, r24	; 42
	break;
     57a:	46 cf       	rjmp	.-372    	; 0x408 <play_note+0x22>
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     57c:	66 23       	and	r22, r22
     57e:	09 f4       	brne	.+2      	; 0x582 <play_note+0x19c>
     580:	8b c1       	rjmp	.+790    	; 0x898 <play_note+0x4b2>
     582:	87 ec       	ldi	r24, 0xC7	; 199
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9b bd       	out	0x2b, r25	; 43
     588:	8a bd       	out	0x2a, r24	; 42
     58a:	3e cf       	rjmp	.-388    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     58c:	66 23       	and	r22, r22
     58e:	09 f4       	brne	.+2      	; 0x592 <play_note+0x1ac>
     590:	74 c1       	rjmp	.+744    	; 0x87a <play_note+0x494>
     592:	80 e9       	ldi	r24, 0x90	; 144
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	9b bd       	out	0x2b, r25	; 43
     598:	8a bd       	out	0x2a, r24	; 42
     59a:	36 cf       	rjmp	.-404    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     59c:	66 23       	and	r22, r22
     59e:	09 f4       	brne	.+2      	; 0x5a2 <play_note+0x1bc>
     5a0:	cb c1       	rjmp	.+918    	; 0x938 <play_note+0x552>
     5a2:	84 e8       	ldi	r24, 0x84	; 132
     5a4:	93 e0       	ldi	r25, 0x03	; 3
     5a6:	9b bd       	out	0x2b, r25	; 43
     5a8:	8a bd       	out	0x2a, r24	; 42
     5aa:	2e cf       	rjmp	.-420    	; 0x408 <play_note+0x22>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     5ac:	66 23       	and	r22, r22
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <play_note+0x1cc>
     5b0:	af c1       	rjmp	.+862    	; 0x910 <play_note+0x52a>
     5b2:	8b e2       	ldi	r24, 0x2B	; 43
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9b bd       	out	0x2b, r25	; 43
     5b8:	8a bd       	out	0x2a, r24	; 42
     5ba:	26 cf       	rjmp	.-436    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     5bc:	66 23       	and	r22, r22
     5be:	09 f4       	brne	.+2      	; 0x5c2 <play_note+0x1dc>
     5c0:	b1 c1       	rjmp	.+866    	; 0x924 <play_note+0x53e>
     5c2:	82 ea       	ldi	r24, 0xA2	; 162
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	9b bd       	out	0x2b, r25	; 43
     5c8:	8a bd       	out	0x2a, r24	; 42
     5ca:	1e cf       	rjmp	.-452    	; 0x408 <play_note+0x22>
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     5cc:	8c ed       	ldi	r24, 0xDC	; 220
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	9b bd       	out	0x2b, r25	; 43
     5d2:	8a bd       	out	0x2a, r24	; 42
	break;
     5d4:	19 cf       	rjmp	.-462    	; 0x408 <play_note+0x22>
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     5d6:	66 23       	and	r22, r22
     5d8:	09 f4       	brne	.+2      	; 0x5dc <play_note+0x1f6>
     5da:	59 c1       	rjmp	.+690    	; 0x88e <play_note+0x4a8>
     5dc:	87 e1       	ldi	r24, 0x17	; 23
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	9b bd       	out	0x2b, r25	; 43
     5e2:	8a bd       	out	0x2a, r24	; 42
     5e4:	11 cf       	rjmp	.-478    	; 0x408 <play_note+0x22>
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     5e6:	66 23       	and	r22, r22
     5e8:	09 f4       	brne	.+2      	; 0x5ec <play_note+0x206>
     5ea:	b0 c1       	rjmp	.+864    	; 0x94c <play_note+0x566>
     5ec:	88 e5       	ldi	r24, 0x58	; 88
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	9b bd       	out	0x2b, r25	; 43
     5f2:	8a bd       	out	0x2a, r24	; 42
     5f4:	09 cf       	rjmp	.-494    	; 0x408 <play_note+0x22>
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     5f6:	8a ec       	ldi	r24, 0xCA	; 202
     5f8:	92 e0       	ldi	r25, 0x02	; 2
     5fa:	9b bd       	out	0x2b, r25	; 43
     5fc:	8a bd       	out	0x2a, r24	; 42
	break;
     5fe:	04 cf       	rjmp	.-504    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     600:	66 23       	and	r22, r22
     602:	09 f4       	brne	.+2      	; 0x606 <play_note+0x220>
     604:	35 c1       	rjmp	.+618    	; 0x870 <play_note+0x48a>
     606:	86 e4       	ldi	r24, 0x46	; 70
     608:	96 e0       	ldi	r25, 0x06	; 6
     60a:	9b bd       	out	0x2b, r25	; 43
     60c:	8a bd       	out	0x2a, r24	; 42
     60e:	fc ce       	rjmp	.-520    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     610:	66 23       	and	r22, r22
     612:	09 f4       	brne	.+2      	; 0x616 <play_note+0x230>
     614:	82 c1       	rjmp	.+772    	; 0x91a <play_note+0x534>
     616:	8a e0       	ldi	r24, 0x0A	; 10
     618:	97 e0       	ldi	r25, 0x07	; 7
     61a:	9b bd       	out	0x2b, r25	; 43
     61c:	8a bd       	out	0x2a, r24	; 42
     61e:	f4 ce       	rjmp	.-536    	; 0x408 <play_note+0x22>
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     620:	86 e9       	ldi	r24, 0x96	; 150
     622:	95 e0       	ldi	r25, 0x05	; 5
     624:	9b bd       	out	0x2b, r25	; 43
     626:	8a bd       	out	0x2a, r24	; 42
	break;
     628:	ef ce       	rjmp	.-546    	; 0x408 <play_note+0x22>
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     62a:	8a eb       	ldi	r24, 0xBA	; 186
     62c:	93 e0       	ldi	r25, 0x03	; 3
     62e:	9b bd       	out	0x2b, r25	; 43
     630:	8a bd       	out	0x2a, r24	; 42
	break;
     632:	ea ce       	rjmp	.-556    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     634:	66 23       	and	r22, r22
     636:	09 f4       	brne	.+2      	; 0x63a <play_note+0x254>
     638:	7a c1       	rjmp	.+756    	; 0x92e <play_note+0x548>
     63a:	81 ec       	ldi	r24, 0xC1	; 193
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	9b bd       	out	0x2b, r25	; 43
     640:	8a bd       	out	0x2a, r24	; 42
     642:	e2 ce       	rjmp	.-572    	; 0x408 <play_note+0x22>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     644:	66 23       	and	r22, r22
     646:	09 f4       	brne	.+2      	; 0x64a <play_note+0x264>
     648:	7c c1       	rjmp	.+760    	; 0x942 <play_note+0x55c>
     64a:	8b e0       	ldi	r24, 0x0B	; 11
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	9b bd       	out	0x2b, r25	; 43
     650:	8a bd       	out	0x2a, r24	; 42
     652:	da ce       	rjmp	.-588    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     654:	66 23       	and	r22, r22
     656:	09 f4       	brne	.+2      	; 0x65a <play_note+0x274>
     658:	7e c1       	rjmp	.+764    	; 0x956 <play_note+0x570>
     65a:	80 e5       	ldi	r24, 0x50	; 80
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9b bd       	out	0x2b, r25	; 43
     660:	8a bd       	out	0x2a, r24	; 42
     662:	d2 ce       	rjmp	.-604    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     664:	66 23       	and	r22, r22
     666:	09 f4       	brne	.+2      	; 0x66a <play_note+0x284>
     668:	ad c1       	rjmp	.+858    	; 0x9c4 <play_note+0x5de>
     66a:	82 e2       	ldi	r24, 0x22	; 34
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	9b bd       	out	0x2b, r25	; 43
     670:	8a bd       	out	0x2a, r24	; 42
     672:	ca ce       	rjmp	.-620    	; 0x408 <play_note+0x22>
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     674:	86 e7       	ldi	r24, 0x76	; 118
     676:	97 e0       	ldi	r25, 0x07	; 7
     678:	9b bd       	out	0x2b, r25	; 43
     67a:	8a bd       	out	0x2a, r24	; 42
	break;
     67c:	c5 ce       	rjmp	.-630    	; 0x408 <play_note+0x22>
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     67e:	66 23       	and	r22, r22
     680:	09 f4       	brne	.+2      	; 0x684 <play_note+0x29e>
     682:	0f c1       	rjmp	.+542    	; 0x8a2 <play_note+0x4bc>
     684:	8e ec       	ldi	r24, 0xCE	; 206
     686:	92 e1       	ldi	r25, 0x12	; 18
     688:	9b bd       	out	0x2b, r25	; 43
     68a:	8a bd       	out	0x2a, r24	; 42
     68c:	bd ce       	rjmp	.-646    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     68e:	66 23       	and	r22, r22
     690:	09 f4       	brne	.+2      	; 0x694 <play_note+0x2ae>
     692:	7a c1       	rjmp	.+756    	; 0x988 <play_note+0x5a2>
     694:	8d e1       	ldi	r24, 0x1D	; 29
     696:	95 e1       	ldi	r25, 0x15	; 21
     698:	9b bd       	out	0x2b, r25	; 43
     69a:	8a bd       	out	0x2a, r24	; 42
     69c:	b5 ce       	rjmp	.-662    	; 0x408 <play_note+0x22>
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     69e:	66 23       	and	r22, r22
     6a0:	09 f4       	brne	.+2      	; 0x6a4 <play_note+0x2be>
     6a2:	dc c0       	rjmp	.+440    	; 0x85c <play_note+0x476>
     6a4:	80 e6       	ldi	r24, 0x60	; 96
     6a6:	98 e0       	ldi	r25, 0x08	; 8
     6a8:	9b bd       	out	0x2b, r25	; 43
     6aa:	8a bd       	out	0x2a, r24	; 42
     6ac:	ad ce       	rjmp	.-678    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     6ae:	66 23       	and	r22, r22
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <play_note+0x2ce>
     6b2:	92 c1       	rjmp	.+804    	; 0x9d8 <play_note+0x5f2>
     6b4:	80 e1       	ldi	r24, 0x10	; 16
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	9b bd       	out	0x2b, r25	; 43
     6ba:	8a bd       	out	0x2a, r24	; 42
     6bc:	a5 ce       	rjmp	.-694    	; 0x408 <play_note+0x22>
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     6be:	8e e2       	ldi	r24, 0x2E	; 46
     6c0:	9b e0       	ldi	r25, 0x0B	; 11
     6c2:	9b bd       	out	0x2b, r25	; 43
     6c4:	8a bd       	out	0x2a, r24	; 42
	break;
     6c6:	a0 ce       	rjmp	.-704    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     6c8:	66 23       	and	r22, r22
     6ca:	09 f4       	brne	.+2      	; 0x6ce <play_note+0x2e8>
     6cc:	49 c1       	rjmp	.+658    	; 0x960 <play_note+0x57a>
     6ce:	8b e1       	ldi	r24, 0x1B	; 27
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	9b bd       	out	0x2b, r25	; 43
     6d4:	8a bd       	out	0x2a, r24	; 42
     6d6:	98 ce       	rjmp	.-720    	; 0x408 <play_note+0x22>
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     6d8:	8c e1       	ldi	r24, 0x1C	; 28
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	9b bd       	out	0x2b, r25	; 43
     6de:	8a bd       	out	0x2a, r24	; 42
	break;
     6e0:	93 ce       	rjmp	.-730    	; 0x408 <play_note+0x22>
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     6e2:	66 23       	and	r22, r22
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <play_note+0x302>
     6e6:	41 c1       	rjmp	.+642    	; 0x96a <play_note+0x584>
     6e8:	87 e0       	ldi	r24, 0x07	; 7
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	9b bd       	out	0x2b, r25	; 43
     6ee:	8a bd       	out	0x2a, r24	; 42
     6f0:	8b ce       	rjmp	.-746    	; 0x408 <play_note+0x22>
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     6f2:	66 23       	and	r22, r22
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <play_note+0x312>
     6f6:	da c0       	rjmp	.+436    	; 0x8ac <play_note+0x4c6>
     6f8:	8b e0       	ldi	r24, 0x0B	; 11
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9b bd       	out	0x2b, r25	; 43
     6fe:	8a bd       	out	0x2a, r24	; 42
     700:	83 ce       	rjmp	.-762    	; 0x408 <play_note+0x22>
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     702:	82 e1       	ldi	r24, 0x12	; 18
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9b bd       	out	0x2b, r25	; 43
     708:	8a bd       	out	0x2a, r24	; 42
	break;
     70a:	7e ce       	rjmp	.-772    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     70c:	66 23       	and	r22, r22
     70e:	09 f4       	brne	.+2      	; 0x712 <play_note+0x32c>
     710:	9b c0       	rjmp	.+310    	; 0x848 <play_note+0x462>
     712:	89 e1       	ldi	r24, 0x19	; 25
     714:	99 e1       	ldi	r25, 0x19	; 25
     716:	9b bd       	out	0x2b, r25	; 43
     718:	8a bd       	out	0x2a, r24	; 42
     71a:	76 ce       	rjmp	.-788    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     71c:	66 23       	and	r22, r22
     71e:	09 f4       	brne	.+2      	; 0x722 <play_note+0x33c>
     720:	29 c1       	rjmp	.+594    	; 0x974 <play_note+0x58e>
     722:	80 e3       	ldi	r24, 0x30	; 48
     724:	9c e1       	ldi	r25, 0x1C	; 28
     726:	9b bd       	out	0x2b, r25	; 43
     728:	8a bd       	out	0x2a, r24	; 42
     72a:	6e ce       	rjmp	.-804    	; 0x408 <play_note+0x22>
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     72c:	8c ed       	ldi	r24, 0xDC	; 220
     72e:	9d e1       	ldi	r25, 0x1D	; 29
     730:	9b bd       	out	0x2b, r25	; 43
     732:	8a bd       	out	0x2a, r24	; 42
	break;
     734:	69 ce       	rjmp	.-814    	; 0x408 <play_note+0x22>
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     736:	8a e3       	ldi	r24, 0x3A	; 58
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	9b bd       	out	0x2b, r25	; 43
     73c:	8a bd       	out	0x2a, r24	; 42
	break;
     73e:	64 ce       	rjmp	.-824    	; 0x408 <play_note+0x22>
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     740:	66 23       	and	r22, r22
     742:	09 f4       	brne	.+2      	; 0x746 <play_note+0x360>
     744:	35 c1       	rjmp	.+618    	; 0x9b0 <play_note+0x5ca>
     746:	80 e2       	ldi	r24, 0x20	; 32
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	9b bd       	out	0x2b, r25	; 43
     74c:	8a bd       	out	0x2a, r24	; 42
     74e:	5c ce       	rjmp	.-840    	; 0x408 <play_note+0x22>
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     750:	66 23       	and	r22, r22
     752:	09 f4       	brne	.+2      	; 0x756 <play_note+0x370>
     754:	32 c1       	rjmp	.+612    	; 0x9ba <play_note+0x5d4>
     756:	84 e2       	ldi	r24, 0x24	; 36
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	9b bd       	out	0x2b, r25	; 43
     75c:	8a bd       	out	0x2a, r24	; 42
     75e:	54 ce       	rjmp	.-856    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     760:	66 23       	and	r22, r22
     762:	09 f4       	brne	.+2      	; 0x766 <play_note+0x380>
     764:	76 c0       	rjmp	.+236    	; 0x852 <play_note+0x46c>
     766:	89 e2       	ldi	r24, 0x29	; 41
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	9b bd       	out	0x2b, r25	; 43
     76c:	8a bd       	out	0x2a, r24	; 42
     76e:	4c ce       	rjmp	.-872    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     770:	66 23       	and	r22, r22
     772:	09 f4       	brne	.+2      	; 0x776 <play_note+0x390>
     774:	78 c0       	rjmp	.+240    	; 0x866 <play_note+0x480>
     776:	81 e3       	ldi	r24, 0x31	; 49
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	9b bd       	out	0x2b, r25	; 43
     77c:	8a bd       	out	0x2a, r24	; 42
     77e:	44 ce       	rjmp	.-888    	; 0x408 <play_note+0x22>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     780:	8b e2       	ldi	r24, 0x2B	; 43
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	9b bd       	out	0x2b, r25	; 43
     786:	8a bd       	out	0x2a, r24	; 42
	break;
     788:	3f ce       	rjmp	.-898    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     78a:	66 23       	and	r22, r22
     78c:	09 f4       	brne	.+2      	; 0x790 <play_note+0x3aa>
     78e:	93 c0       	rjmp	.+294    	; 0x8b6 <play_note+0x4d0>
     790:	87 e3       	ldi	r24, 0x37	; 55
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	9b bd       	out	0x2b, r25	; 43
     796:	8a bd       	out	0x2a, r24	; 42
     798:	37 ce       	rjmp	.-914    	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     79a:	66 23       	and	r22, r22
     79c:	09 f4       	brne	.+2      	; 0x7a0 <play_note+0x3ba>
     79e:	4f c0       	rjmp	.+158    	; 0x83e <play_note+0x458>
     7a0:	88 e1       	ldi	r24, 0x18	; 24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9b bd       	out	0x2b, r25	; 43
     7a6:	8a bd       	out	0x2a, r24	; 42
     7a8:	2f ce       	rjmp	.-930    	; 0x408 <play_note+0x22>
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     7aa:	66 23       	and	r22, r22
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <play_note+0x3ca>
     7ae:	f6 c0       	rjmp	.+492    	; 0x99c <play_note+0x5b6>
     7b0:	82 eb       	ldi	r24, 0xB2	; 178
     7b2:	94 e0       	ldi	r25, 0x04	; 4
     7b4:	9b bd       	out	0x2b, r25	; 43
     7b6:	8a bd       	out	0x2a, r24	; 42
     7b8:	27 ce       	rjmp	.-946    	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     7ba:	66 23       	and	r22, r22
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <play_note+0x3da>
     7be:	16 c1       	rjmp	.+556    	; 0x9ec <play_note+0x606>
     7c0:	8d e8       	ldi	r24, 0x8D	; 141
     7c2:	9a e0       	ldi	r25, 0x0A	; 10
     7c4:	9b bd       	out	0x2b, r25	; 43
     7c6:	8a bd       	out	0x2a, r24	; 42
     7c8:	1f ce       	rjmp	.-962    	; 0x408 <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     7ca:	66 23       	and	r22, r22
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <play_note+0x3ea>
     7ce:	d7 c0       	rjmp	.+430    	; 0x97e <play_note+0x598>
     7d0:	86 e1       	ldi	r24, 0x16	; 22
     7d2:	9e e0       	ldi	r25, 0x0E	; 14
     7d4:	9b bd       	out	0x2b, r25	; 43
     7d6:	8a bd       	out	0x2a, r24	; 42
     7d8:	17 ce       	rjmp	.-978    	; 0x408 <play_note+0x22>
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     7da:	66 23       	and	r22, r22
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <play_note+0x3fa>
     7de:	f7 c0       	rjmp	.+494    	; 0x9ce <play_note+0x5e8>
     7e0:	80 ec       	ldi	r24, 0xC0	; 192
     7e2:	90 e1       	ldi	r25, 0x10	; 16
     7e4:	9b bd       	out	0x2b, r25	; 43
     7e6:	8a bd       	out	0x2a, r24	; 42
     7e8:	0f ce       	rjmp	.-994    	; 0x408 <play_note+0x22>
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     7ea:	66 23       	and	r22, r22
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <play_note+0x40a>
     7ee:	d1 c0       	rjmp	.+418    	; 0x992 <play_note+0x5ac>
     7f0:	8f e2       	ldi	r24, 0x2F	; 47
     7f2:	94 e0       	ldi	r25, 0x04	; 4
     7f4:	9b bd       	out	0x2b, r25	; 43
     7f6:	8a bd       	out	0x2a, r24	; 42
     7f8:	07 ce       	rjmp	.-1010   	; 0x408 <play_note+0x22>
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     7fa:	66 23       	and	r22, r22
     7fc:	09 f4       	brne	.+2      	; 0x800 <play_note+0x41a>
     7fe:	f1 c0       	rjmp	.+482    	; 0x9e2 <play_note+0x5fc>
     800:	87 e6       	ldi	r24, 0x67	; 103
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	9b bd       	out	0x2b, r25	; 43
     806:	8a bd       	out	0x2a, r24	; 42
     808:	ff cd       	rjmp	.-1026   	; 0x408 <play_note+0x22>
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     80a:	66 23       	and	r22, r22
     80c:	09 f4       	brne	.+2      	; 0x810 <play_note+0x42a>
     80e:	cb c0       	rjmp	.+406    	; 0x9a6 <play_note+0x5c0>
     810:	8d e8       	ldi	r24, 0x8D	; 141
     812:	9c e0       	ldi	r25, 0x0C	; 12
     814:	9b bd       	out	0x2b, r25	; 43
     816:	8a bd       	out	0x2a, r24	; 42
     818:	f7 cd       	rjmp	.-1042   	; 0x408 <play_note+0x22>
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     81a:	8d e5       	ldi	r24, 0x5D	; 93
     81c:	96 e1       	ldi	r25, 0x16	; 22
     81e:	9b bd       	out	0x2b, r25	; 43
     820:	8a bd       	out	0x2a, r24	; 42
	break;
     822:	f2 cd       	rjmp	.-1052   	; 0x408 <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     824:	66 23       	and	r22, r22
     826:	09 f4       	brne	.+2      	; 0x82a <play_note+0x444>
     828:	e6 c0       	rjmp	.+460    	; 0x9f6 <play_note+0x610>
     82a:	86 e4       	ldi	r24, 0x46	; 70
     82c:	95 e0       	ldi	r25, 0x05	; 5
     82e:	9b bd       	out	0x2b, r25	; 43
     830:	8a bd       	out	0x2a, r24	; 42
     832:	ea cd       	rjmp	.-1068   	; 0x408 <play_note+0x22>
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     834:	8d ee       	ldi	r24, 0xED	; 237
     836:	9e e0       	ldi	r25, 0x0E	; 14
     838:	9b bd       	out	0x2b, r25	; 43
     83a:	8a bd       	out	0x2a, r24	; 42
	break;
     83c:	e5 cd       	rjmp	.-1078   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     83e:	85 e1       	ldi	r24, 0x15	; 21
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	9b bd       	out	0x2b, r25	; 43
     844:	8a bd       	out	0x2a, r24	; 42
     846:	e0 cd       	rjmp	.-1088   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     848:	82 eb       	ldi	r24, 0xB2	; 178
     84a:	97 e1       	ldi	r25, 0x17	; 23
     84c:	9b bd       	out	0x2b, r25	; 43
     84e:	8a bd       	out	0x2a, r24	; 42
     850:	db cd       	rjmp	.-1098   	; 0x408 <play_note+0x22>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     852:	86 e2       	ldi	r24, 0x26	; 38
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	9b bd       	out	0x2b, r25	; 43
     858:	8a bd       	out	0x2a, r24	; 42
     85a:	d6 cd       	rjmp	.-1108   	; 0x408 <play_note+0x22>
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     85c:	87 ee       	ldi	r24, 0xE7	; 231
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	9b bd       	out	0x2b, r25	; 43
     862:	8a bd       	out	0x2a, r24	; 42
     864:	d1 cd       	rjmp	.-1118   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     866:	8e e2       	ldi	r24, 0x2E	; 46
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	9b bd       	out	0x2b, r25	; 43
     86c:	8a bd       	out	0x2a, r24	; 42
     86e:	cc cd       	rjmp	.-1128   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     870:	8b ee       	ldi	r24, 0xEB	; 235
     872:	95 e0       	ldi	r25, 0x05	; 5
     874:	9b bd       	out	0x2b, r25	; 43
     876:	8a bd       	out	0x2a, r24	; 42
     878:	c7 cd       	rjmp	.-1138   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     87a:	8a e7       	ldi	r24, 0x7A	; 122
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9b bd       	out	0x2b, r25	; 43
     880:	8a bd       	out	0x2a, r24	; 42
     882:	c2 cd       	rjmp	.-1148   	; 0x408 <play_note+0x22>
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     884:	8e e3       	ldi	r24, 0x3E	; 62
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	9b bd       	out	0x2b, r25	; 43
     88a:	8a bd       	out	0x2a, r24	; 42
     88c:	bd cd       	rjmp	.-1158   	; 0x408 <play_note+0x22>
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     88e:	89 ef       	ldi	r24, 0xF9	; 249
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	9b bd       	out	0x2b, r25	; 43
     894:	8a bd       	out	0x2a, r24	; 42
     896:	b8 cd       	rjmp	.-1168   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     898:	8c eb       	ldi	r24, 0xBC	; 188
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	9b bd       	out	0x2b, r25	; 43
     89e:	8a bd       	out	0x2a, r24	; 42
     8a0:	b3 cd       	rjmp	.-1178   	; 0x408 <play_note+0x22>
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     8a2:	80 ec       	ldi	r24, 0xC0	; 192
     8a4:	91 e1       	ldi	r25, 0x11	; 17
     8a6:	9b bd       	out	0x2b, r25	; 43
     8a8:	8a bd       	out	0x2a, r24	; 42
     8aa:	ae cd       	rjmp	.-1188   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     8ac:	89 e0       	ldi	r24, 0x09	; 9
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9b bd       	out	0x2b, r25	; 43
     8b2:	8a bd       	out	0x2a, r24	; 42
     8b4:	a9 cd       	rjmp	.-1198   	; 0x408 <play_note+0x22>
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     8b6:	84 e3       	ldi	r24, 0x34	; 52
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	9b bd       	out	0x2b, r25	; 43
     8bc:	8a bd       	out	0x2a, r24	; 42
     8be:	a4 cd       	rjmp	.-1208   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     8c0:	8d e8       	ldi	r24, 0x8D	; 141
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	9b bd       	out	0x2b, r25	; 43
     8c6:	8a bd       	out	0x2a, r24	; 42
     8c8:	9f cd       	rjmp	.-1218   	; 0x408 <play_note+0x22>
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     8ca:	8e e9       	ldi	r24, 0x9E	; 158
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	9b bd       	out	0x2b, r25	; 43
     8d0:	8a bd       	out	0x2a, r24	; 42
     8d2:	9a cd       	rjmp	.-1228   	; 0x408 <play_note+0x22>
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
     8d4:	8d e7       	ldi	r24, 0x7D	; 125
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	9b bd       	out	0x2b, r25	; 43
     8da:	8a bd       	out	0x2a, r24	; 42
     8dc:	95 cd       	rjmp	.-1238   	; 0x408 <play_note+0x22>
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     8de:	83 ed       	ldi	r24, 0xD3	; 211
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	9b bd       	out	0x2b, r25	; 43
     8e4:	8a bd       	out	0x2a, r24	; 42
     8e6:	90 cd       	rjmp	.-1248   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
     8e8:	8d e5       	ldi	r24, 0x5D	; 93
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	9b bd       	out	0x2b, r25	; 43
     8ee:	8a bd       	out	0x2a, r24	; 42
     8f0:	8b cd       	rjmp	.-1258   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
     8f2:	86 e4       	ldi	r24, 0x46	; 70
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9b bd       	out	0x2b, r25	; 43
     8f8:	8a bd       	out	0x2a, r24	; 42
     8fa:	86 cd       	rjmp	.-1268   	; 0x408 <play_note+0x22>
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
     8fc:	89 e6       	ldi	r24, 0x69	; 105
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	9b bd       	out	0x2b, r25	; 43
     902:	8a bd       	out	0x2a, r24	; 42
     904:	81 cd       	rjmp	.-1278   	; 0x408 <play_note+0x22>
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
     906:	8e e4       	ldi	r24, 0x4E	; 78
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	9b bd       	out	0x2b, r25	; 43
     90c:	8a bd       	out	0x2a, r24	; 42
     90e:	7c cd       	rjmp	.-1288   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     910:	8b e1       	ldi	r24, 0x1B	; 27
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	9b bd       	out	0x2b, r25	; 43
     916:	8a bd       	out	0x2a, r24	; 42
     918:	77 cd       	rjmp	.-1298   	; 0x408 <play_note+0x22>
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
     91a:	85 ea       	ldi	r24, 0xA5	; 165
     91c:	96 e0       	ldi	r25, 0x06	; 6
     91e:	9b bd       	out	0x2b, r25	; 43
     920:	8a bd       	out	0x2a, r24	; 42
     922:	72 cd       	rjmp	.-1308   	; 0x408 <play_note+0x22>
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
     924:	8c e7       	ldi	r24, 0x7C	; 124
     926:	92 e0       	ldi	r25, 0x02	; 2
     928:	9b bd       	out	0x2b, r25	; 43
     92a:	8a bd       	out	0x2a, r24	; 42
     92c:	6d cd       	rjmp	.-1318   	; 0x408 <play_note+0x22>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     92e:	88 ea       	ldi	r24, 0xA8	; 168
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9b bd       	out	0x2b, r25	; 43
     934:	8a bd       	out	0x2a, r24	; 42
     936:	68 cd       	rjmp	.-1328   	; 0x408 <play_note+0x22>
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
     938:	82 e5       	ldi	r24, 0x52	; 82
     93a:	93 e0       	ldi	r25, 0x03	; 3
     93c:	9b bd       	out	0x2b, r25	; 43
     93e:	8a bd       	out	0x2a, r24	; 42
     940:	63 cd       	rjmp	.-1338   	; 0x408 <play_note+0x22>
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     942:	8c ef       	ldi	r24, 0xFC	; 252
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	9b bd       	out	0x2b, r25	; 43
     948:	8a bd       	out	0x2a, r24	; 42
     94a:	5e cd       	rjmp	.-1348   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
     94c:	87 e3       	ldi	r24, 0x37	; 55
     94e:	92 e0       	ldi	r25, 0x02	; 2
     950:	9b bd       	out	0x2b, r25	; 43
     952:	8a bd       	out	0x2a, r24	; 42
     954:	59 cd       	rjmp	.-1358   	; 0x408 <play_note+0x22>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     956:	8d e3       	ldi	r24, 0x3D	; 61
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	9b bd       	out	0x2b, r25	; 43
     95c:	8a bd       	out	0x2a, r24	; 42
     95e:	54 cd       	rjmp	.-1368   	; 0x408 <play_note+0x22>
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
     960:	89 e1       	ldi	r24, 0x19	; 25
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	9b bd       	out	0x2b, r25	; 43
     966:	8a bd       	out	0x2a, r24	; 42
     968:	4f cd       	rjmp	.-1378   	; 0x408 <play_note+0x22>
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
     96a:	85 e0       	ldi	r24, 0x05	; 5
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	9b bd       	out	0x2b, r25	; 43
     970:	8a bd       	out	0x2a, r24	; 42
     972:	4a cd       	rjmp	.-1388   	; 0x408 <play_note+0x22>
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
     974:	8a e9       	ldi	r24, 0x9A	; 154
     976:	9a e1       	ldi	r25, 0x1A	; 26
     978:	9b bd       	out	0x2b, r25	; 43
     97a:	8a bd       	out	0x2a, r24	; 42
     97c:	45 cd       	rjmp	.-1398   	; 0x408 <play_note+0x22>
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
     97e:	8c e4       	ldi	r24, 0x4C	; 76
     980:	9d e0       	ldi	r25, 0x0D	; 13
     982:	9b bd       	out	0x2b, r25	; 43
     984:	8a bd       	out	0x2a, r24	; 42
     986:	40 cd       	rjmp	.-1408   	; 0x408 <play_note+0x22>
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
     988:	8d ee       	ldi	r24, 0xED	; 237
     98a:	93 e1       	ldi	r25, 0x13	; 19
     98c:	9b bd       	out	0x2b, r25	; 43
     98e:	8a bd       	out	0x2a, r24	; 42
     990:	3b cd       	rjmp	.-1418   	; 0x408 <play_note+0x22>
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
     992:	83 ef       	ldi	r24, 0xF3	; 243
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	9b bd       	out	0x2b, r25	; 43
     998:	8a bd       	out	0x2a, r24	; 42
     99a:	36 cd       	rjmp	.-1428   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
     99c:	8f e6       	ldi	r24, 0x6F	; 111
     99e:	94 e0       	ldi	r25, 0x04	; 4
     9a0:	9b bd       	out	0x2b, r25	; 43
     9a2:	8a bd       	out	0x2a, r24	; 42
     9a4:	31 cd       	rjmp	.-1438   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
     9a6:	88 ed       	ldi	r24, 0xD8	; 216
     9a8:	9b e0       	ldi	r25, 0x0B	; 11
     9aa:	9b bd       	out	0x2b, r25	; 43
     9ac:	8a bd       	out	0x2a, r24	; 42
     9ae:	2c cd       	rjmp	.-1448   	; 0x408 <play_note+0x22>
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
     9b0:	8e e1       	ldi	r24, 0x1E	; 30
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	9b bd       	out	0x2b, r25	; 43
     9b6:	8a bd       	out	0x2a, r24	; 42
     9b8:	27 cd       	rjmp	.-1458   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
     9ba:	82 e2       	ldi	r24, 0x22	; 34
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	9b bd       	out	0x2b, r25	; 43
     9c0:	8a bd       	out	0x2a, r24	; 42
     9c2:	22 cd       	rjmp	.-1468   	; 0x408 <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
     9c4:	85 ef       	ldi	r24, 0xF5	; 245
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	9b bd       	out	0x2b, r25	; 43
     9ca:	8a bd       	out	0x2a, r24	; 42
     9cc:	1d cd       	rjmp	.-1478   	; 0x408 <play_note+0x22>
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
     9ce:	80 ed       	ldi	r24, 0xD0	; 208
     9d0:	9f e0       	ldi	r25, 0x0F	; 15
     9d2:	9b bd       	out	0x2b, r25	; 43
     9d4:	8a bd       	out	0x2a, r24	; 42
     9d6:	18 cd       	rjmp	.-1488   	; 0x408 <play_note+0x22>
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
     9d8:	8d e0       	ldi	r24, 0x0D	; 13
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	9b bd       	out	0x2b, r25	; 43
     9de:	8a bd       	out	0x2a, r24	; 42
     9e0:	13 cd       	rjmp	.-1498   	; 0x408 <play_note+0x22>
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
     9e2:	8f ed       	ldi	r24, 0xDF	; 223
     9e4:	98 e0       	ldi	r25, 0x08	; 8
     9e6:	9b bd       	out	0x2b, r25	; 43
     9e8:	8a bd       	out	0x2a, r24	; 42
     9ea:	0e cd       	rjmp	.-1508   	; 0x408 <play_note+0x22>
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
     9ec:	86 ef       	ldi	r24, 0xF6	; 246
     9ee:	99 e0       	ldi	r25, 0x09	; 9
     9f0:	9b bd       	out	0x2b, r25	; 43
     9f2:	8a bd       	out	0x2a, r24	; 42
     9f4:	09 cd       	rjmp	.-1518   	; 0x408 <play_note+0x22>
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
     9f6:	8a ef       	ldi	r24, 0xFA	; 250
     9f8:	94 e0       	ldi	r25, 0x04	; 4
     9fa:	9b bd       	out	0x2b, r25	; 43
     9fc:	8a bd       	out	0x2a, r24	; 42
     9fe:	04 cd       	rjmp	.-1528   	; 0x408 <play_note+0x22>

00000a00 <song0>:
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     a00:	86 34       	cpi	r24, 0x46	; 70
     a02:	91 05       	cpc	r25, r1
     a04:	20 f0       	brcs	.+8      	; 0xa0e <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
     a06:	8f ef       	ldi	r24, 0xFF	; 255
     a08:	80 93 27 01 	sts	0x0127, r24
     a0c:	08 95       	ret
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     a0e:	fc 01       	movw	r30, r24
     a10:	e2 57       	subi	r30, 0x72	; 114
     a12:	ff 4f       	sbci	r31, 0xFF	; 255
     a14:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
     a18:	22 e0       	ldi	r18, 0x02	; 2
     a1a:	44 e0       	ldi	r20, 0x04	; 4
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	81 e4       	ldi	r24, 0x41	; 65
     a20:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
     a24:	26 e0       	ldi	r18, 0x06	; 6
     a26:	44 e0       	ldi	r20, 0x04	; 4
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	81 e4       	ldi	r24, 0x41	; 65
     a2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
     a30:	22 e0       	ldi	r18, 0x02	; 2
     a32:	44 e0       	ldi	r20, 0x04	; 4
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	81 e4       	ldi	r24, 0x41	; 65
     a38:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
     a3c:	28 e0       	ldi	r18, 0x08	; 8
     a3e:	44 e0       	ldi	r20, 0x04	; 4
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	84 e4       	ldi	r24, 0x44	; 68
     a44:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
     a48:	28 e0       	ldi	r18, 0x08	; 8
     a4a:	44 e0       	ldi	r20, 0x04	; 4
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	86 e4       	ldi	r24, 0x46	; 70
     a50:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
     a54:	26 e0       	ldi	r18, 0x06	; 6
     a56:	44 e0       	ldi	r20, 0x04	; 4
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	82 e4       	ldi	r24, 0x42	; 66
     a5c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
     a60:	28 e0       	ldi	r18, 0x08	; 8
     a62:	44 e0       	ldi	r20, 0x04	; 4
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	83 e4       	ldi	r24, 0x43	; 67
     a68:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
     a6c:	28 e0       	ldi	r18, 0x08	; 8
     a6e:	44 e0       	ldi	r20, 0x04	; 4
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	81 e4       	ldi	r24, 0x41	; 65
     a74:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
     a78:	28 e0       	ldi	r18, 0x08	; 8
     a7a:	44 e0       	ldi	r20, 0x04	; 4
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	87 e4       	ldi	r24, 0x47	; 71
     a80:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
     a84:	28 e0       	ldi	r18, 0x08	; 8
     a86:	44 e0       	ldi	r20, 0x04	; 4
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	85 e4       	ldi	r24, 0x45	; 69
     a8c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
     a90:	20 e1       	ldi	r18, 0x10	; 16
     a92:	44 e0       	ldi	r20, 0x04	; 4
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	81 e4       	ldi	r24, 0x41	; 65
     a98:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
     a9c:	24 e0       	ldi	r18, 0x04	; 4
     a9e:	45 e0       	ldi	r20, 0x05	; 5
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	83 e4       	ldi	r24, 0x43	; 67
     aa4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
     aa8:	24 e0       	ldi	r18, 0x04	; 4
     aaa:	45 e0       	ldi	r20, 0x05	; 5
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	84 e4       	ldi	r24, 0x44	; 68
     ab0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ab4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ab6:	10 92 38 01 	sts	0x0138, r1
     aba:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     abe:	88 e0       	ldi	r24, 0x08	; 8
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	90 93 36 01 	sts	0x0136, r25
     ac6:	80 93 35 01 	sts	0x0135, r24
     aca:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     acc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ace:	10 92 38 01 	sts	0x0138, r1
     ad2:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	90 93 36 01 	sts	0x0136, r25
     ade:	80 93 35 01 	sts	0x0135, r24
     ae2:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
     ae4:	20 e1       	ldi	r18, 0x10	; 16
     ae6:	44 e0       	ldi	r20, 0x04	; 4
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	82 e4       	ldi	r24, 0x42	; 66
     aec:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
     af0:	28 e0       	ldi	r18, 0x08	; 8
     af2:	44 e0       	ldi	r20, 0x04	; 4
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	82 e4       	ldi	r24, 0x42	; 66
     af8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
     afc:	28 e1       	ldi	r18, 0x18	; 24
     afe:	44 e0       	ldi	r20, 0x04	; 4
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	87 e4       	ldi	r24, 0x47	; 71
     b04:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
     b08:	20 e1       	ldi	r18, 0x10	; 16
     b0a:	45 e0       	ldi	r20, 0x05	; 5
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	84 e4       	ldi	r24, 0x44	; 68
     b10:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     b14:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     b16:	10 92 38 01 	sts	0x0138, r1
     b1a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	90 93 36 01 	sts	0x0136, r25
     b26:	80 93 35 01 	sts	0x0135, r24
     b2a:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
     b2c:	24 e0       	ldi	r18, 0x04	; 4
     b2e:	44 e0       	ldi	r20, 0x04	; 4
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	81 e4       	ldi	r24, 0x41	; 65
     b34:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
     b38:	26 e0       	ldi	r18, 0x06	; 6
     b3a:	44 e0       	ldi	r20, 0x04	; 4
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	87 e4       	ldi	r24, 0x47	; 71
     b40:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
     b44:	24 e0       	ldi	r18, 0x04	; 4
     b46:	44 e0       	ldi	r20, 0x04	; 4
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	87 e4       	ldi	r24, 0x47	; 71
     b4c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
     b50:	28 e0       	ldi	r18, 0x08	; 8
     b52:	44 e0       	ldi	r20, 0x04	; 4
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	87 e4       	ldi	r24, 0x47	; 71
     b58:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
     b5c:	23 e0       	ldi	r18, 0x03	; 3
     b5e:	44 e0       	ldi	r20, 0x04	; 4
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	87 e4       	ldi	r24, 0x47	; 71
     b64:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
     b68:	20 e1       	ldi	r18, 0x10	; 16
     b6a:	44 e0       	ldi	r20, 0x04	; 4
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	84 e4       	ldi	r24, 0x44	; 68
     b70:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
     b74:	20 e1       	ldi	r18, 0x10	; 16
     b76:	45 e0       	ldi	r20, 0x05	; 5
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	83 e4       	ldi	r24, 0x43	; 67
     b7c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
     b80:	22 e0       	ldi	r18, 0x02	; 2
     b82:	44 e0       	ldi	r20, 0x04	; 4
     b84:	61 e0       	ldi	r22, 0x01	; 1
     b86:	82 e4       	ldi	r24, 0x42	; 66
     b88:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
     b8c:	24 e0       	ldi	r18, 0x04	; 4
     b8e:	45 e0       	ldi	r20, 0x05	; 5
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	84 e4       	ldi	r24, 0x44	; 68
     b94:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
     b98:	24 e0       	ldi	r18, 0x04	; 4
     b9a:	44 e0       	ldi	r20, 0x04	; 4
     b9c:	61 e0       	ldi	r22, 0x01	; 1
     b9e:	81 e4       	ldi	r24, 0x41	; 65
     ba0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
     ba4:	28 e0       	ldi	r18, 0x08	; 8
     ba6:	44 e0       	ldi	r20, 0x04	; 4
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	82 e4       	ldi	r24, 0x42	; 66
     bac:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
     bb0:	28 e1       	ldi	r18, 0x18	; 24
     bb2:	44 e0       	ldi	r20, 0x04	; 4
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	86 e4       	ldi	r24, 0x46	; 70
     bb8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
     bbc:	27 e0       	ldi	r18, 0x07	; 7
     bbe:	44 e0       	ldi	r20, 0x04	; 4
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	87 e4       	ldi	r24, 0x47	; 71
     bc4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>

00000bc8 <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
     bc8:	8f 33       	cpi	r24, 0x3F	; 63
     bca:	91 05       	cpc	r25, r1
     bcc:	20 f0       	brcs	.+8      	; 0xbd6 <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	80 93 27 01 	sts	0x0127, r24
     bd4:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
     bd6:	fc 01       	movw	r30, r24
     bd8:	ec 52       	subi	r30, 0x2C	; 44
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
     be0:	24 e0       	ldi	r18, 0x04	; 4
     be2:	44 e0       	ldi	r20, 0x04	; 4
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	83 e4       	ldi	r24, 0x43	; 67
     be8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
     bec:	28 e0       	ldi	r18, 0x08	; 8
     bee:	44 e0       	ldi	r20, 0x04	; 4
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	85 e4       	ldi	r24, 0x45	; 69
     bf4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     bf8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     bfa:	10 92 38 01 	sts	0x0138, r1
     bfe:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	90 93 36 01 	sts	0x0136, r25
     c0a:	80 93 35 01 	sts	0x0135, r24
     c0e:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
     c10:	28 e0       	ldi	r18, 0x08	; 8
     c12:	44 e0       	ldi	r20, 0x04	; 4
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	84 e4       	ldi	r24, 0x44	; 68
     c18:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
     c1c:	20 e1       	ldi	r18, 0x10	; 16
     c1e:	43 e0       	ldi	r20, 0x03	; 3
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	83 e4       	ldi	r24, 0x43	; 67
     c24:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
     c28:	24 e0       	ldi	r18, 0x04	; 4
     c2a:	44 e0       	ldi	r20, 0x04	; 4
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	84 e4       	ldi	r24, 0x44	; 68
     c30:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
     c34:	24 e0       	ldi	r18, 0x04	; 4
     c36:	43 e0       	ldi	r20, 0x03	; 3
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	82 e4       	ldi	r24, 0x42	; 66
     c3c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
     c40:	27 e0       	ldi	r18, 0x07	; 7
     c42:	43 e0       	ldi	r20, 0x03	; 3
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	81 e4       	ldi	r24, 0x41	; 65
     c48:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
     c4c:	24 e0       	ldi	r18, 0x04	; 4
     c4e:	44 e0       	ldi	r20, 0x04	; 4
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	86 e4       	ldi	r24, 0x46	; 70
     c54:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
     c58:	20 e1       	ldi	r18, 0x10	; 16
     c5a:	42 e0       	ldi	r20, 0x02	; 2
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	82 e4       	ldi	r24, 0x42	; 66
     c60:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
     c64:	20 e1       	ldi	r18, 0x10	; 16
     c66:	43 e0       	ldi	r20, 0x03	; 3
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	81 e4       	ldi	r24, 0x41	; 65
     c6c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
     c70:	28 e0       	ldi	r18, 0x08	; 8
     c72:	44 e0       	ldi	r20, 0x04	; 4
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	83 e4       	ldi	r24, 0x43	; 67
     c78:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
     c7c:	20 e1       	ldi	r18, 0x10	; 16
     c7e:	43 e0       	ldi	r20, 0x03	; 3
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	84 e4       	ldi	r24, 0x44	; 68
     c84:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
     c88:	20 e1       	ldi	r18, 0x10	; 16
     c8a:	43 e0       	ldi	r20, 0x03	; 3
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	85 e4       	ldi	r24, 0x45	; 69
     c90:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     c94:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     c96:	10 92 38 01 	sts	0x0138, r1
     c9a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     c9e:	88 e0       	ldi	r24, 0x08	; 8
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	90 93 36 01 	sts	0x0136, r25
     ca6:	80 93 35 01 	sts	0x0135, r24
     caa:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
     cac:	27 e0       	ldi	r18, 0x07	; 7
     cae:	43 e0       	ldi	r20, 0x03	; 3
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	82 e4       	ldi	r24, 0x42	; 66
     cb4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
     cb8:	2c e0       	ldi	r18, 0x0C	; 12
     cba:	43 e0       	ldi	r20, 0x03	; 3
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	82 e4       	ldi	r24, 0x42	; 66
     cc0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
     cc4:	20 e1       	ldi	r18, 0x10	; 16
     cc6:	43 e0       	ldi	r20, 0x03	; 3
     cc8:	61 e0       	ldi	r22, 0x01	; 1
     cca:	81 e4       	ldi	r24, 0x41	; 65
     ccc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     cd0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     cd2:	10 92 38 01 	sts	0x0138, r1
     cd6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     cda:	80 e1       	ldi	r24, 0x10	; 16
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	90 93 36 01 	sts	0x0136, r25
     ce2:	80 93 35 01 	sts	0x0135, r24
     ce6:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
     ce8:	24 e0       	ldi	r18, 0x04	; 4
     cea:	44 e0       	ldi	r20, 0x04	; 4
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	87 e4       	ldi	r24, 0x47	; 71
     cf0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
     cf4:	28 e0       	ldi	r18, 0x08	; 8
     cf6:	42 e0       	ldi	r20, 0x02	; 2
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	82 e4       	ldi	r24, 0x42	; 66
     cfc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
     d00:	20 e1       	ldi	r18, 0x10	; 16
     d02:	42 e0       	ldi	r20, 0x02	; 2
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	81 e4       	ldi	r24, 0x41	; 65
     d08:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
     d0c:	20 e1       	ldi	r18, 0x10	; 16
     d0e:	42 e0       	ldi	r20, 0x02	; 2
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	81 e4       	ldi	r24, 0x41	; 65
     d14:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
     d18:	2c e0       	ldi	r18, 0x0C	; 12
     d1a:	44 e0       	ldi	r20, 0x04	; 4
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	85 e4       	ldi	r24, 0x45	; 69
     d20:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
     d24:	22 e0       	ldi	r18, 0x02	; 2
     d26:	44 e0       	ldi	r20, 0x04	; 4
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	84 e4       	ldi	r24, 0x44	; 68
     d2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
     d30:	22 e0       	ldi	r18, 0x02	; 2
     d32:	44 e0       	ldi	r20, 0x04	; 4
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	85 e4       	ldi	r24, 0x45	; 69
     d38:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
     d3c:	28 e0       	ldi	r18, 0x08	; 8
     d3e:	43 e0       	ldi	r20, 0x03	; 3
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	83 e4       	ldi	r24, 0x43	; 67
     d44:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
     d48:	24 e0       	ldi	r18, 0x04	; 4
     d4a:	43 e0       	ldi	r20, 0x03	; 3
     d4c:	60 e0       	ldi	r22, 0x00	; 0
     d4e:	81 e4       	ldi	r24, 0x41	; 65
     d50:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
     d54:	28 e0       	ldi	r18, 0x08	; 8
     d56:	43 e0       	ldi	r20, 0x03	; 3
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	85 e4       	ldi	r24, 0x45	; 69
     d5c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
     d60:	28 e0       	ldi	r18, 0x08	; 8
     d62:	43 e0       	ldi	r20, 0x03	; 3
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	81 e4       	ldi	r24, 0x41	; 65
     d68:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     d6c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     d6e:	10 92 38 01 	sts	0x0138, r1
     d72:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     d76:	84 e0       	ldi	r24, 0x04	; 4
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	90 93 36 01 	sts	0x0136, r25
     d7e:	80 93 35 01 	sts	0x0135, r24
     d82:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
     d84:	28 e0       	ldi	r18, 0x08	; 8
     d86:	44 e0       	ldi	r20, 0x04	; 4
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	81 e4       	ldi	r24, 0x41	; 65
     d8c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>

00000d90 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
     d90:	85 39       	cpi	r24, 0x95	; 149
     d92:	91 05       	cpc	r25, r1
     d94:	20 f0       	brcs	.+8      	; 0xd9e <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	80 93 27 01 	sts	0x0127, r24
     d9c:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
     d9e:	fc 01       	movw	r30, r24
     da0:	ed 5e       	subi	r30, 0xED	; 237
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
     da8:	24 e0       	ldi	r18, 0x04	; 4
     daa:	43 e0       	ldi	r20, 0x03	; 3
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	87 e4       	ldi	r24, 0x47	; 71
     db0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
     db4:	22 e0       	ldi	r18, 0x02	; 2
     db6:	43 e0       	ldi	r20, 0x03	; 3
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	81 e4       	ldi	r24, 0x41	; 65
     dbc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     dc0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     dc2:	10 92 38 01 	sts	0x0138, r1
     dc6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	90 93 36 01 	sts	0x0136, r25
     dd2:	80 93 35 01 	sts	0x0135, r24
     dd6:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
     dd8:	22 e0       	ldi	r18, 0x02	; 2
     dda:	44 e0       	ldi	r20, 0x04	; 4
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	83 e4       	ldi	r24, 0x43	; 67
     de0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
     de4:	22 e0       	ldi	r18, 0x02	; 2
     de6:	44 e0       	ldi	r20, 0x04	; 4
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	85 e4       	ldi	r24, 0x45	; 69
     dec:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
     df0:	24 e0       	ldi	r18, 0x04	; 4
     df2:	44 e0       	ldi	r20, 0x04	; 4
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	84 e4       	ldi	r24, 0x44	; 68
     df8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
     dfc:	22 e0       	ldi	r18, 0x02	; 2
     dfe:	44 e0       	ldi	r20, 0x04	; 4
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	83 e4       	ldi	r24, 0x43	; 67
     e04:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e08:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e0a:	10 92 38 01 	sts	0x0138, r1
     e0e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	90 93 36 01 	sts	0x0136, r25
     e1a:	80 93 35 01 	sts	0x0135, r24
     e1e:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
     e20:	22 e0       	ldi	r18, 0x02	; 2
     e22:	44 e0       	ldi	r20, 0x04	; 4
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	83 e4       	ldi	r24, 0x43	; 67
     e28:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e2c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e2e:	10 92 38 01 	sts	0x0138, r1
     e32:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	90 93 36 01 	sts	0x0136, r25
     e3e:	80 93 35 01 	sts	0x0135, r24
     e42:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
     e44:	22 e0       	ldi	r18, 0x02	; 2
     e46:	44 e0       	ldi	r20, 0x04	; 4
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	83 e4       	ldi	r24, 0x43	; 67
     e4c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e50:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e52:	10 92 38 01 	sts	0x0138, r1
     e56:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	90 93 36 01 	sts	0x0136, r25
     e62:	80 93 35 01 	sts	0x0135, r24
     e66:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
     e68:	22 e0       	ldi	r18, 0x02	; 2
     e6a:	44 e0       	ldi	r20, 0x04	; 4
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	83 e4       	ldi	r24, 0x43	; 67
     e70:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e74:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e76:	10 92 38 01 	sts	0x0138, r1
     e7a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     e7e:	80 e1       	ldi	r24, 0x10	; 16
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 36 01 	sts	0x0136, r25
     e86:	80 93 35 01 	sts	0x0135, r24
     e8a:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
     e8c:	22 e0       	ldi	r18, 0x02	; 2
     e8e:	44 e0       	ldi	r20, 0x04	; 4
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	85 e4       	ldi	r24, 0x45	; 69
     e94:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
     e98:	22 e0       	ldi	r18, 0x02	; 2
     e9a:	44 e0       	ldi	r20, 0x04	; 4
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	84 e4       	ldi	r24, 0x44	; 68
     ea0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
     ea4:	22 e0       	ldi	r18, 0x02	; 2
     ea6:	44 e0       	ldi	r20, 0x04	; 4
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	83 e4       	ldi	r24, 0x43	; 67
     eac:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     eb0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     eb2:	10 92 38 01 	sts	0x0138, r1
     eb6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	90 93 36 01 	sts	0x0136, r25
     ec2:	80 93 35 01 	sts	0x0135, r24
     ec6:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
     ec8:	22 e0       	ldi	r18, 0x02	; 2
     eca:	44 e0       	ldi	r20, 0x04	; 4
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	83 e4       	ldi	r24, 0x43	; 67
     ed0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ed4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ed6:	10 92 38 01 	sts	0x0138, r1
     eda:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	90 93 36 01 	sts	0x0136, r25
     ee6:	80 93 35 01 	sts	0x0135, r24
     eea:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
     eec:	22 e0       	ldi	r18, 0x02	; 2
     eee:	44 e0       	ldi	r20, 0x04	; 4
     ef0:	60 e0       	ldi	r22, 0x00	; 0
     ef2:	83 e4       	ldi	r24, 0x43	; 67
     ef4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ef8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     efa:	10 92 38 01 	sts	0x0138, r1
     efe:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	90 93 36 01 	sts	0x0136, r25
     f0a:	80 93 35 01 	sts	0x0135, r24
     f0e:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
     f10:	22 e0       	ldi	r18, 0x02	; 2
     f12:	44 e0       	ldi	r20, 0x04	; 4
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	83 e4       	ldi	r24, 0x43	; 67
     f18:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f1c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f1e:	10 92 38 01 	sts	0x0138, r1
     f22:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	90 93 36 01 	sts	0x0136, r25
     f2e:	80 93 35 01 	sts	0x0135, r24
     f32:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
     f34:	24 e0       	ldi	r18, 0x04	; 4
     f36:	43 e0       	ldi	r20, 0x03	; 3
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	87 e4       	ldi	r24, 0x47	; 71
     f3c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
     f40:	22 e0       	ldi	r18, 0x02	; 2
     f42:	43 e0       	ldi	r20, 0x03	; 3
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	81 e4       	ldi	r24, 0x41	; 65
     f48:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f4c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f4e:	10 92 38 01 	sts	0x0138, r1
     f52:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     f56:	82 e0       	ldi	r24, 0x02	; 2
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	90 93 36 01 	sts	0x0136, r25
     f5e:	80 93 35 01 	sts	0x0135, r24
     f62:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
     f64:	22 e0       	ldi	r18, 0x02	; 2
     f66:	44 e0       	ldi	r20, 0x04	; 4
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	83 e4       	ldi	r24, 0x43	; 67
     f6c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
     f70:	22 e0       	ldi	r18, 0x02	; 2
     f72:	44 e0       	ldi	r20, 0x04	; 4
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	85 e4       	ldi	r24, 0x45	; 69
     f78:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
     f7c:	24 e0       	ldi	r18, 0x04	; 4
     f7e:	44 e0       	ldi	r20, 0x04	; 4
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	84 e4       	ldi	r24, 0x44	; 68
     f84:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
     f88:	22 e0       	ldi	r18, 0x02	; 2
     f8a:	44 e0       	ldi	r20, 0x04	; 4
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	83 e4       	ldi	r24, 0x43	; 67
     f90:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f94:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f96:	10 92 38 01 	sts	0x0138, r1
     f9a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	90 93 36 01 	sts	0x0136, r25
     fa6:	80 93 35 01 	sts	0x0135, r24
     faa:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
     fac:	22 e0       	ldi	r18, 0x02	; 2
     fae:	44 e0       	ldi	r20, 0x04	; 4
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	83 e4       	ldi	r24, 0x43	; 67
     fb4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     fb8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     fba:	10 92 38 01 	sts	0x0138, r1
     fbe:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 36 01 	sts	0x0136, r25
     fca:	80 93 35 01 	sts	0x0135, r24
     fce:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
     fd0:	22 e0       	ldi	r18, 0x02	; 2
     fd2:	44 e0       	ldi	r20, 0x04	; 4
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	83 e4       	ldi	r24, 0x43	; 67
     fd8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     fdc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     fde:	10 92 38 01 	sts	0x0138, r1
     fe2:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	90 93 36 01 	sts	0x0136, r25
     fee:	80 93 35 01 	sts	0x0135, r24
     ff2:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
     ff4:	22 e0       	ldi	r18, 0x02	; 2
     ff6:	44 e0       	ldi	r20, 0x04	; 4
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	83 e4       	ldi	r24, 0x43	; 67
     ffc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1000:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1002:	10 92 38 01 	sts	0x0138, r1
    1006:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    100a:	8a e0       	ldi	r24, 0x0A	; 10
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	90 93 36 01 	sts	0x0136, r25
    1012:	80 93 35 01 	sts	0x0135, r24
    1016:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    1018:	24 e0       	ldi	r18, 0x04	; 4
    101a:	44 e0       	ldi	r20, 0x04	; 4
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	83 e4       	ldi	r24, 0x43	; 67
    1020:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1024:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1026:	10 92 38 01 	sts	0x0138, r1
    102a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	90 93 36 01 	sts	0x0136, r25
    1036:	80 93 35 01 	sts	0x0135, r24
    103a:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    103c:	22 e0       	ldi	r18, 0x02	; 2
    103e:	44 e0       	ldi	r20, 0x04	; 4
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	84 e4       	ldi	r24, 0x44	; 68
    1044:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1048:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    104a:	10 92 38 01 	sts	0x0138, r1
    104e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	90 93 36 01 	sts	0x0136, r25
    105a:	80 93 35 01 	sts	0x0135, r24
    105e:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    1060:	24 e0       	ldi	r18, 0x04	; 4
    1062:	44 e0       	ldi	r20, 0x04	; 4
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	85 e4       	ldi	r24, 0x45	; 69
    1068:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    106c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    106e:	10 92 38 01 	sts	0x0138, r1
    1072:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	90 93 36 01 	sts	0x0136, r25
    107e:	80 93 35 01 	sts	0x0135, r24
    1082:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    1084:	22 e0       	ldi	r18, 0x02	; 2
    1086:	44 e0       	ldi	r20, 0x04	; 4
    1088:	60 e0       	ldi	r22, 0x00	; 0
    108a:	84 e4       	ldi	r24, 0x44	; 68
    108c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    1090:	22 e0       	ldi	r18, 0x02	; 2
    1092:	44 e0       	ldi	r20, 0x04	; 4
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	83 e4       	ldi	r24, 0x43	; 67
    1098:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    109c:	22 e0       	ldi	r18, 0x02	; 2
    109e:	43 e0       	ldi	r20, 0x03	; 3
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	81 e4       	ldi	r24, 0x41	; 65
    10a4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    10a8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    10aa:	10 92 38 01 	sts	0x0138, r1
    10ae:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    10b2:	82 e0       	ldi	r24, 0x02	; 2
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	90 93 36 01 	sts	0x0136, r25
    10ba:	80 93 35 01 	sts	0x0135, r24
    10be:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    10c0:	22 e0       	ldi	r18, 0x02	; 2
    10c2:	44 e0       	ldi	r20, 0x04	; 4
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	83 e4       	ldi	r24, 0x43	; 67
    10c8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    10cc:	22 e0       	ldi	r18, 0x02	; 2
    10ce:	43 e0       	ldi	r20, 0x03	; 3
    10d0:	60 e0       	ldi	r22, 0x00	; 0
    10d2:	81 e4       	ldi	r24, 0x41	; 65
    10d4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    10d8:	22 e0       	ldi	r18, 0x02	; 2
    10da:	43 e0       	ldi	r20, 0x03	; 3
    10dc:	61 e0       	ldi	r22, 0x01	; 1
    10de:	81 e4       	ldi	r24, 0x41	; 65
    10e0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    10e4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    10e6:	10 92 38 01 	sts	0x0138, r1
    10ea:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	90 93 36 01 	sts	0x0136, r25
    10f6:	80 93 35 01 	sts	0x0135, r24
    10fa:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    10fc:	22 e0       	ldi	r18, 0x02	; 2
    10fe:	44 e0       	ldi	r20, 0x04	; 4
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	85 e4       	ldi	r24, 0x45	; 69
    1104:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1108:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    110a:	10 92 38 01 	sts	0x0138, r1
    110e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	90 93 36 01 	sts	0x0136, r25
    111a:	80 93 35 01 	sts	0x0135, r24
    111e:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    1120:	22 e0       	ldi	r18, 0x02	; 2
    1122:	44 e0       	ldi	r20, 0x04	; 4
    1124:	61 e0       	ldi	r22, 0x01	; 1
    1126:	85 e4       	ldi	r24, 0x45	; 69
    1128:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    112c:	22 e0       	ldi	r18, 0x02	; 2
    112e:	44 e0       	ldi	r20, 0x04	; 4
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	86 e4       	ldi	r24, 0x46	; 70
    1134:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    1138:	22 e0       	ldi	r18, 0x02	; 2
    113a:	44 e0       	ldi	r20, 0x04	; 4
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	87 e4       	ldi	r24, 0x47	; 71
    1140:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    1144:	22 e0       	ldi	r18, 0x02	; 2
    1146:	44 e0       	ldi	r20, 0x04	; 4
    1148:	60 e0       	ldi	r22, 0x00	; 0
    114a:	87 e4       	ldi	r24, 0x47	; 71
    114c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1150:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1152:	10 92 38 01 	sts	0x0138, r1
    1156:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	90 93 36 01 	sts	0x0136, r25
    1162:	80 93 35 01 	sts	0x0135, r24
    1166:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    1168:	24 e0       	ldi	r18, 0x04	; 4
    116a:	44 e0       	ldi	r20, 0x04	; 4
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	87 e4       	ldi	r24, 0x47	; 71
    1170:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1174:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1176:	10 92 38 01 	sts	0x0138, r1
    117a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	90 93 36 01 	sts	0x0136, r25
    1186:	80 93 35 01 	sts	0x0135, r24
    118a:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    118c:	21 e0       	ldi	r18, 0x01	; 1
    118e:	44 e0       	ldi	r20, 0x04	; 4
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	87 e4       	ldi	r24, 0x47	; 71
    1194:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1198:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    119a:	10 92 38 01 	sts	0x0138, r1
    119e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	90 93 36 01 	sts	0x0136, r25
    11aa:	80 93 35 01 	sts	0x0135, r24
    11ae:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    11b0:	22 e0       	ldi	r18, 0x02	; 2
    11b2:	44 e0       	ldi	r20, 0x04	; 4
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	87 e4       	ldi	r24, 0x47	; 71
    11b8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11bc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11be:	10 92 38 01 	sts	0x0138, r1
    11c2:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	90 93 36 01 	sts	0x0136, r25
    11ce:	80 93 35 01 	sts	0x0135, r24
    11d2:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    11d4:	22 e0       	ldi	r18, 0x02	; 2
    11d6:	43 e0       	ldi	r20, 0x03	; 3
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	85 e4       	ldi	r24, 0x45	; 69
    11dc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11e0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11e2:	10 92 38 01 	sts	0x0138, r1
    11e6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	90 93 36 01 	sts	0x0136, r25
    11f2:	80 93 35 01 	sts	0x0135, r24
    11f6:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    11f8:	22 e0       	ldi	r18, 0x02	; 2
    11fa:	43 e0       	ldi	r20, 0x03	; 3
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	85 e4       	ldi	r24, 0x45	; 69
    1200:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    1204:	22 e0       	ldi	r18, 0x02	; 2
    1206:	43 e0       	ldi	r20, 0x03	; 3
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	86 e4       	ldi	r24, 0x46	; 70
    120c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    1210:	22 e0       	ldi	r18, 0x02	; 2
    1212:	43 e0       	ldi	r20, 0x03	; 3
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	87 e4       	ldi	r24, 0x47	; 71
    1218:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    121c:	22 e0       	ldi	r18, 0x02	; 2
    121e:	43 e0       	ldi	r20, 0x03	; 3
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	87 e4       	ldi	r24, 0x47	; 71
    1224:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1228:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    122a:	10 92 38 01 	sts	0x0138, r1
    122e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 36 01 	sts	0x0136, r25
    123a:	80 93 35 01 	sts	0x0135, r24
    123e:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    1240:	22 e0       	ldi	r18, 0x02	; 2
    1242:	44 e0       	ldi	r20, 0x04	; 4
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	84 e4       	ldi	r24, 0x44	; 68
    1248:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    124c:	22 e0       	ldi	r18, 0x02	; 2
    124e:	44 e0       	ldi	r20, 0x04	; 4
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	83 e4       	ldi	r24, 0x43	; 67
    1254:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    1258:	22 e0       	ldi	r18, 0x02	; 2
    125a:	43 e0       	ldi	r20, 0x03	; 3
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	81 e4       	ldi	r24, 0x41	; 65
    1260:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1264:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1266:	10 92 38 01 	sts	0x0138, r1
    126a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	90 93 36 01 	sts	0x0136, r25
    1276:	80 93 35 01 	sts	0x0135, r24
    127a:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    127c:	22 e0       	ldi	r18, 0x02	; 2
    127e:	44 e0       	ldi	r20, 0x04	; 4
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	83 e4       	ldi	r24, 0x43	; 67
    1284:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    1288:	22 e0       	ldi	r18, 0x02	; 2
    128a:	43 e0       	ldi	r20, 0x03	; 3
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	81 e4       	ldi	r24, 0x41	; 65
    1290:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    1294:	22 e0       	ldi	r18, 0x02	; 2
    1296:	43 e0       	ldi	r20, 0x03	; 3
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	81 e4       	ldi	r24, 0x41	; 65
    129c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    12a0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    12a2:	10 92 38 01 	sts	0x0138, r1
    12a6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	90 93 36 01 	sts	0x0136, r25
    12b2:	80 93 35 01 	sts	0x0135, r24
    12b6:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	44 e0       	ldi	r20, 0x04	; 4
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	85 e4       	ldi	r24, 0x45	; 69
    12c0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    12c4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    12c6:	10 92 38 01 	sts	0x0138, r1
    12ca:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	90 93 36 01 	sts	0x0136, r25
    12d6:	80 93 35 01 	sts	0x0135, r24
    12da:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    12dc:	22 e0       	ldi	r18, 0x02	; 2
    12de:	44 e0       	ldi	r20, 0x04	; 4
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	85 e4       	ldi	r24, 0x45	; 69
    12e4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    12e8:	22 e0       	ldi	r18, 0x02	; 2
    12ea:	44 e0       	ldi	r20, 0x04	; 4
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	86 e4       	ldi	r24, 0x46	; 70
    12f0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    12f4:	22 e0       	ldi	r18, 0x02	; 2
    12f6:	44 e0       	ldi	r20, 0x04	; 4
    12f8:	61 e0       	ldi	r22, 0x01	; 1
    12fa:	87 e4       	ldi	r24, 0x47	; 71
    12fc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    1300:	22 e0       	ldi	r18, 0x02	; 2
    1302:	44 e0       	ldi	r20, 0x04	; 4
    1304:	60 e0       	ldi	r22, 0x00	; 0
    1306:	87 e4       	ldi	r24, 0x47	; 71
    1308:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    130c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    130e:	10 92 38 01 	sts	0x0138, r1
    1312:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1316:	88 e0       	ldi	r24, 0x08	; 8
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	90 93 36 01 	sts	0x0136, r25
    131e:	80 93 35 01 	sts	0x0135, r24
    1322:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    1324:	22 e0       	ldi	r18, 0x02	; 2
    1326:	43 e0       	ldi	r20, 0x03	; 3
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	82 e4       	ldi	r24, 0x42	; 66
    132c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    1330:	22 e0       	ldi	r18, 0x02	; 2
    1332:	44 e0       	ldi	r20, 0x04	; 4
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	84 e4       	ldi	r24, 0x44	; 68
    1338:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    133c:	22 e0       	ldi	r18, 0x02	; 2
    133e:	44 e0       	ldi	r20, 0x04	; 4
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	83 e4       	ldi	r24, 0x43	; 67
    1344:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1348:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    134a:	10 92 38 01 	sts	0x0138, r1
    134e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	90 93 36 01 	sts	0x0136, r25
    135a:	80 93 35 01 	sts	0x0135, r24
    135e:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    1360:	22 e0       	ldi	r18, 0x02	; 2
    1362:	44 e0       	ldi	r20, 0x04	; 4
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	85 e4       	ldi	r24, 0x45	; 69
    1368:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    136c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    136e:	10 92 38 01 	sts	0x0138, r1
    1372:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 36 01 	sts	0x0136, r25
    137e:	80 93 35 01 	sts	0x0135, r24
    1382:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    1384:	22 e0       	ldi	r18, 0x02	; 2
    1386:	44 e0       	ldi	r20, 0x04	; 4
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	87 e4       	ldi	r24, 0x47	; 71
    138c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    1390:	22 e0       	ldi	r18, 0x02	; 2
    1392:	44 e0       	ldi	r20, 0x04	; 4
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	86 e4       	ldi	r24, 0x46	; 70
    1398:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    139c:	24 e0       	ldi	r18, 0x04	; 4
    139e:	44 e0       	ldi	r20, 0x04	; 4
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	81 e4       	ldi	r24, 0x41	; 65
    13a4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    13a8:	22 e0       	ldi	r18, 0x02	; 2
    13aa:	44 e0       	ldi	r20, 0x04	; 4
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	87 e4       	ldi	r24, 0x47	; 71
    13b0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    13b4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    13b6:	10 92 38 01 	sts	0x0138, r1
    13ba:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	90 93 36 01 	sts	0x0136, r25
    13c6:	80 93 35 01 	sts	0x0135, r24
    13ca:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    13cc:	22 e0       	ldi	r18, 0x02	; 2
    13ce:	44 e0       	ldi	r20, 0x04	; 4
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	85 e4       	ldi	r24, 0x45	; 69
    13d4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    13d8:	23 e0       	ldi	r18, 0x03	; 3
    13da:	43 e0       	ldi	r20, 0x03	; 3
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	87 e4       	ldi	r24, 0x47	; 71
    13e0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    13e4:	24 e0       	ldi	r18, 0x04	; 4
    13e6:	43 e0       	ldi	r20, 0x03	; 3
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	81 e4       	ldi	r24, 0x41	; 65
    13ec:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    13f0:	22 e0       	ldi	r18, 0x02	; 2
    13f2:	43 e0       	ldi	r20, 0x03	; 3
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	82 e4       	ldi	r24, 0x42	; 66
    13f8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    13fc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    13fe:	10 92 38 01 	sts	0x0138, r1
    1402:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	90 93 36 01 	sts	0x0136, r25
    140e:	80 93 35 01 	sts	0x0135, r24
    1412:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    1414:	22 e0       	ldi	r18, 0x02	; 2
    1416:	43 e0       	ldi	r20, 0x03	; 3
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	82 e4       	ldi	r24, 0x42	; 66
    141c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1420:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1422:	10 92 38 01 	sts	0x0138, r1
    1426:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	90 93 36 01 	sts	0x0136, r25
    1432:	80 93 35 01 	sts	0x0135, r24
    1436:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    1438:	22 e0       	ldi	r18, 0x02	; 2
    143a:	43 e0       	ldi	r20, 0x03	; 3
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	81 e4       	ldi	r24, 0x41	; 65
    1440:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1444:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1446:	10 92 38 01 	sts	0x0138, r1
    144a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	90 93 36 01 	sts	0x0136, r25
    1456:	80 93 35 01 	sts	0x0135, r24
    145a:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    145c:	24 e0       	ldi	r18, 0x04	; 4
    145e:	43 e0       	ldi	r20, 0x03	; 3
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	85 e4       	ldi	r24, 0x45	; 69
    1464:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1468:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    146a:	10 92 38 01 	sts	0x0138, r1
    146e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1472:	83 e0       	ldi	r24, 0x03	; 3
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	90 93 36 01 	sts	0x0136, r25
    147a:	80 93 35 01 	sts	0x0135, r24
    147e:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    1480:	22 e0       	ldi	r18, 0x02	; 2
    1482:	43 e0       	ldi	r20, 0x03	; 3
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	87 e4       	ldi	r24, 0x47	; 71
    1488:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    148c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    148e:	10 92 38 01 	sts	0x0138, r1
    1492:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	90 93 36 01 	sts	0x0136, r25
    149e:	80 93 35 01 	sts	0x0135, r24
    14a2:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    14a4:	25 e0       	ldi	r18, 0x05	; 5
    14a6:	44 e0       	ldi	r20, 0x04	; 4
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	83 e4       	ldi	r24, 0x43	; 67
    14ac:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14b0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14b2:	10 92 38 01 	sts	0x0138, r1
    14b6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    14ba:	84 e0       	ldi	r24, 0x04	; 4
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	90 93 36 01 	sts	0x0136, r25
    14c2:	80 93 35 01 	sts	0x0135, r24
    14c6:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    14c8:	22 e0       	ldi	r18, 0x02	; 2
    14ca:	43 e0       	ldi	r20, 0x03	; 3
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	82 e4       	ldi	r24, 0x42	; 66
    14d0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    14d4:	22 e0       	ldi	r18, 0x02	; 2
    14d6:	44 e0       	ldi	r20, 0x04	; 4
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	84 e4       	ldi	r24, 0x44	; 68
    14dc:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    14e0:	22 e0       	ldi	r18, 0x02	; 2
    14e2:	44 e0       	ldi	r20, 0x04	; 4
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	83 e4       	ldi	r24, 0x43	; 67
    14e8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14ec:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14ee:	10 92 38 01 	sts	0x0138, r1
    14f2:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	90 93 36 01 	sts	0x0136, r25
    14fe:	80 93 35 01 	sts	0x0135, r24
    1502:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    1504:	22 e0       	ldi	r18, 0x02	; 2
    1506:	44 e0       	ldi	r20, 0x04	; 4
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	85 e4       	ldi	r24, 0x45	; 69
    150c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1510:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1512:	10 92 38 01 	sts	0x0138, r1
    1516:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	90 93 36 01 	sts	0x0136, r25
    1522:	80 93 35 01 	sts	0x0135, r24
    1526:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    1528:	22 e0       	ldi	r18, 0x02	; 2
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	87 e4       	ldi	r24, 0x47	; 71
    1530:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    1534:	22 e0       	ldi	r18, 0x02	; 2
    1536:	44 e0       	ldi	r20, 0x04	; 4
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	86 e4       	ldi	r24, 0x46	; 70
    153c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    1540:	24 e0       	ldi	r18, 0x04	; 4
    1542:	44 e0       	ldi	r20, 0x04	; 4
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	81 e4       	ldi	r24, 0x41	; 65
    1548:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    154c:	22 e0       	ldi	r18, 0x02	; 2
    154e:	44 e0       	ldi	r20, 0x04	; 4
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	87 e4       	ldi	r24, 0x47	; 71
    1554:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1558:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    155a:	10 92 38 01 	sts	0x0138, r1
    155e:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	90 93 36 01 	sts	0x0136, r25
    156a:	80 93 35 01 	sts	0x0135, r24
    156e:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    1570:	22 e0       	ldi	r18, 0x02	; 2
    1572:	44 e0       	ldi	r20, 0x04	; 4
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	85 e4       	ldi	r24, 0x45	; 69
    1578:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    157c:	23 e0       	ldi	r18, 0x03	; 3
    157e:	43 e0       	ldi	r20, 0x03	; 3
    1580:	60 e0       	ldi	r22, 0x00	; 0
    1582:	87 e4       	ldi	r24, 0x47	; 71
    1584:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    1588:	24 e0       	ldi	r18, 0x04	; 4
    158a:	43 e0       	ldi	r20, 0x03	; 3
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	81 e4       	ldi	r24, 0x41	; 65
    1590:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    1594:	22 e0       	ldi	r18, 0x02	; 2
    1596:	43 e0       	ldi	r20, 0x03	; 3
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	82 e4       	ldi	r24, 0x42	; 66
    159c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15a0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15a2:	10 92 38 01 	sts	0x0138, r1
    15a6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	90 93 36 01 	sts	0x0136, r25
    15b2:	80 93 35 01 	sts	0x0135, r24
    15b6:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    15b8:	22 e0       	ldi	r18, 0x02	; 2
    15ba:	43 e0       	ldi	r20, 0x03	; 3
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	82 e4       	ldi	r24, 0x42	; 66
    15c0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15c4:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15c6:	10 92 38 01 	sts	0x0138, r1
    15ca:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	90 93 36 01 	sts	0x0136, r25
    15d6:	80 93 35 01 	sts	0x0135, r24
    15da:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    15dc:	22 e0       	ldi	r18, 0x02	; 2
    15de:	43 e0       	ldi	r20, 0x03	; 3
    15e0:	60 e0       	ldi	r22, 0x00	; 0
    15e2:	81 e4       	ldi	r24, 0x41	; 65
    15e4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15e8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15ea:	10 92 38 01 	sts	0x0138, r1
    15ee:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	90 93 36 01 	sts	0x0136, r25
    15fa:	80 93 35 01 	sts	0x0135, r24
    15fe:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    1600:	24 e0       	ldi	r18, 0x04	; 4
    1602:	43 e0       	ldi	r20, 0x03	; 3
    1604:	60 e0       	ldi	r22, 0x00	; 0
    1606:	85 e4       	ldi	r24, 0x45	; 69
    1608:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    160c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    160e:	10 92 38 01 	sts	0x0138, r1
    1612:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	90 93 36 01 	sts	0x0136, r25
    161e:	80 93 35 01 	sts	0x0135, r24
    1622:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    1624:	22 e0       	ldi	r18, 0x02	; 2
    1626:	43 e0       	ldi	r20, 0x03	; 3
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	87 e4       	ldi	r24, 0x47	; 71
    162c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    1630:	25 e0       	ldi	r18, 0x05	; 5
    1632:	44 e0       	ldi	r20, 0x04	; 4
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	83 e4       	ldi	r24, 0x43	; 67
    1638:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    163c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    163e:	10 92 38 01 	sts	0x0138, r1
    1642:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1646:	88 e0       	ldi	r24, 0x08	; 8
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	90 93 36 01 	sts	0x0136, r25
    164e:	80 93 35 01 	sts	0x0135, r24
    1652:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    1654:	28 e0       	ldi	r18, 0x08	; 8
    1656:	42 e0       	ldi	r20, 0x02	; 2
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	87 e4       	ldi	r24, 0x47	; 71
    165c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    1660:	28 e0       	ldi	r18, 0x08	; 8
    1662:	44 e0       	ldi	r20, 0x04	; 4
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	87 e4       	ldi	r24, 0x47	; 71
    1668:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    166c:	24 e0       	ldi	r18, 0x04	; 4
    166e:	44 e0       	ldi	r20, 0x04	; 4
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	85 e4       	ldi	r24, 0x45	; 69
    1674:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    1678:	22 e0       	ldi	r18, 0x02	; 2
    167a:	44 e0       	ldi	r20, 0x04	; 4
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	83 e4       	ldi	r24, 0x43	; 67
    1680:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1684:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1686:	10 92 38 01 	sts	0x0138, r1
    168a:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	90 93 36 01 	sts	0x0136, r25
    1696:	80 93 35 01 	sts	0x0135, r24
    169a:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    169c:	22 e0       	ldi	r18, 0x02	; 2
    169e:	44 e0       	ldi	r20, 0x04	; 4
    16a0:	60 e0       	ldi	r22, 0x00	; 0
    16a2:	85 e4       	ldi	r24, 0x45	; 69
    16a4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16a8:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16aa:	10 92 38 01 	sts	0x0138, r1
    16ae:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	90 93 36 01 	sts	0x0136, r25
    16ba:	80 93 35 01 	sts	0x0135, r24
    16be:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    16c0:	23 e0       	ldi	r18, 0x03	; 3
    16c2:	44 e0       	ldi	r20, 0x04	; 4
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	85 e4       	ldi	r24, 0x45	; 69
    16c8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16cc:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16ce:	10 92 38 01 	sts	0x0138, r1
    16d2:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 36 01 	sts	0x0136, r25
    16de:	80 93 35 01 	sts	0x0135, r24
    16e2:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    16e4:	21 e0       	ldi	r18, 0x01	; 1
    16e6:	44 e0       	ldi	r20, 0x04	; 4
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	85 e4       	ldi	r24, 0x45	; 69
    16ec:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16f0:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16f2:	10 92 38 01 	sts	0x0138, r1
    16f6:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    16fa:	88 e0       	ldi	r24, 0x08	; 8
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	90 93 36 01 	sts	0x0136, r25
    1702:	80 93 35 01 	sts	0x0135, r24
    1706:	08 95       	ret

00001708 <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    1708:	8f 31       	cpi	r24, 0x1F	; 31
    170a:	91 05       	cpc	r25, r1
    170c:	20 f0       	brcs	.+8      	; 0x1716 <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	80 93 27 01 	sts	0x0127, r24
    1714:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    1716:	fc 01       	movw	r30, r24
    1718:	e8 55       	subi	r30, 0x58	; 88
    171a:	fe 4f       	sbci	r31, 0xFE	; 254
    171c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1720:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1722:	10 92 38 01 	sts	0x0138, r1
    1726:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	90 93 36 01 	sts	0x0136, r25
    1732:	80 93 35 01 	sts	0x0135, r24
    1736:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    1738:	24 e0       	ldi	r18, 0x04	; 4
    173a:	45 e0       	ldi	r20, 0x05	; 5
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	85 e4       	ldi	r24, 0x45	; 69
    1740:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    1744:	27 e0       	ldi	r18, 0x07	; 7
    1746:	44 e0       	ldi	r20, 0x04	; 4
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	85 e4       	ldi	r24, 0x45	; 69
    174c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    1750:	27 e0       	ldi	r18, 0x07	; 7
    1752:	44 e0       	ldi	r20, 0x04	; 4
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	85 e4       	ldi	r24, 0x45	; 69
    1758:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    175c:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    175e:	10 92 38 01 	sts	0x0138, r1
    1762:	10 92 37 01 	sts	0x0137, r1
  max_beat = duration;
    1766:	85 e0       	ldi	r24, 0x05	; 5
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	90 93 36 01 	sts	0x0136, r25
    176e:	80 93 35 01 	sts	0x0135, r24
    1772:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    1774:	28 e0       	ldi	r18, 0x08	; 8
    1776:	45 e0       	ldi	r20, 0x05	; 5
    1778:	60 e0       	ldi	r22, 0x00	; 0
    177a:	85 e4       	ldi	r24, 0x45	; 69
    177c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    1780:	23 e0       	ldi	r18, 0x03	; 3
    1782:	44 e0       	ldi	r20, 0x04	; 4
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	85 e4       	ldi	r24, 0x45	; 69
    1788:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    178c:	23 e0       	ldi	r18, 0x03	; 3
    178e:	44 e0       	ldi	r20, 0x04	; 4
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	85 e4       	ldi	r24, 0x45	; 69
    1794:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    1798:	28 e0       	ldi	r18, 0x08	; 8
    179a:	45 e0       	ldi	r20, 0x05	; 5
    179c:	60 e0       	ldi	r22, 0x00	; 0
    179e:	87 e4       	ldi	r24, 0x47	; 71
    17a0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    17a4:	24 e0       	ldi	r18, 0x04	; 4
    17a6:	45 e0       	ldi	r20, 0x05	; 5
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	85 e4       	ldi	r24, 0x45	; 69
    17ac:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    17b0:	23 e0       	ldi	r18, 0x03	; 3
    17b2:	45 e0       	ldi	r20, 0x05	; 5
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	85 e4       	ldi	r24, 0x45	; 69
    17b8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    17bc:	24 e0       	ldi	r18, 0x04	; 4
    17be:	45 e0       	ldi	r20, 0x05	; 5
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	87 e4       	ldi	r24, 0x47	; 71
    17c4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    17c8:	28 e0       	ldi	r18, 0x08	; 8
    17ca:	45 e0       	ldi	r20, 0x05	; 5
    17cc:	61 e0       	ldi	r22, 0x01	; 1
    17ce:	87 e4       	ldi	r24, 0x47	; 71
    17d0:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <play_note>

000017d4 <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	89 f0       	breq	.+34     	; 0x17fa <play_song+0x26>
    17d8:	60 f0       	brcs	.+24     	; 0x17f2 <play_song+0x1e>
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	31 f0       	breq	.+12     	; 0x17ea <play_song+0x16>
    17de:	83 30       	cpi	r24, 0x03	; 3
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    17e2:	86 2f       	mov	r24, r22
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    17ea:	86 2f       	mov	r24, r22
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    17f2:	86 2f       	mov	r24, r22
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0c 94 00 05 	jmp	0xa00	; 0xa00 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    17fa:	86 2f       	mov	r24, r22
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <song1>

00001802 <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1802:	10 92 27 01 	sts	0x0127, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1806:	8e b5       	in	r24, 0x2e	; 46
    1808:	8c 7f       	andi	r24, 0xFC	; 252
    180a:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    180c:	92 9a       	sbi	0x12, 2	; 18
    180e:	08 95       	ret

00001810 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    1810:	10 92 27 01 	sts	0x0127, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    1814:	8e b5       	in	r24, 0x2e	; 46
    1816:	83 60       	ori	r24, 0x03	; 3
    1818:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    181a:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    181c:	60 91 27 01 	lds	r22, 0x0127
    1820:	80 91 34 01 	lds	r24, 0x0134
    1824:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <play_song>

00001828 <music_init>:
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    1828:	87 b7       	in	r24, 0x37	; 55
    182a:	80 61       	ori	r24, 0x10	; 16
    182c:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
    182e:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    1830:	8e b5       	in	r24, 0x2e	; 46
    1832:	88 60       	ori	r24, 0x08	; 8
    1834:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
    1836:	10 92 7a 00 	sts	0x007A, r1
  OCR1A = 0x0031;        //(use to vary alarm frequency)
    183a:	81 e3       	ldi	r24, 0x31	; 49
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9b bd       	out	0x2b, r25	; 43
    1840:	8a bd       	out	0x2a, r24	; 42
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1842:	10 92 27 01 	sts	0x0127, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    1846:	8e b5       	in	r24, 0x2e	; 46
    1848:	8c 7f       	andi	r24, 0xFC	; 252
    184a:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    184c:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
    184e:	10 92 38 01 	sts	0x0138, r1
    1852:	10 92 37 01 	sts	0x0137, r1
  max_beat = 0;
    1856:	10 92 36 01 	sts	0x0136, r1
    185a:	10 92 35 01 	sts	0x0135, r1
  notes = 0;
    185e:	10 92 27 01 	sts	0x0127, r1
  song = 0;              //beaver fight song
    1862:	10 92 34 01 	sts	0x0134, r1
    1866:	08 95       	ret

00001868 <__vector_12>:
/*********************************************************************/
/*                             TIMER1_COMPA                          */
/*Oscillates pin7, PORTD for alarm tone output                       */
/*********************************************************************/

ISR(TIMER1_COMPA_vect) {
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	0b b6       	in	r0, 0x3b	; 59
    1874:	0f 92       	push	r0
    1876:	2f 93       	push	r18
    1878:	3f 93       	push	r19
    187a:	4f 93       	push	r20
    187c:	5f 93       	push	r21
    187e:	6f 93       	push	r22
    1880:	7f 93       	push	r23
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
    188a:	ef 93       	push	r30
    188c:	ff 93       	push	r31
  PORTD ^= ALARM_PIN;      //flips the bit, creating a tone
    188e:	82 b3       	in	r24, 0x12	; 18
    1890:	80 58       	subi	r24, 0x80	; 128
    1892:	82 bb       	out	0x12, r24	; 18
  if(beat >= max_beat) {   //if we've played the note long enough
    1894:	20 91 37 01 	lds	r18, 0x0137
    1898:	30 91 38 01 	lds	r19, 0x0138
    189c:	80 91 35 01 	lds	r24, 0x0135
    18a0:	90 91 36 01 	lds	r25, 0x0136
    18a4:	28 17       	cp	r18, r24
    18a6:	39 07       	cpc	r19, r25
    18a8:	58 f0       	brcs	.+22     	; 0x18c0 <__vector_12+0x58>
    notes++;               //move on to the next note
    18aa:	80 91 27 01 	lds	r24, 0x0127
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	80 93 27 01 	sts	0x0127, r24
    play_song(song, notes);//and play it
    18b4:	60 91 27 01 	lds	r22, 0x0127
    18b8:	80 91 34 01 	lds	r24, 0x0134
    18bc:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <play_song>
  }
}
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	bf 91       	pop	r27
    18c6:	af 91       	pop	r26
    18c8:	9f 91       	pop	r25
    18ca:	8f 91       	pop	r24
    18cc:	7f 91       	pop	r23
    18ce:	6f 91       	pop	r22
    18d0:	5f 91       	pop	r21
    18d2:	4f 91       	pop	r20
    18d4:	3f 91       	pop	r19
    18d6:	2f 91       	pop	r18
    18d8:	0f 90       	pop	r0
    18da:	0b be       	out	0x3b, r0	; 59
    18dc:	0f 90       	pop	r0
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	0f 90       	pop	r0
    18e2:	1f 90       	pop	r1
    18e4:	18 95       	reti

000018e6 <chk_buttons>:
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    18e6:	20 91 1e 01 	lds	r18, 0x011E
    18ea:	30 91 1f 01 	lds	r19, 0x011F
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	49 b3       	in	r20, 0x19	; 25
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <chk_buttons+0x16>
    18f8:	55 95       	asr	r21
    18fa:	47 95       	ror	r20
    18fc:	8a 95       	dec	r24
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <chk_buttons+0x12>
    1900:	40 fd       	sbrc	r20, 0
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <chk_buttons+0x3a>
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 ee       	ldi	r25, 0xE0	; 224
    1908:	28 2b       	or	r18, r24
    190a:	39 2b       	or	r19, r25
    190c:	30 93 1f 01 	sts	0x011F, r19
    1910:	20 93 1e 01 	sts	0x011E, r18
    if (state == 0xF000){
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	21 15       	cp	r18, r1
    1918:	30 4f       	sbci	r19, 0xF0	; 240
    191a:	09 f0       	breq	.+2      	; 0x191e <chk_buttons+0x38>
    191c:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
    }
    return 0;
}
    191e:	08 95       	ret
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 ee       	ldi	r25, 0xE0	; 224
    1924:	f1 cf       	rjmp	.-30     	; 0x1908 <chk_buttons+0x22>

00001926 <int2seg>:
//***********************************************************************************
// int2seg
// return the 7-segment code for each digit
//***********************************************************************************
uint8_t int2seg(uint8_t number){
    if(number == 0 ){
    1926:	81 11       	cpse	r24, r1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <int2seg+0x8>
	return ZERO;
    192a:	80 ec       	ldi	r24, 0xC0	; 192
    192c:	08 95       	ret
    }
    else if(number == 1 ){
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 f0       	breq	.+36     	; 0x1956 <int2seg+0x30>
	return ONE;
    }
    else if(number == 2 ){
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	91 f0       	breq	.+36     	; 0x195a <int2seg+0x34>
	return TWO;
    }
    else if(number == 3 ){
    1936:	83 30       	cpi	r24, 0x03	; 3
    1938:	a1 f0       	breq	.+40     	; 0x1962 <int2seg+0x3c>
	return THREE;
    }
    else if(number == 4 ){
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	81 f0       	breq	.+32     	; 0x195e <int2seg+0x38>
	return FOUR;
    }
    else if(number == 5 ){
    193e:	85 30       	cpi	r24, 0x05	; 5
    1940:	91 f0       	breq	.+36     	; 0x1966 <int2seg+0x40>
	return FIVE;
    }
    else if(number == 6 ){
    1942:	86 30       	cpi	r24, 0x06	; 6
    1944:	91 f0       	breq	.+36     	; 0x196a <int2seg+0x44>
	return  SIX;
    }
    else if(number == 7 ){
    1946:	87 30       	cpi	r24, 0x07	; 7
    1948:	91 f0       	breq	.+36     	; 0x196e <int2seg+0x48>
	return SEVEN;
    }
    else if(number == 8 ){
    194a:	88 30       	cpi	r24, 0x08	; 8
    194c:	91 f0       	breq	.+36     	; 0x1972 <int2seg+0x4c>
	return EIGHT;
    }
    else if(number == 9 ){
    194e:	89 30       	cpi	r24, 0x09	; 9
    1950:	91 f0       	breq	.+36     	; 0x1976 <int2seg+0x50>
	return NINE;
    }
    else{ 
	return 0;
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	08 95       	ret
uint8_t int2seg(uint8_t number){
    if(number == 0 ){
	return ZERO;
    }
    else if(number == 1 ){
	return ONE;
    1956:	89 ef       	ldi	r24, 0xF9	; 249
    1958:	08 95       	ret
    }
    else if(number == 2 ){
	return TWO;
    195a:	84 ea       	ldi	r24, 0xA4	; 164
    195c:	08 95       	ret
    }
    else if(number == 3 ){
	return THREE;
    }
    else if(number == 4 ){
	return FOUR;
    195e:	89 e9       	ldi	r24, 0x99	; 153
    1960:	08 95       	ret
    }
    else if(number == 2 ){
	return TWO;
    }
    else if(number == 3 ){
	return THREE;
    1962:	80 eb       	ldi	r24, 0xB0	; 176
    1964:	08 95       	ret
    }
    else if(number == 4 ){
	return FOUR;
    }
    else if(number == 5 ){
	return FIVE;
    1966:	82 e9       	ldi	r24, 0x92	; 146
    1968:	08 95       	ret
    }
    else if(number == 6 ){
	return  SIX;
    196a:	82 e8       	ldi	r24, 0x82	; 130
    196c:	08 95       	ret
    }
    else if(number == 7 ){
	return SEVEN;
    196e:	88 ef       	ldi	r24, 0xF8	; 248
	return NINE;
    }
    else{ 
	return 0;
    }
}
    1970:	08 95       	ret
    }
    else if(number == 7 ){
	return SEVEN;
    }
    else if(number == 8 ){
	return EIGHT;
    1972:	80 e8       	ldi	r24, 0x80	; 128
    1974:	08 95       	ret
    }
    else if(number == 9 ){
	return NINE;
    1976:	80 e9       	ldi	r24, 0x90	; 144
    1978:	08 95       	ret

0000197a <segsum>:
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************

void segsum(uint16_t sum) {
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	ec 01       	movw	r28, r24
    //determine how many digits there are 
    //int digit;
    // Break down the digits
    
    if(ticker%2 == 1){
    1984:	80 91 20 01 	lds	r24, 0x0120
    1988:	80 ff       	sbrs	r24, 0
    198a:	79 c0       	rjmp	.+242    	; 0x1a7e <segsum+0x104>
	segment_data[2] = 0xFC;
    198c:	8c ef       	ldi	r24, 0xFC	; 252
    198e:	80 93 3c 01 	sts	0x013C, r24
	segment_data[2] = 0xFF;
    } 
    //When setting alarm is on)
    //break up decimal sum into 4 digit-segments
    
    segment_data[0] = int2seg(sum % 10); //ones
    1992:	9e 01       	movw	r18, r28
    1994:	ad ec       	ldi	r26, 0xCD	; 205
    1996:	bc ec       	ldi	r27, 0xCC	; 204
    1998:	0e 94 65 10 	call	0x20ca	; 0x20ca <__umulhisi3>
    199c:	96 95       	lsr	r25
    199e:	87 95       	ror	r24
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	96 95       	lsr	r25
    19a6:	87 95       	ror	r24
    19a8:	3c 2f       	mov	r19, r28
    19aa:	2a e0       	ldi	r18, 0x0A	; 10
    19ac:	82 9f       	mul	r24, r18
    19ae:	30 19       	sub	r19, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	83 2f       	mov	r24, r19
    19b4:	0e 94 93 0c 	call	0x1926	; 0x1926 <int2seg>
    19b8:	80 93 3a 01 	sts	0x013A, r24
    segment_data[1] = int2seg((sum % 100)/10); //tens
    19bc:	9e 01       	movw	r18, r28
    19be:	36 95       	lsr	r19
    19c0:	27 95       	ror	r18
    19c2:	36 95       	lsr	r19
    19c4:	27 95       	ror	r18
    19c6:	ab e7       	ldi	r26, 0x7B	; 123
    19c8:	b4 e1       	ldi	r27, 0x14	; 20
    19ca:	0e 94 65 10 	call	0x20ca	; 0x20ca <__umulhisi3>
    19ce:	96 95       	lsr	r25
    19d0:	87 95       	ror	r24
    19d2:	44 e6       	ldi	r20, 0x64	; 100
    19d4:	48 9f       	mul	r20, r24
    19d6:	90 01       	movw	r18, r0
    19d8:	49 9f       	mul	r20, r25
    19da:	30 0d       	add	r19, r0
    19dc:	11 24       	eor	r1, r1
    19de:	ce 01       	movw	r24, r28
    19e0:	82 1b       	sub	r24, r18
    19e2:	93 0b       	sbc	r25, r19
    19e4:	9c 01       	movw	r18, r24
    19e6:	ad ec       	ldi	r26, 0xCD	; 205
    19e8:	bc ec       	ldi	r27, 0xCC	; 204
    19ea:	0e 94 65 10 	call	0x20ca	; 0x20ca <__umulhisi3>
    19ee:	96 95       	lsr	r25
    19f0:	87 95       	ror	r24
    19f2:	96 95       	lsr	r25
    19f4:	87 95       	ror	r24
    19f6:	96 95       	lsr	r25
    19f8:	87 95       	ror	r24
    19fa:	0e 94 93 0c 	call	0x1926	; 0x1926 <int2seg>
    19fe:	80 93 3b 01 	sts	0x013B, r24
    //segment_data[2] = 1; //decimal
    segment_data[3] = int2seg((sum % 1000)/100); //hundreds
    1a02:	9e 01       	movw	r18, r28
    1a04:	36 95       	lsr	r19
    1a06:	27 95       	ror	r18
    1a08:	36 95       	lsr	r19
    1a0a:	27 95       	ror	r18
    1a0c:	36 95       	lsr	r19
    1a0e:	27 95       	ror	r18
    1a10:	a5 ec       	ldi	r26, 0xC5	; 197
    1a12:	b0 e2       	ldi	r27, 0x20	; 32
    1a14:	0e 94 65 10 	call	0x20ca	; 0x20ca <__umulhisi3>
    1a18:	8c 01       	movw	r16, r24
    1a1a:	12 95       	swap	r17
    1a1c:	02 95       	swap	r16
    1a1e:	0f 70       	andi	r16, 0x0F	; 15
    1a20:	01 27       	eor	r16, r17
    1a22:	1f 70       	andi	r17, 0x0F	; 15
    1a24:	01 27       	eor	r16, r17
    1a26:	28 ee       	ldi	r18, 0xE8	; 232
    1a28:	33 e0       	ldi	r19, 0x03	; 3
    1a2a:	02 9f       	mul	r16, r18
    1a2c:	c0 01       	movw	r24, r0
    1a2e:	03 9f       	mul	r16, r19
    1a30:	90 0d       	add	r25, r0
    1a32:	12 9f       	mul	r17, r18
    1a34:	90 0d       	add	r25, r0
    1a36:	11 24       	eor	r1, r1
    1a38:	9e 01       	movw	r18, r28
    1a3a:	28 1b       	sub	r18, r24
    1a3c:	39 0b       	sbc	r19, r25
    1a3e:	36 95       	lsr	r19
    1a40:	27 95       	ror	r18
    1a42:	36 95       	lsr	r19
    1a44:	27 95       	ror	r18
    1a46:	ab e7       	ldi	r26, 0x7B	; 123
    1a48:	b4 e1       	ldi	r27, 0x14	; 20
    1a4a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__umulhisi3>
    1a4e:	96 95       	lsr	r25
    1a50:	87 95       	ror	r24
    1a52:	0e 94 93 0c 	call	0x1926	; 0x1926 <int2seg>
    1a56:	80 93 3d 01 	sts	0x013D, r24
    segment_data[4] = int2seg(sum/1000); //thousands
    1a5a:	80 2f       	mov	r24, r16
    1a5c:	0e 94 93 0c 	call	0x1926	; 0x1926 <int2seg>
    1a60:	80 93 3e 01 	sts	0x013E, r24
    //blank out leading zero digits 
    //now move data to right place for misplaced colon position
    if(mode == 3){
    1a64:	80 91 26 01 	lds	r24, 0x0126
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	f9 f0       	breq	.+62     	; 0x1aaa <segsum+0x130>
	//segment_data[4] = 0xFF;
	// segment_data[3] = 0xFF;
	segment_data[2] = 0xFF;
    }

    else if(mode == 2){
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	29 f1       	breq	.+74     	; 0x1aba <segsum+0x140>
	segment_data[2] = 0x00;
    }                                         
    else if(mode == 1 && blink){
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	49 f0       	breq	.+18     	; 0x1a86 <segsum+0x10c>
	segment_data[4] = 0xFF;
	segment_data[3] = 0xFF;
	segment_data[1] = 0xFF;
	segment_data[0] = 0xFF;
    }
}//segment_sum
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	08 95       	ret
    
    if(ticker%2 == 1){
	segment_data[2] = 0xFC;
    }
    else{
	segment_data[2] = 0xFF;
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	80 93 3c 01 	sts	0x013C, r24
    1a84:	86 cf       	rjmp	.-244    	; 0x1992 <segsum+0x18>
    }

    else if(mode == 2){
	segment_data[2] = 0x00;
    }                                         
    else if(mode == 1 && blink){
    1a86:	80 91 10 01 	lds	r24, 0x0110
    1a8a:	88 23       	and	r24, r24
    1a8c:	99 f3       	breq	.-26     	; 0x1a74 <segsum+0xfa>
	segment_data[4] = 0xFF;
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	80 93 3e 01 	sts	0x013E, r24
	segment_data[3] = 0xFF;
    1a94:	80 93 3d 01 	sts	0x013D, r24
	segment_data[1] = 0xFF;
    1a98:	80 93 3b 01 	sts	0x013B, r24
	segment_data[0] = 0xFF;
    1a9c:	80 93 3a 01 	sts	0x013A, r24
    }
}//segment_sum
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	08 95       	ret
    //blank out leading zero digits 
    //now move data to right place for misplaced colon position
    if(mode == 3){
	//segment_data[4] = 0xFF;
	// segment_data[3] = 0xFF;
	segment_data[2] = 0xFF;
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	80 93 3c 01 	sts	0x013C, r24
	segment_data[4] = 0xFF;
	segment_data[3] = 0xFF;
	segment_data[1] = 0xFF;
	segment_data[0] = 0xFF;
    }
}//segment_sum
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	08 95       	ret
	// segment_data[3] = 0xFF;
	segment_data[2] = 0xFF;
    }

    else if(mode == 2){
	segment_data[2] = 0x00;
    1aba:	10 92 3c 01 	sts	0x013C, r1
	segment_data[4] = 0xFF;
	segment_data[3] = 0xFF;
	segment_data[1] = 0xFF;
	segment_data[0] = 0xFF;
    }
}//segment_sum
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret

00001ac8 <button_routine>:
//***********************************************************************************
void button_routine(){
    uint8_t button = 0;
    int previous_mode;   
    DDRA  = 0x00; // PORTA input mode
    1ac8:	1a ba       	out	0x1a, r1	; 26
    PORTA = 0xFF; //Pull ups
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	8b bb       	out	0x1b, r24	; 27
    __asm__ __volatile__ ("nop");
    1ace:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1ad0:	00 00       	nop
    //enable tristate buffer for pushbutton switches
    PORTB |= 0x70; //Set S2,S1,S0 to 111
    1ad2:	88 b3       	in	r24, 0x18	; 24
    1ad4:	80 67       	ori	r24, 0x70	; 112
    1ad6:	88 bb       	out	0x18, r24	; 24
    __asm__ __volatile__ ("nop");
    1ad8:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1ada:	00 00       	nop
    //now check each button and increment the count as needed
    previous_mode = mode;
    1adc:	e0 91 26 01 	lds	r30, 0x0126
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	20 91 1e 01 	lds	r18, 0x011E
    1ae6:	30 91 1f 01 	lds	r19, 0x011F
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    1aee:	a9 01       	movw	r20, r18
    1af0:	44 0f       	add	r20, r20
    1af2:	55 1f       	adc	r21, r21
    1af4:	29 b3       	in	r18, 0x19	; 25
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	bc 01       	movw	r22, r24
    1afa:	61 50       	subi	r22, 0x01	; 1
    1afc:	71 09       	sbc	r23, r1
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <button_routine+0x3c>
    1b00:	35 95       	asr	r19
    1b02:	27 95       	ror	r18
    1b04:	6a 95       	dec	r22
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <button_routine+0x38>
    1b08:	20 fd       	sbrc	r18, 0
    1b0a:	11 c0       	rjmp	.+34     	; 0x1b2e <button_routine+0x66>
    1b0c:	21 e0       	ldi	r18, 0x01	; 1
    1b0e:	30 ee       	ldi	r19, 0xE0	; 224
    1b10:	24 2b       	or	r18, r20
    1b12:	35 2b       	or	r19, r21
    1b14:	30 93 1f 01 	sts	0x011F, r19
    1b18:	20 93 1e 01 	sts	0x011E, r18
    if (state == 0xF000){
    1b1c:	21 15       	cp	r18, r1
    1b1e:	40 ef       	ldi	r20, 0xF0	; 240
    1b20:	34 07       	cpc	r19, r20
    1b22:	41 f0       	breq	.+16     	; 0x1b34 <button_routine+0x6c>
    1b24:	01 96       	adiw	r24, 0x01	; 1
    __asm__ __volatile__ ("nop");
    //now check each button and increment the count as needed
    previous_mode = mode;

    
    for (button = 0 ; button < BUTTON_COUNT ; button++){
    1b26:	85 30       	cpi	r24, 0x05	; 5
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f7       	brne	.-62     	; 0x1aee <button_routine+0x26>
    1b2c:	08 95       	ret
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 ee       	ldi	r19, 0xE0	; 224
    1b32:	ee cf       	rjmp	.-36     	; 0x1b10 <button_routine+0x48>

    
    for (button = 0 ; button < BUTTON_COUNT ; button++){
	if (chk_buttons(button)){
	    //Check the state of buttons
	    if(previous_mode == button + 1 ){
    1b34:	8e 17       	cp	r24, r30
    1b36:	9f 07       	cpc	r25, r31
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <button_routine+0x78>
		mode = 0;
		return;
	    }
	    else{
		mode = button+1;
    1b3a:	80 93 26 01 	sts	0x0126, r24
    1b3e:	f2 cf       	rjmp	.-28     	; 0x1b24 <button_routine+0x5c>
    
    for (button = 0 ; button < BUTTON_COUNT ; button++){
	if (chk_buttons(button)){
	    //Check the state of buttons
	    if(previous_mode == button + 1 ){
		mode = 0;
    1b40:	10 92 26 01 	sts	0x0126, r1
		return;
    1b44:	08 95       	ret

00001b46 <__vector_16>:
  Interrupt routine: set flag for checking button in main
  (Might cause an issue if button check takes too long to run, it will become
  polling instead of interrupt. Tried putting button routine in the ISR,
  LED dims
 ****************************************************************************/
ISR(TIMER0_OVF_vect){
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	2f 93       	push	r18
    1b52:	8f 93       	push	r24
    1b54:	9f 93       	push	r25
    static uint8_t count = 0;
    count++;
    1b56:	80 91 1d 01 	lds	r24, 0x011D
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	80 93 1d 01 	sts	0x011D, r24
    //update_time();
    if((count%32) == 0){
    1b60:	98 2f       	mov	r25, r24
    1b62:	9f 71       	andi	r25, 0x1F	; 31
    1b64:	39 f4       	brne	.+14     	; 0x1b74 <__vector_16+0x2e>
	blink = !blink;
    1b66:	91 e0       	ldi	r25, 0x01	; 1
    1b68:	20 91 10 01 	lds	r18, 0x0110
    1b6c:	21 11       	cpse	r18, r1
    1b6e:	16 c0       	rjmp	.+44     	; 0x1b9c <__vector_16+0x56>
    1b70:	90 93 10 01 	sts	0x0110, r25
    }
    if((count%128)==0){
    1b74:	8f 77       	andi	r24, 0x7F	; 127
    1b76:	51 f4       	brne	.+20     	; 0x1b8c <__vector_16+0x46>
	ticker++;     
    1b78:	80 91 20 01 	lds	r24, 0x0120
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	80 93 20 01 	sts	0x0120, r24
	second++;    
    1b82:	80 91 25 01 	lds	r24, 0x0125
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	80 93 25 01 	sts	0x0125, r24
    }

}
    1b8c:	9f 91       	pop	r25
    1b8e:	8f 91       	pop	r24
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	0f 90       	pop	r0
    1b98:	1f 90       	pop	r1
    1b9a:	18 95       	reti
ISR(TIMER0_OVF_vect){
    static uint8_t count = 0;
    count++;
    //update_time();
    if((count%32) == 0){
	blink = !blink;
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	e8 cf       	rjmp	.-48     	; 0x1b70 <__vector_16+0x2a>

00001ba0 <__vector_21>:
	    break;	    
	default:
	    break;
    }
}
ISR(ADC_vect){
    1ba0:	1f 92       	push	r1
    1ba2:	0f 92       	push	r0
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	0f 92       	push	r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	8f 93       	push	r24
    1bac:	9f 93       	push	r25
    //brightness_level = 255 - ADC;

    if(ADCH < 100){
    1bae:	85 b1       	in	r24, 0x05	; 5
    1bb0:	84 36       	cpi	r24, 0x64	; 100
    1bb2:	48 f0       	brcs	.+18     	; 0x1bc6 <__vector_21+0x26>
	OCR2 = 100-ADCH;
    }  
    else{
	OCR2 = 1;// brightness_level;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	83 bd       	out	0x23, r24	; 35
    }
    //OCR2 =150;
    //second++;
    //ADCSRA |= (1<<ADSC);
    //second++;
}
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	0f 90       	pop	r0
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	0f 90       	pop	r0
    1bc2:	1f 90       	pop	r1
    1bc4:	18 95       	reti
}
ISR(ADC_vect){
    //brightness_level = 255 - ADC;

    if(ADCH < 100){
	OCR2 = 100-ADCH;
    1bc6:	95 b1       	in	r25, 0x05	; 5
    1bc8:	84 e6       	ldi	r24, 0x64	; 100
    1bca:	89 1b       	sub	r24, r25
    1bcc:	83 bd       	out	0x23, r24	; 35
    }
    //OCR2 =150;
    //second++;
    //ADCSRA |= (1<<ADSC);
    //second++;
}
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <update_time>:
/***************************************************************************
  Initialize SPI 
 ****************************************************************************/
void update_time(void){

    if (second >= 60){
    1bdc:	80 91 25 01 	lds	r24, 0x0125
    1be0:	8c 33       	cpi	r24, 0x3C	; 60
    1be2:	10 f5       	brcc	.+68     	; 0x1c28 <update_time+0x4c>
    1be4:	80 91 24 01 	lds	r24, 0x0124
	minute++;
	second = 0;
    }             
    if(minute >=60){
	hour++;
    1be8:	20 91 23 01 	lds	r18, 0x0123

    if (second >= 60){
	minute++;
	second = 0;
    }             
    if(minute >=60){
    1bec:	8c 33       	cpi	r24, 0x3C	; 60
    1bee:	38 f5       	brcc	.+78     	; 0x1c3e <update_time+0x62>
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
	hour++;
	minute = 0;
    }
    if(hour >= 24){
    1bf2:	28 31       	cpi	r18, 0x18	; 24
    1bf4:	68 f1       	brcs	.+90     	; 0x1c50 <update_time+0x74>
	hour = 0;
    1bf6:	10 92 23 01 	sts	0x0123, r1
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
      alarm_hour = 0;
      }*/    

    //update_number();
    //time = (minute * 100) + second;
    time = (hour * 100) + minute;
    1bfe:	82 0f       	add	r24, r18
    1c00:	93 1f       	adc	r25, r19
    1c02:	90 93 15 01 	sts	0x0115, r25
    1c06:	80 93 14 01 	sts	0x0114, r24
    //time = 100;  
    alarm_time = (alarm_hour * 100) + alarm_minute;
    1c0a:	20 91 21 01 	lds	r18, 0x0121
    1c0e:	80 91 22 01 	lds	r24, 0x0122
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	34 e6       	ldi	r19, 0x64	; 100
    1c16:	23 9f       	mul	r18, r19
    1c18:	80 0d       	add	r24, r0
    1c1a:	91 1d       	adc	r25, r1
    1c1c:	11 24       	eor	r1, r1
    1c1e:	90 93 13 01 	sts	0x0113, r25
    1c22:	80 93 12 01 	sts	0x0112, r24
    1c26:	08 95       	ret
  Initialize SPI 
 ****************************************************************************/
void update_time(void){

    if (second >= 60){
	minute++;
    1c28:	80 91 24 01 	lds	r24, 0x0124
    1c2c:	8f 5f       	subi	r24, 0xFF	; 255
    1c2e:	80 93 24 01 	sts	0x0124, r24
	second = 0;
    1c32:	10 92 25 01 	sts	0x0125, r1
    }             
    if(minute >=60){
	hour++;
    1c36:	20 91 23 01 	lds	r18, 0x0123

    if (second >= 60){
	minute++;
	second = 0;
    }             
    if(minute >=60){
    1c3a:	8c 33       	cpi	r24, 0x3C	; 60
    1c3c:	c8 f2       	brcs	.-78     	; 0x1bf0 <update_time+0x14>
	hour++;
    1c3e:	2f 5f       	subi	r18, 0xFF	; 255
    1c40:	20 93 23 01 	sts	0x0123, r18
	minute = 0;
    1c44:	10 92 24 01 	sts	0x0124, r1
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    }
    if(hour >= 24){
    1c4c:	28 31       	cpi	r18, 0x18	; 24
    1c4e:	98 f6       	brcc	.-90     	; 0x1bf6 <update_time+0x1a>
    1c50:	44 e6       	ldi	r20, 0x64	; 100
    1c52:	24 9f       	mul	r18, r20
    1c54:	90 01       	movw	r18, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	d2 cf       	rjmp	.-92     	; 0x1bfe <update_time+0x22>

00001c5a <SPI_init>:
void SPI_init(){
    /* Set MOSI and SCK output, all others input */
    //DDRB = (1<<PB3)|(1<<PB1);

    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1c5a:	81 e5       	ldi	r24, 0x51	; 81
    1c5c:	8d b9       	out	0x0d, r24	; 13
    1c5e:	08 95       	ret

00001c60 <SPI_Transmit>:

/***************************************************************************
  Transmit data to SPI
 ****************************************************************************/
void SPI_Transmit(uint8_t data){
    SPDR = data;    //Write data to SPDR
    1c60:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1<<SPIF))){} //SPIN write
    1c62:	77 9b       	sbis	0x0e, 7	; 14
    1c64:	fe cf       	rjmp	.-4      	; 0x1c62 <SPI_Transmit+0x2>
}
    1c66:	08 95       	ret

00001c68 <SPI_Receive>:

/***************************************************************************
  Read data from SPI input (SPDR)
 ****************************************************************************/
uint8_t SPI_Receive(void){
    PORTE &= 0;       //Write 0 to PE6 to trigger SPI on radio board
    1c68:	83 b1       	in	r24, 0x03	; 3
    1c6a:	13 b8       	out	0x03, r1	; 3
    __asm__ __volatile__ ("nop");
    1c6c:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1c6e:	00 00       	nop
    // Wait until 8 clock cycles are done 
    SPDR = 0x00;     //Write 1 to set the SPI slave input to one (wait for read)
    1c70:	1f b8       	out	0x0f, r1	; 15
    PORTE |= (1 << PE6);  
    1c72:	1e 9a       	sbi	0x03, 6	; 3
    __asm__ __volatile__ ("nop");
    1c74:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1c76:	00 00       	nop
    while (bit_is_clear(SPSR,SPIF)){} //SPIN read 
    1c78:	77 9b       	sbis	0x0e, 7	; 14
    1c7a:	fe cf       	rjmp	.-4      	; 0x1c78 <SPI_Receive+0x10>
    // Return incoming data from SPDR
    return(SPDR);  
    1c7c:	8f b1       	in	r24, 0x0f	; 15
}
    1c7e:	08 95       	ret

00001c80 <bar_graph>:
 *void bar_graph()
 *show selected modes on the bar graph
 **************************************************************************/
void bar_graph(){

    if(mode == 0){
    1c80:	80 91 26 01 	lds	r24, 0x0126
    1c84:	81 11       	cpse	r24, r1
    1c86:	0e c0       	rjmp	.+28     	; 0x1ca4 <bar_graph+0x24>
	write = 0x00;
    1c88:	10 92 11 01 	sts	0x0111, r1

/***************************************************************************
  Transmit data to SPI
 ****************************************************************************/
void SPI_Transmit(uint8_t data){
    SPDR = data;    //Write data to SPDR
    1c8c:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1<<SPIF))){} //SPIN write
    1c8e:	77 9b       	sbis	0x0e, 7	; 14
    1c90:	fe cf       	rjmp	.-4      	; 0x1c8e <bar_graph+0xe>
    else{
	write = 1<<(mode-1);
    }
    //Write the bargraph to SPI
    SPI_Transmit(write);
    PORTD = (1 << PD2);  //Push data out of SPI
    1c92:	84 e0       	ldi	r24, 0x04	; 4
    1c94:	82 bb       	out	0x12, r24	; 18
    __asm__ __volatile__ ("nop"); //Buffer
    1c96:	00 00       	nop
    __asm__ __volatile__ ("nop");  //Buffer
    1c98:	00 00       	nop


    PORTD = (2 << PD2);  // Push data out of SPI
    1c9a:	88 e0       	ldi	r24, 0x08	; 8
    1c9c:	82 bb       	out	0x12, r24	; 18
    __asm__ __volatile__ ("nop");  //Buffer
    1c9e:	00 00       	nop
    __asm__ __volatile__ ("nop");  //Buffer
    1ca0:	00 00       	nop
    1ca2:	08 95       	ret
void bar_graph(){

    if(mode == 0){
	write = 0x00;
    }
    else if(mode == 2){
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <bar_graph+0x40>
	write = 0xFF;
    }
    else{
	write = 1<<(mode-1);
    1ca8:	2f ef       	ldi	r18, 0xFF	; 255
    1caa:	28 0f       	add	r18, r24
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 2e       	mov	r0, r18
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <bar_graph+0x36>
    1cb4:	88 0f       	add	r24, r24
    1cb6:	0a 94       	dec	r0
    1cb8:	ea f7       	brpl	.-6      	; 0x1cb4 <bar_graph+0x34>
    1cba:	80 93 11 01 	sts	0x0111, r24
    1cbe:	e6 cf       	rjmp	.-52     	; 0x1c8c <bar_graph+0xc>

    if(mode == 0){
	write = 0x00;
    }
    else if(mode == 2){
	write = 0xFF;
    1cc0:	8f ef       	ldi	r24, 0xFF	; 255
    1cc2:	80 93 11 01 	sts	0x0111, r24
    1cc6:	e2 cf       	rjmp	.-60     	; 0x1c8c <bar_graph+0xc>

00001cc8 <display_update>:
 *Display the number (code from lab1)
 **************************************************************************/
void display_update(){
    uint8_t display_segment = 0;
    static uint8_t rotate_7seg = 0;
    DDRA = 0xFF;  //switch PORTA to output
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	8a bb       	out	0x1a, r24	; 26
    __asm__ __volatile__ ("nop"); //Buffer
    1ccc:	00 00       	nop
    __asm__ __volatile__ ("nop"); //Buffer 
    1cce:	00 00       	nop

    switch(mode){
    1cd0:	80 91 26 01 	lds	r24, 0x0126
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	19 f1       	breq	.+70     	; 0x1d1e <display_update+0x56>
    1cd8:	10 f1       	brcs	.+68     	; 0x1d1e <display_update+0x56>
    1cda:	82 30       	cpi	r24, 0x02	; 2
    1cdc:	c9 f0       	breq	.+50     	; 0x1d10 <display_update+0x48>
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	21 f4       	brne	.+8      	; 0x1cea <display_update+0x22>
	    break;
	case 2:
	    segsum(alarm_time);
	    break;
	case 3:
	    segsum(ADCH);
    1ce2:	85 b1       	in	r24, 0x05	; 5
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 bd 0c 	call	0x197a	; 0x197a <segsum>
    1cea:	ea e3       	ldi	r30, 0x3A	; 58
    1cec:	f1 e0       	ldi	r31, 0x01	; 1
    __asm__ __volatile__ ("nop");  //Buffer
}
/************************************************************************
 *Display the number (code from lab1)
 **************************************************************************/
void display_update(){
    1cee:	80 e0       	ldi	r24, 0x00	; 0

    for(display_segment = 0 ; display_segment < 5 ; display_segment++){
	PORTB = display_segment << 4;
	PORTA = segment_data[display_segment];
	_delay_us(10);
	PORTA = OFF;
    1cf0:	2f ef       	ldi	r18, 0xFF	; 255
	    //segsum(time);
	    break;
    }

    for(display_segment = 0 ; display_segment < 5 ; display_segment++){
	PORTB = display_segment << 4;
    1cf2:	98 2f       	mov	r25, r24
    1cf4:	92 95       	swap	r25
    1cf6:	90 7f       	andi	r25, 0xF0	; 240
    1cf8:	98 bb       	out	0x18, r25	; 24
	PORTA = segment_data[display_segment];
    1cfa:	91 91       	ld	r25, Z+
    1cfc:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cfe:	95 e3       	ldi	r25, 0x35	; 53
    1d00:	9a 95       	dec	r25
    1d02:	f1 f7       	brne	.-4      	; 0x1d00 <display_update+0x38>
    1d04:	00 00       	nop
	_delay_us(10);
	PORTA = OFF;
    1d06:	2b bb       	out	0x1b, r18	; 27
	default:
	    //segsum(time);
	    break;
    }

    for(display_segment = 0 ; display_segment < 5 ; display_segment++){
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	85 30       	cpi	r24, 0x05	; 5
    1d0c:	91 f7       	brne	.-28     	; 0x1cf2 <display_update+0x2a>
    //PORTB &= 0x8F;
    //PORTB |= rotate_7seg << 4;
    //PORTA = segment_data[rotate_7seg];	
    //rotate_7seg++;
    //_delay_us(0);
}
    1d0e:	08 95       	ret
	    break;
	case 1:
	    segsum(time);
	    break;
	case 2:
	    segsum(alarm_time);
    1d10:	80 91 12 01 	lds	r24, 0x0112
    1d14:	90 91 13 01 	lds	r25, 0x0113
    1d18:	0e 94 bd 0c 	call	0x197a	; 0x197a <segsum>
	    break;
    1d1c:	e6 cf       	rjmp	.-52     	; 0x1cea <display_update+0x22>
    __asm__ __volatile__ ("nop"); //Buffer
    __asm__ __volatile__ ("nop"); //Buffer 

    switch(mode){
	case 0:
	    segsum(time);
    1d1e:	80 91 14 01 	lds	r24, 0x0114
    1d22:	90 91 15 01 	lds	r25, 0x0115
    1d26:	0e 94 bd 0c 	call	0x197a	; 0x197a <segsum>
	    break;
    1d2a:	df cf       	rjmp	.-66     	; 0x1cea <display_update+0x22>

00001d2c <set_brightness>:
 - 1 == increase
 - 2 == decrease
 Brightness level goes from 1-10
 ***************************************************************************/
void set_brightness(int setting){
    if(setting == 1){
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	91 05       	cpc	r25, r1
    1d30:	69 f0       	breq	.+26     	; 0x1d4c <set_brightness+0x20>
	}
	else{
	    brightness_level++;
	}
    }
    else if(setting == 2){
    1d32:	02 97       	sbiw	r24, 0x02	; 2
    1d34:	09 f0       	breq	.+2      	; 0x1d38 <set_brightness+0xc>
    1d36:	08 95       	ret
	brightness_level--;
    1d38:	80 91 39 01 	lds	r24, 0x0139
    1d3c:	81 50       	subi	r24, 0x01	; 1
    1d3e:	80 93 39 01 	sts	0x0139, r24
	if(brightness_level >= 240){
    1d42:	80 3f       	cpi	r24, 0xF0	; 240
    1d44:	c0 f3       	brcs	.-16     	; 0x1d36 <set_brightness+0xa>
	    brightness_level = 0;
    1d46:	10 92 39 01 	sts	0x0139, r1
    1d4a:	08 95       	ret
 - 2 == decrease
 Brightness level goes from 1-10
 ***************************************************************************/
void set_brightness(int setting){
    if(setting == 1){
	if(brightness_level >= 9){
    1d4c:	80 91 39 01 	lds	r24, 0x0139
    1d50:	89 30       	cpi	r24, 0x09	; 9
    1d52:	20 f0       	brcs	.+8      	; 0x1d5c <set_brightness+0x30>
	    brightness_level = 9;
    1d54:	89 e0       	ldi	r24, 0x09	; 9
    1d56:	80 93 39 01 	sts	0x0139, r24
    1d5a:	08 95       	ret
	}
	else{
	    brightness_level++;
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	80 93 39 01 	sts	0x0139, r24
    1d62:	08 95       	ret

00001d64 <right_inc>:
/***************************************************************************
 * Knob handle
 * increment/decrement timers depending on the selected mode
 ****************************************************************************/
void right_inc(){
    switch(mode){
    1d64:	80 91 26 01 	lds	r24, 0x0126
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	59 f0       	breq	.+22     	; 0x1d82 <right_inc+0x1e>
    1d6c:	82 30       	cpi	r24, 0x02	; 2
    1d6e:	41 f4       	brne	.+16     	; 0x1d80 <right_inc+0x1c>
		minute = 0;	    
	    }
	    second++;
	    break;
	case 2: 
	    alarm_minute++;
    1d70:	80 91 22 01 	lds	r24, 0x0122
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
	    if(alarm_minute >= 60){
    1d76:	8c 33       	cpi	r24, 0x3C	; 60
    1d78:	88 f0       	brcs	.+34     	; 0x1d9c <right_inc+0x38>
		alarm_minute = 0;	
    1d7a:	10 92 22 01 	sts	0x0122, r1
    1d7e:	08 95       	ret
    1d80:	08 95       	ret
void right_inc(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    minute++;
    1d82:	80 91 24 01 	lds	r24, 0x0124
    1d86:	8f 5f       	subi	r24, 0xFF	; 255
	    if(minute >= 60){
    1d88:	8c 33       	cpi	r24, 0x3C	; 60
    1d8a:	58 f0       	brcs	.+22     	; 0x1da2 <right_inc+0x3e>
		minute = 0;	    
    1d8c:	10 92 24 01 	sts	0x0124, r1
	    }
	    second++;
    1d90:	80 91 25 01 	lds	r24, 0x0125
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	80 93 25 01 	sts	0x0125, r24
	    break;
    1d9a:	08 95       	ret
	case 2: 
	    alarm_minute++;
    1d9c:	80 93 22 01 	sts	0x0122, r24
    1da0:	08 95       	ret
void right_inc(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    minute++;
    1da2:	80 93 24 01 	sts	0x0124, r24
	    if(minute >= 60){
		minute = 0;	    
	    }
	    second++;
    1da6:	80 91 25 01 	lds	r24, 0x0125
    1daa:	8f 5f       	subi	r24, 0xFF	; 255
    1dac:	80 93 25 01 	sts	0x0125, r24
	    break;
    1db0:	08 95       	ret

00001db2 <right_dec>:
	default:
	    break;             
    }
}
void right_dec(){
    switch(mode){
    1db2:	80 91 26 01 	lds	r24, 0x0126
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	71 f0       	breq	.+28     	; 0x1dd6 <right_dec+0x24>
    1dba:	82 30       	cpi	r24, 0x02	; 2
    1dbc:	59 f4       	brne	.+22     	; 0x1dd4 <right_dec+0x22>
	    if(minute >= 240){
		minute = 59;	    
	    }   
	    break;
	case 2: 
	    alarm_minute--;
    1dbe:	80 91 22 01 	lds	r24, 0x0122
    1dc2:	81 50       	subi	r24, 0x01	; 1
    1dc4:	80 93 22 01 	sts	0x0122, r24
	    if(alarm_minute >= 240){
    1dc8:	80 3f       	cpi	r24, 0xF0	; 240
    1dca:	18 f0       	brcs	.+6      	; 0x1dd2 <right_dec+0x20>
		alarm_minute = 59;	
    1dcc:	8b e3       	ldi	r24, 0x3B	; 59
    1dce:	80 93 22 01 	sts	0x0122, r24
    1dd2:	08 95       	ret
    1dd4:	08 95       	ret
void right_dec(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    minute--;
    1dd6:	80 91 24 01 	lds	r24, 0x0124
    1dda:	81 50       	subi	r24, 0x01	; 1
    1ddc:	80 93 24 01 	sts	0x0124, r24
	    if(minute >= 240){
    1de0:	80 3f       	cpi	r24, 0xF0	; 240
    1de2:	b8 f3       	brcs	.-18     	; 0x1dd2 <right_dec+0x20>
		minute = 59;	    
    1de4:	8b e3       	ldi	r24, 0x3B	; 59
    1de6:	80 93 24 01 	sts	0x0124, r24
    1dea:	08 95       	ret

00001dec <decode_spi_right_knob>:
    previous_encoder1 = encoder1;
}
/*************************************************************************
  Exactly the same with decode_spi_left_knob(), only mask different bits 
 **************************************************************************/
void decode_spi_right_knob(uint8_t encoder2){
    1dec:	cf 93       	push	r28
    uint8_t sw_index = 0;
    static uint8_t acount2 = 0;
    static uint8_t previous_encoder2 = 0;
    uint8_t direction = 0;
    encoder2 = ENCODE_RIGHT_KNOB(encoder2);
    1dee:	c8 2f       	mov	r28, r24
    1df0:	c3 70       	andi	r28, 0x03	; 3
    sw_index = (previous_encoder2 << 2) | encoder2;
    1df2:	e0 91 17 01 	lds	r30, 0x0117
    1df6:	ee 0f       	add	r30, r30
    1df8:	ee 0f       	add	r30, r30
    1dfa:	ec 2b       	or	r30, r28
    direction = sw_table[sw_index];
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	e0 50       	subi	r30, 0x00	; 0
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	80 81       	ld	r24, Z
    //value = modeA;
    if(direction == CW){
    1e04:	81 30       	cpi	r24, 0x01	; 1
    1e06:	e9 f0       	breq	.+58     	; 0x1e42 <decode_spi_right_knob+0x56>
	acount2++;
    }	
    if(direction == CCW){
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	31 f0       	breq	.+12     	; 0x1e18 <decode_spi_right_knob+0x2c>
	acount2--;
    }
    if(encoder2 == 3){
    1e0c:	c3 30       	cpi	r28, 0x03	; 3
    1e0e:	59 f0       	breq	.+22     	; 0x1e26 <decode_spi_right_knob+0x3a>
	    right_dec();
	}
	//update_number();
	acount2 = 0;
    }
    previous_encoder2 = encoder2;
    1e10:	c0 93 17 01 	sts	0x0117, r28
}
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret
    //value = modeA;
    if(direction == CW){
	acount2++;
    }	
    if(direction == CCW){
	acount2--;
    1e18:	80 91 16 01 	lds	r24, 0x0116
    1e1c:	81 50       	subi	r24, 0x01	; 1
    1e1e:	80 93 16 01 	sts	0x0116, r24
    }
    if(encoder2 == 3){
    1e22:	c3 30       	cpi	r28, 0x03	; 3
    1e24:	a9 f7       	brne	.-22     	; 0x1e10 <decode_spi_right_knob+0x24>
	if((acount2 > 1) && (acount2 < 10)){
    1e26:	80 91 16 01 	lds	r24, 0x0116
    1e2a:	9e ef       	ldi	r25, 0xFE	; 254
    1e2c:	98 0f       	add	r25, r24
    1e2e:	98 30       	cpi	r25, 0x08	; 8
    1e30:	98 f0       	brcs	.+38     	; 0x1e58 <decode_spi_right_knob+0x6c>
	    right_inc();
	}
	if ((acount2 <= 0xFF) && (acount2 > 0xF0)){
    1e32:	81 3f       	cpi	r24, 0xF1	; 241
    1e34:	60 f4       	brcc	.+24     	; 0x1e4e <decode_spi_right_knob+0x62>
	    right_dec();
	}
	//update_number();
	acount2 = 0;
    1e36:	10 92 16 01 	sts	0x0116, r1
    }
    previous_encoder2 = encoder2;
    1e3a:	c0 93 17 01 	sts	0x0117, r28
}
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret
    encoder2 = ENCODE_RIGHT_KNOB(encoder2);
    sw_index = (previous_encoder2 << 2) | encoder2;
    direction = sw_table[sw_index];
    //value = modeA;
    if(direction == CW){
	acount2++;
    1e42:	80 91 16 01 	lds	r24, 0x0116
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	80 93 16 01 	sts	0x0116, r24
    1e4c:	df cf       	rjmp	.-66     	; 0x1e0c <decode_spi_right_knob+0x20>
    if(encoder2 == 3){
	if((acount2 > 1) && (acount2 < 10)){
	    right_inc();
	}
	if ((acount2 <= 0xFF) && (acount2 > 0xF0)){
	    right_dec();
    1e4e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <right_dec>
	}
	//update_number();
	acount2 = 0;
    1e52:	10 92 16 01 	sts	0x0116, r1
    1e56:	f1 cf       	rjmp	.-30     	; 0x1e3a <decode_spi_right_knob+0x4e>
    if(direction == CCW){
	acount2--;
    }
    if(encoder2 == 3){
	if((acount2 > 1) && (acount2 < 10)){
	    right_inc();
    1e58:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <right_inc>
	}
	if ((acount2 <= 0xFF) && (acount2 > 0xF0)){
	    right_dec();
	}
	//update_number();
	acount2 = 0;
    1e5c:	10 92 16 01 	sts	0x0116, r1
    1e60:	ec cf       	rjmp	.-40     	; 0x1e3a <decode_spi_right_knob+0x4e>

00001e62 <left_inc>:
	    break;
    }

}
void left_inc(){
    switch(mode){
    1e62:	80 91 26 01 	lds	r24, 0x0126
    1e66:	81 30       	cpi	r24, 0x01	; 1
    1e68:	69 f0       	breq	.+26     	; 0x1e84 <left_inc+0x22>
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	51 f4       	brne	.+20     	; 0x1e82 <left_inc+0x20>
	    if(hour >= 24){
		hour = 0;	    
	    }   
	    break;
	case 2: 
	    alarm_hour++;
    1e6e:	80 91 21 01 	lds	r24, 0x0121
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	80 93 21 01 	sts	0x0121, r24
	    if(alarm_hour >= 24){
    1e78:	88 31       	cpi	r24, 0x18	; 24
    1e7a:	10 f0       	brcs	.+4      	; 0x1e80 <left_inc+0x1e>
		alarm_hour = 0;
    1e7c:	10 92 21 01 	sts	0x0121, r1
    1e80:	08 95       	ret
    1e82:	08 95       	ret
void left_inc(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    hour++;
    1e84:	80 91 23 01 	lds	r24, 0x0123
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 23 01 	sts	0x0123, r24
	    if(hour >= 24){
    1e8e:	88 31       	cpi	r24, 0x18	; 24
    1e90:	b8 f3       	brcs	.-18     	; 0x1e80 <left_inc+0x1e>
		hour = 0;	    
    1e92:	10 92 23 01 	sts	0x0123, r1
    1e96:	08 95       	ret

00001e98 <left_dec>:
	default:
	    break;
    }
}
void left_dec(){
    switch(mode){
    1e98:	80 91 26 01 	lds	r24, 0x0126
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	71 f0       	breq	.+28     	; 0x1ebc <left_dec+0x24>
    1ea0:	82 30       	cpi	r24, 0x02	; 2
    1ea2:	59 f4       	brne	.+22     	; 0x1eba <left_dec+0x22>
	    if(hour >= 240){
		hour = 23;	    
	    }   
	    break;
	case 2:
	    alarm_hour--;
    1ea4:	80 91 21 01 	lds	r24, 0x0121
    1ea8:	81 50       	subi	r24, 0x01	; 1
    1eaa:	80 93 21 01 	sts	0x0121, r24
	    if(alarm_hour >= 240){
    1eae:	80 3f       	cpi	r24, 0xF0	; 240
    1eb0:	18 f0       	brcs	.+6      	; 0x1eb8 <left_dec+0x20>
		alarm_hour = 23;
    1eb2:	87 e1       	ldi	r24, 0x17	; 23
    1eb4:	80 93 21 01 	sts	0x0121, r24
    1eb8:	08 95       	ret
    1eba:	08 95       	ret
void left_dec(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    hour--;    
    1ebc:	80 91 23 01 	lds	r24, 0x0123
    1ec0:	81 50       	subi	r24, 0x01	; 1
    1ec2:	80 93 23 01 	sts	0x0123, r24
	    if(hour >= 240){
    1ec6:	80 3f       	cpi	r24, 0xF0	; 240
    1ec8:	b8 f3       	brcs	.-18     	; 0x1eb8 <left_dec+0x20>
		hour = 23;	    
    1eca:	87 e1       	ldi	r24, 0x17	; 23
    1ecc:	80 93 23 01 	sts	0x0123, r24
    1ed0:	08 95       	ret

00001ed2 <decode_spi_left_knob>:
}
/**************************************************************************
 *Decode the knobs encoder using table method
 *Track the last phase and current phase
 **************************************************************************/
void decode_spi_left_knob(uint8_t encoder1){
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    uint8_t sw_index = 0;
    //Counter for preventing unneccessary reset    
    static uint8_t acount1 = 0;
    static uint8_t previous_encoder1 = 0; //Initialize previous    
    uint8_t direction = 0;                    //Direction variable
    encoder1 = ENCODE_LEFT_KNOB(encoder1);  //Mask the bit for decoding left know
    1ed6:	8c 70       	andi	r24, 0x0C	; 12
    1ed8:	c8 2f       	mov	r28, r24
    1eda:	d0 e0       	ldi	r29, 0x00	; 0
    1edc:	d5 95       	asr	r29
    1ede:	c7 95       	ror	r28
    1ee0:	d5 95       	asr	r29
    1ee2:	c7 95       	ror	r28
    1ee4:	9c 2f       	mov	r25, r28
    sw_index = (previous_encoder1 << 2) | encoder1; 
    1ee6:	e0 91 19 01 	lds	r30, 0x0119
    1eea:	ee 0f       	add	r30, r30
    1eec:	ee 0f       	add	r30, r30
    1eee:	ec 2b       	or	r30, r28
    /*shift previous to the left use it as an index Since
      we know the pattern of the knob when it is turning
      Use that data to compare with the table to determine
      Which way it is turning*/
    direction = sw_table[sw_index];
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	e0 50       	subi	r30, 0x00	; 0
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    //Read out the direction from table
    if(direction == CW){  //If CW, add counter
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	f9 f0       	breq	.+62     	; 0x1f3a <decode_spi_left_knob+0x68>
	acount1++;
    }	
    if(direction == CCW){ //If CCW, decrement counter
    1efc:	82 30       	cpi	r24, 0x02	; 2
    1efe:	39 f0       	breq	.+14     	; 0x1f0e <decode_spi_left_knob+0x3c>
	acount1--;
    }
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
    1f00:	93 30       	cpi	r25, 0x03	; 3
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <decode_spi_left_knob+0x4a>
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
	    left_dec();
	}
	acount1 = 0;                     //Reset counter
    }
    previous_encoder1 = encoder1;
    1f04:	c0 93 19 01 	sts	0x0119, r28
}
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret
    //Read out the direction from table
    if(direction == CW){  //If CW, add counter
	acount1++;
    }	
    if(direction == CCW){ //If CCW, decrement counter
	acount1--;
    1f0e:	80 91 18 01 	lds	r24, 0x0118
    1f12:	81 50       	subi	r24, 0x01	; 1
    1f14:	80 93 18 01 	sts	0x0118, r24
    }
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
    1f18:	93 30       	cpi	r25, 0x03	; 3
    1f1a:	a1 f7       	brne	.-24     	; 0x1f04 <decode_spi_left_knob+0x32>
	if((acount1 > 1) && (acount1 < 10)){   //Check if the counter for CW
    1f1c:	80 91 18 01 	lds	r24, 0x0118
    1f20:	9e ef       	ldi	r25, 0xFE	; 254
    1f22:	98 0f       	add	r25, r24
    1f24:	98 30       	cpi	r25, 0x08	; 8
    1f26:	a0 f0       	brcs	.+40     	; 0x1f50 <decode_spi_left_knob+0x7e>
	    left_inc();
	}
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
    1f28:	81 3f       	cpi	r24, 0xF1	; 241
    1f2a:	68 f4       	brcc	.+26     	; 0x1f46 <decode_spi_left_knob+0x74>
	    left_dec();
	}
	acount1 = 0;                     //Reset counter
    1f2c:	10 92 18 01 	sts	0x0118, r1
    }
    previous_encoder1 = encoder1;
    1f30:	c0 93 19 01 	sts	0x0119, r28
}
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	08 95       	ret
      Use that data to compare with the table to determine
      Which way it is turning*/
    direction = sw_table[sw_index];
    //Read out the direction from table
    if(direction == CW){  //If CW, add counter
	acount1++;
    1f3a:	80 91 18 01 	lds	r24, 0x0118
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	80 93 18 01 	sts	0x0118, r24
    1f44:	dd cf       	rjmp	.-70     	; 0x1f00 <decode_spi_left_knob+0x2e>
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
	if((acount1 > 1) && (acount1 < 10)){   //Check if the counter for CW
	    left_inc();
	}
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
	    left_dec();
    1f46:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <left_dec>
	}
	acount1 = 0;                     //Reset counter
    1f4a:	10 92 18 01 	sts	0x0118, r1
    1f4e:	f0 cf       	rjmp	.-32     	; 0x1f30 <decode_spi_left_knob+0x5e>
    if(direction == CCW){ //If CCW, decrement counter
	acount1--;
    }
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
	if((acount1 > 1) && (acount1 < 10)){   //Check if the counter for CW
	    left_inc();
    1f50:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <left_inc>
	}
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
	    left_dec();
	}
	acount1 = 0;                     //Reset counter
    1f54:	10 92 18 01 	sts	0x0118, r1
    1f58:	eb cf       	rjmp	.-42     	; 0x1f30 <decode_spi_left_knob+0x5e>

00001f5a <check_knobs>:
    __asm__ __volatile__ ("nop");
    while (bit_is_clear(SPSR,SPIF)){} //SPIN read 
    // Return incoming data from SPDR
    return(SPDR);  
}
void check_knobs(void){
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    static uint8_t encoder;
    encoder = SPI_Receive();
    1f5e:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <SPI_Receive>
    1f62:	80 93 1a 01 	sts	0x011A, r24
    decode_spi_left_knob(encoder);
    1f66:	c8 2f       	mov	r28, r24
    1f68:	d0 e0       	ldi	r29, 0x00	; 0
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <decode_spi_left_knob>
    decode_spi_right_knob(encoder);
    1f70:	ce 01       	movw	r24, r28
}
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
}
void check_knobs(void){
    static uint8_t encoder;
    encoder = SPI_Receive();
    decode_spi_left_knob(encoder);
    decode_spi_right_knob(encoder);
    1f76:	0c 94 f6 0e 	jmp	0x1dec	; 0x1dec <decode_spi_right_knob>

00001f7a <__vector_10>:
	second++;    
    }

}

ISR(TIMER2_OVF_vect){
    1f7a:	1f 92       	push	r1
    1f7c:	0f 92       	push	r0
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	0f 92       	push	r0
    1f82:	11 24       	eor	r1, r1
    1f84:	0b b6       	in	r0, 0x3b	; 59
    1f86:	0f 92       	push	r0
    1f88:	2f 93       	push	r18
    1f8a:	3f 93       	push	r19
    1f8c:	4f 93       	push	r20
    1f8e:	5f 93       	push	r21
    1f90:	6f 93       	push	r22
    1f92:	7f 93       	push	r23
    1f94:	8f 93       	push	r24
    1f96:	9f 93       	push	r25
    1f98:	af 93       	push	r26
    1f9a:	bf 93       	push	r27
    1f9c:	ef 93       	push	r30
    1f9e:	ff 93       	push	r31
    static int tc2_count = 0;
    tc2_count++;
    1fa0:	80 91 1b 01 	lds	r24, 0x011B
    1fa4:	90 91 1c 01 	lds	r25, 0x011C
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	90 93 1c 01 	sts	0x011C, r25
    1fae:	80 93 1b 01 	sts	0x011B, r24
    //tc2_count = tc2_count << 1;
    switch(tc2_count%8){
    1fb2:	87 70       	andi	r24, 0x07	; 7
    1fb4:	90 78       	andi	r25, 0x80	; 128
    1fb6:	97 fd       	sbrc	r25, 7
    1fb8:	1d c0       	rjmp	.+58     	; 0x1ff4 <__vector_10+0x7a>
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	b9 f0       	breq	.+46     	; 0x1fee <__vector_10+0x74>
    1fc0:	02 97       	sbiw	r24, 0x02	; 2
    1fc2:	11 f4       	brne	.+4      	; 0x1fc8 <__vector_10+0x4e>
	case 1:
	    check_knobs();
            break;
	case 2:

	    button_routine();
    1fc4:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <button_routine>
	    //display_update(); 
	    break;	    
	default:
	    break;
    }
}
    1fc8:	ff 91       	pop	r31
    1fca:	ef 91       	pop	r30
    1fcc:	bf 91       	pop	r27
    1fce:	af 91       	pop	r26
    1fd0:	9f 91       	pop	r25
    1fd2:	8f 91       	pop	r24
    1fd4:	7f 91       	pop	r23
    1fd6:	6f 91       	pop	r22
    1fd8:	5f 91       	pop	r21
    1fda:	4f 91       	pop	r20
    1fdc:	3f 91       	pop	r19
    1fde:	2f 91       	pop	r18
    1fe0:	0f 90       	pop	r0
    1fe2:	0b be       	out	0x3b, r0	; 59
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0f 90       	pop	r0
    1fea:	1f 90       	pop	r1
    1fec:	18 95       	reti
    static int tc2_count = 0;
    tc2_count++;
    //tc2_count = tc2_count << 1;
    switch(tc2_count%8){
	case 1:
	    check_knobs();
    1fee:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <check_knobs>
            break;
    1ff2:	ea cf       	rjmp	.-44     	; 0x1fc8 <__vector_10+0x4e>

ISR(TIMER2_OVF_vect){
    static int tc2_count = 0;
    tc2_count++;
    //tc2_count = tc2_count << 1;
    switch(tc2_count%8){
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	88 6f       	ori	r24, 0xF8	; 248
    1ff8:	9f 6f       	ori	r25, 0xFF	; 255
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	de cf       	rjmp	.-68     	; 0x1fba <__vector_10+0x40>

00001ffe <cleanup_alarm>:
    }
}

void cleanup_alarm(){

    if(alarm_minute >= 60){
    1ffe:	80 91 22 01 	lds	r24, 0x0122
    2002:	8c 33       	cpi	r24, 0x3C	; 60
    2004:	10 f0       	brcs	.+4      	; 0x200a <cleanup_alarm+0xc>
	alarm_minute = 0;	
    2006:	10 92 22 01 	sts	0x0122, r1

    if(alarm_minute >= 240){
	alarm_minute = 59;	
    }

    if(alarm_hour >= 24){
    200a:	80 91 21 01 	lds	r24, 0x0121
    200e:	88 31       	cpi	r24, 0x18	; 24
    2010:	10 f0       	brcs	.+4      	; 0x2016 <cleanup_alarm+0x18>
	alarm_hour = 0;
    2012:	10 92 21 01 	sts	0x0121, r1
    2016:	08 95       	ret

00002018 <cleanup>:
	alarm_hour = 23;
    }
}

void cleanup(){
    if(hour >= 240){
    2018:	80 91 23 01 	lds	r24, 0x0123
    201c:	80 3f       	cpi	r24, 0xF0	; 240
    201e:	50 f0       	brcs	.+20     	; 0x2034 <cleanup+0x1c>
	hour = 23;	    
    2020:	87 e1       	ldi	r24, 0x17	; 23
    2022:	80 93 23 01 	sts	0x0123, r24
    }
    if(hour >= 24){
	hour = 0;	    
    }
    if(minute >= 60){
    2026:	80 91 24 01 	lds	r24, 0x0124
    202a:	8c 33       	cpi	r24, 0x3C	; 60
    202c:	10 f0       	brcs	.+4      	; 0x2032 <cleanup+0x1a>
	minute = 0;
    202e:	10 92 24 01 	sts	0x0124, r1
    2032:	08 95       	ret

void cleanup(){
    if(hour >= 240){
	hour = 23;	    
    }
    if(hour >= 24){
    2034:	88 31       	cpi	r24, 0x18	; 24
    2036:	b8 f3       	brcs	.-18     	; 0x2026 <cleanup+0xe>
	hour = 0;	    
    2038:	10 92 23 01 	sts	0x0123, r1
    203c:	f4 cf       	rjmp	.-24     	; 0x2026 <cleanup+0xe>

0000203e <timer_init>:
 *Left knob  = PWM for 7-seg
 *Right knob = PWM for bar graph
 *****************************************************************/

void timer_init(void){
    TCCR0 |= (1<<CS00) ;  //normal mode, prescale by 32
    203e:	83 b7       	in	r24, 0x33	; 51
    2040:	81 60       	ori	r24, 0x01	; 1
    2042:	83 bf       	out	0x33, r24	; 51
    ASSR  |= (1<<AS0);
    2044:	80 b7       	in	r24, 0x30	; 48
    2046:	88 60       	ori	r24, 0x08	; 8
    2048:	80 bf       	out	0x30, r24	; 48
    TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) |(1<<CS21) | (1<<CS20); //| (1<<CS20);  //normal mode, prescale by 32
    204a:	85 b5       	in	r24, 0x25	; 37
    204c:	8b 67       	ori	r24, 0x7B	; 123
    204e:	85 bd       	out	0x25, r24	; 37
    TIMSK |= (1<<TOIE0)| (1<<TOIE2);// | (1<<OCIE2);             //enable interrupts
    2050:	87 b7       	in	r24, 0x37	; 55
    2052:	81 64       	ori	r24, 0x41	; 65
    2054:	87 bf       	out	0x37, r24	; 55
    TIFR  |= (1 << TOV2);
    2056:	86 b7       	in	r24, 0x36	; 54
    2058:	80 64       	ori	r24, 0x40	; 64
    205a:	86 bf       	out	0x36, r24	; 54
    205c:	08 95       	ret

0000205e <ADC_init>:

}


void ADC_init(void){
    DDRF |= !(1<<PF0);
    205e:	e1 e6       	ldi	r30, 0x61	; 97
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 83       	st	Z, r24
    PORTF = 0x00;
    2066:	10 92 62 00 	sts	0x0062, r1
    ADMUX  |= (1<<ADLAR) | (1<<REFS0);
    206a:	87 b1       	in	r24, 0x07	; 7
    206c:	80 66       	ori	r24, 0x60	; 96
    206e:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (1<<ADIE)\
    2070:	86 b1       	in	r24, 0x06	; 6
    2072:	8f 6e       	ori	r24, 0xEF	; 239
    2074:	86 b9       	out	0x06, r24	; 6
	      |(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);

    OCR2 = 0xFF;
    2076:	8f ef       	ldi	r24, 0xFF	; 255
    2078:	83 bd       	out	0x23, r24	; 35
    207a:	08 95       	ret

0000207c <main>:

int main()
{
    //set port bits 4-7 B as outputs
    uint8_t c = 0;
    DDRE = 0xc0;
    207c:	80 ec       	ldi	r24, 0xC0	; 192
    207e:	82 b9       	out	0x02, r24	; 2
    PORTE &= 0x7F;
    2080:	1f 98       	cbi	0x03, 7	; 3
    DDRB = 0xF7;
    2082:	87 ef       	ldi	r24, 0xF7	; 247
    2084:	87 bb       	out	0x17, r24	; 23
    DDRD |= (1 << PB2);
    2086:	8a 9a       	sbi	0x11, 2	; 17
void SPI_init(){
    /* Set MOSI and SCK output, all others input */
    //DDRB = (1<<PB3)|(1<<PB1);

    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    2088:	81 e5       	ldi	r24, 0x51	; 81
    208a:	8d b9       	out	0x0d, r24	; 13
    PORTE &= 0x7F;
    DDRB = 0xF7;
    DDRD |= (1 << PB2);

    SPI_init();
    timer_init();
    208c:	0e 94 1f 10 	call	0x203e	; 0x203e <timer_init>

}


void ADC_init(void){
    DDRF |= !(1<<PF0);
    2090:	80 91 61 00 	lds	r24, 0x0061
    2094:	80 93 61 00 	sts	0x0061, r24
    PORTF = 0x00;
    2098:	10 92 62 00 	sts	0x0062, r1
    ADMUX  |= (1<<ADLAR) | (1<<REFS0);
    209c:	87 b1       	in	r24, 0x07	; 7
    209e:	80 66       	ori	r24, 0x60	; 96
    20a0:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (1<<ADIE)\
    20a2:	86 b1       	in	r24, 0x06	; 6
    20a4:	8f 6e       	ori	r24, 0xEF	; 239
    20a6:	86 b9       	out	0x06, r24	; 6
	      |(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);

    OCR2 = 0xFF;
    20a8:	8f ef       	ldi	r24, 0xFF	; 255
    20aa:	83 bd       	out	0x23, r24	; 35
    DDRD |= (1 << PB2);

    SPI_init();
    timer_init();
    ADC_init();
    sei();
    20ac:	78 94       	sei
    while(1){
	bar_graph();
	display_update();
	//bar_graph();
	minute = 9;
    20ae:	c9 e0       	ldi	r28, 0x09	; 9
    SPI_init();
    timer_init();
    ADC_init();
    sei();
    while(1){
	bar_graph();
    20b0:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <bar_graph>
	display_update();
    20b4:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <display_update>
	//bar_graph();
	minute = 9;
    20b8:	c0 93 24 01 	sts	0x0124, r28
    20bc:	f9 cf       	rjmp	.-14     	; 0x20b0 <main+0x34>

000020be <__tablejump2__>:
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31

000020c2 <__tablejump__>:
    20c2:	05 90       	lpm	r0, Z+
    20c4:	f4 91       	lpm	r31, Z
    20c6:	e0 2d       	mov	r30, r0
    20c8:	09 94       	ijmp

000020ca <__umulhisi3>:
    20ca:	a2 9f       	mul	r26, r18
    20cc:	b0 01       	movw	r22, r0
    20ce:	b3 9f       	mul	r27, r19
    20d0:	c0 01       	movw	r24, r0
    20d2:	a3 9f       	mul	r26, r19
    20d4:	70 0d       	add	r23, r0
    20d6:	81 1d       	adc	r24, r1
    20d8:	11 24       	eor	r1, r1
    20da:	91 1d       	adc	r25, r1
    20dc:	b2 9f       	mul	r27, r18
    20de:	70 0d       	add	r23, r0
    20e0:	81 1d       	adc	r24, r1
    20e2:	11 24       	eor	r1, r1
    20e4:	91 1d       	adc	r25, r1
    20e6:	08 95       	ret

000020e8 <_exit>:
    20e8:	f8 94       	cli

000020ea <__stop_program>:
    20ea:	ff cf       	rjmp	.-2      	; 0x20ea <__stop_program>
