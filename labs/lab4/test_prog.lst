
test_prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000020dc  00002170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800110  00800110  00002180  2**0
                  ALLOC
  3 .stab         0000375c  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c4  00000000  00000000  000058dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006aa0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__ctors_end>
       4:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       8:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
       c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      10:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      14:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      18:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      1c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      20:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      28:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_10>
      2c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      30:	0c 94 3f 0c 	jmp	0x187e	; 0x187e <__vector_12>
      34:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      38:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      3c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      40:	0c 94 30 0e 	jmp	0x1c60	; 0x1c60 <__vector_16>
      44:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      48:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      4c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      50:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      54:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__vector_21>
      58:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      5c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      60:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      68:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      6c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      70:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      74:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      78:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      7c:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      80:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      84:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__bad_interrupt>
      8c:	2d 02       	muls	r18, r29
      8e:	35 02       	muls	r19, r21
      90:	3d 02       	muls	r19, r29
      92:	45 02       	muls	r20, r21
      94:	4d 02       	muls	r20, r29
      96:	56 02       	muls	r21, r22
      98:	5f 02       	muls	r21, r31
      9a:	1d 02       	muls	r17, r29
      9c:	25 02       	muls	r18, r21
      9e:	b3 03       	fmuls	r19, r19
      a0:	ab 03       	fmulsu	r18, r19
      a2:	a6 03       	fmuls	r18, r22
      a4:	d0 03       	fmuls	r21, r16
      a6:	c3 03       	fmuls	r20, r19
      a8:	cb 03       	fmulsu	r20, r19
      aa:	bb 03       	fmulsu	r19, r19
      ac:	84 03       	fmuls	r16, r20
      ae:	7c 03       	fmul	r23, r20
      b0:	77 03       	mulsu	r23, r23
      b2:	6f 03       	fmul	r22, r23
      b4:	d8 03       	fmulsu	r21, r16
      b6:	8c 03       	fmulsu	r16, r20
      b8:	62 03       	mulsu	r22, r18
      ba:	4a 03       	fmul	r20, r18
      bc:	f8 03       	fmulsu	r23, r16
      be:	a1 03       	fmuls	r18, r17
      c0:	99 03       	fmulsu	r17, r17
      c2:	91 03       	fmuls	r17, r17
      c4:	18 04       	cpc	r1, r8
      c6:	52 03       	mulsu	r21, r18
      c8:	08 04       	cpc	r0, r8
      ca:	5a 03       	fmul	r21, r18
      cc:	25 04       	cpc	r2, r5
      ce:	f0 03       	fmuls	r23, r16
      d0:	10 04       	cpc	r1, r0
      d2:	6a 03       	fmul	r22, r18
      d4:	e8 03       	fmulsu	r22, r16
      d6:	e0 03       	fmuls	r22, r16
      d8:	00 04       	cpc	r0, r0
      da:	45 03       	mulsu	r20, r21
      dc:	13 03       	mulsu	r17, r19
      de:	0b 03       	fmul	r16, r19
      e0:	1b 03       	fmul	r17, r19
      e2:	1d 04       	cpc	r1, r13
      e4:	fe 02       	muls	r31, r30
      e6:	f6 02       	muls	r31, r22
      e8:	20 03       	mulsu	r18, r16
      ea:	d9 02       	muls	r29, r25
      ec:	3d 03       	fmul	r19, r21
      ee:	06 03       	mulsu	r16, r22
      f0:	e9 02       	muls	r30, r25
      f2:	e1 02       	muls	r30, r17
      f4:	2d 03       	fmul	r18, r21
      f6:	f1 02       	muls	r31, r17
      f8:	25 03       	mulsu	r18, r21
      fa:	d1 02       	muls	r29, r17
      fc:	b7 02       	muls	r27, r23
      fe:	35 03       	mulsu	r19, r21
     100:	a7 02       	muls	r26, r23
     102:	9f 02       	muls	r25, r31
     104:	c4 02       	muls	r28, r20
     106:	bc 02       	muls	r27, r28
     108:	c9 02       	muls	r28, r25
     10a:	9a 02       	muls	r25, r26
     10c:	af 02       	muls	r26, r31
     10e:	82 02       	muls	r24, r18
     110:	92 02       	muls	r25, r18
     112:	7d 02       	muls	r23, r29
     114:	75 02       	muls	r23, r21
     116:	6d 02       	muls	r22, r29
     118:	68 02       	muls	r22, r24
     11a:	8a 02       	muls	r24, r26
     11c:	2f 05       	cpc	r18, r15
     11e:	4d 05       	cpc	r20, r13
     120:	29 05       	cpc	r18, r9
     122:	3b 05       	cpc	r19, r11
     124:	1d 05       	cpc	r17, r13
     126:	23 05       	cpc	r18, r3
     128:	1d 05       	cpc	r17, r13
     12a:	23 05       	cpc	r18, r3
     12c:	53 05       	cpc	r21, r3
     12e:	2f 05       	cpc	r18, r15
     130:	4d 05       	cpc	r20, r13
     132:	29 05       	cpc	r18, r9
     134:	3b 05       	cpc	r19, r11
     136:	35 05       	cpc	r19, r5
     138:	17 05       	cpc	r17, r7
     13a:	35 05       	cpc	r19, r5
     13c:	17 05       	cpc	r17, r7
     13e:	7d 05       	cpc	r23, r13
     140:	b9 05       	cpc	r27, r9
     142:	71 05       	cpc	r23, r1
     144:	e9 05       	cpc	r30, r9
     146:	71 05       	cpc	r23, r1
     148:	ad 05       	cpc	r26, r13
     14a:	a7 05       	cpc	r26, r7
     14c:	17 05       	cpc	r17, r7
     14e:	83 05       	cpc	r24, r3
     150:	17 05       	cpc	r17, r7
     152:	95 05       	cpc	r25, r5
     154:	41 05       	cpc	r20, r1
     156:	d7 05       	cpc	r29, r7
     158:	1d 05       	cpc	r17, r13
     15a:	cb 05       	cpc	r28, r11
     15c:	59 05       	cpc	r21, r9
     15e:	d1 05       	cpc	r29, r1
     160:	5f 05       	cpc	r21, r15
     162:	dd 05       	cpc	r29, r13
     164:	a1 05       	cpc	r26, r1
     166:	47 05       	cpc	r20, r7
     168:	41 05       	cpc	r20, r1
     16a:	89 05       	cpc	r24, r9
     16c:	65 05       	cpc	r22, r5
     16e:	2f 05       	cpc	r18, r15
     170:	4d 05       	cpc	r20, r13
     172:	29 05       	cpc	r18, r9
     174:	3b 05       	cpc	r19, r11
     176:	1d 05       	cpc	r17, r13
     178:	23 05       	cpc	r18, r3
     17a:	1d 05       	cpc	r17, r13
     17c:	23 05       	cpc	r18, r3
     17e:	53 05       	cpc	r21, r3
     180:	2f 05       	cpc	r18, r15
     182:	b3 05       	cpc	r27, r3
     184:	47 05       	cpc	r20, r7
     186:	29 05       	cpc	r18, r9
     188:	35 05       	cpc	r19, r5
     18a:	17 05       	cpc	r17, r7
     18c:	35 05       	cpc	r19, r5
     18e:	17 05       	cpc	r17, r7
     190:	7d 05       	cpc	r23, r13
     192:	bf 05       	cpc	r27, r15
     194:	8f 05       	cpc	r24, r15
     196:	53 05       	cpc	r21, r3
     198:	c5 05       	cpc	r28, r5
     19a:	83 05       	cpc	r24, r3
     19c:	59 05       	cpc	r21, r9
     19e:	5f 05       	cpc	r21, r15
     1a0:	41 05       	cpc	r20, r1
     1a2:	47 05       	cpc	r20, r7
     1a4:	e3 05       	cpc	r30, r3
     1a6:	65 05       	cpc	r22, r5
     1a8:	01 06       	cpc	r0, r17
     1aa:	25 06       	cpc	r2, r21
     1ac:	fb 05       	cpc	r31, r11
     1ae:	1f 06       	cpc	r1, r31
     1b0:	a3 06       	cpc	r10, r19
     1b2:	9d 06       	cpc	r9, r29
     1b4:	fb 05       	cpc	r31, r11
     1b6:	25 06       	cpc	r2, r21
     1b8:	2b 06       	cpc	r2, r27
     1ba:	07 06       	cpc	r0, r23
     1bc:	af 06       	cpc	r10, r31
     1be:	fb 05       	cpc	r31, r11
     1c0:	01 06       	cpc	r0, r17
     1c2:	1f 06       	cpc	r1, r31
     1c4:	fb 05       	cpc	r31, r11
     1c6:	67 06       	cpc	r6, r23
     1c8:	fb 05       	cpc	r31, r11
     1ca:	13 06       	cpc	r1, r19
     1cc:	01 06       	cpc	r0, r17
     1ce:	43 06       	cpc	r4, r19
     1d0:	2b 06       	cpc	r2, r27
     1d2:	07 06       	cpc	r0, r23
     1d4:	3d 06       	cpc	r3, r29
     1d6:	c1 06       	cpc	r12, r17
     1d8:	13 06       	cpc	r1, r19
     1da:	31 06       	cpc	r3, r17
     1dc:	cd 06       	cpc	r12, r29
     1de:	7f 06       	cpc	r7, r31
     1e0:	31 06       	cpc	r3, r17
     1e2:	97 06       	cpc	r9, r23
     1e4:	fb 05       	cpc	r31, r11
     1e6:	01 06       	cpc	r0, r17
     1e8:	1f 06       	cpc	r1, r31
     1ea:	fb 05       	cpc	r31, r11
     1ec:	61 06       	cpc	r6, r17
     1ee:	07 06       	cpc	r0, r23
     1f0:	25 06       	cpc	r2, r21
     1f2:	fb 05       	cpc	r31, r11
     1f4:	13 06       	cpc	r1, r19
     1f6:	01 06       	cpc	r0, r17
     1f8:	43 06       	cpc	r4, r19
     1fa:	2b 06       	cpc	r2, r27
     1fc:	07 06       	cpc	r0, r23
     1fe:	bb 06       	cpc	r11, r27
     200:	55 06       	cpc	r5, r21
     202:	4f 06       	cpc	r4, r31
     204:	19 06       	cpc	r1, r25
     206:	49 06       	cpc	r4, r25
     208:	37 06       	cpc	r3, r23
     20a:	19 06       	cpc	r1, r25
     20c:	8b 06       	cpc	r8, r27
     20e:	91 06       	cpc	r9, r17
     210:	85 06       	cpc	r8, r21
     212:	55 06       	cpc	r5, r21
     214:	4f 06       	cpc	r4, r31
     216:	19 06       	cpc	r1, r25
     218:	49 06       	cpc	r4, r25
     21a:	37 06       	cpc	r3, r23
     21c:	a9 06       	cpc	r10, r25
     21e:	b5 06       	cpc	r11, r21
     220:	3d 06       	cpc	r3, r29
     222:	6d 06       	cpc	r6, r29
     224:	73 06       	cpc	r7, r19
     226:	7d 0b       	sbc	r23, r29
     228:	71 0b       	sbc	r23, r17
     22a:	6b 0b       	sbc	r22, r27
     22c:	5f 0b       	sbc	r21, r31
     22e:	59 0b       	sbc	r21, r25
     230:	4d 0b       	sbc	r20, r29
     232:	47 0b       	sbc	r20, r23
     234:	41 0b       	sbc	r20, r17
     236:	3b 0b       	sbc	r19, r27
     238:	35 0b       	sbc	r19, r21
     23a:	29 0b       	sbc	r18, r25
     23c:	23 0b       	sbc	r18, r19
     23e:	1d 0b       	sbc	r17, r29
     240:	11 0b       	sbc	r17, r17
     242:	0b 0b       	sbc	r16, r27
     244:	ff 0a       	sbc	r15, r31
     246:	f9 0a       	sbc	r15, r25
     248:	ed 0a       	sbc	r14, r29
     24a:	e7 0a       	sbc	r14, r23
     24c:	db 0a       	sbc	r13, r27
     24e:	d5 0a       	sbc	r13, r21
     250:	cf 0a       	sbc	r12, r31
     252:	c9 0a       	sbc	r12, r25
     254:	c3 0a       	sbc	r12, r19
     256:	b7 0a       	sbc	r11, r23
     258:	b1 0a       	sbc	r11, r17
     25a:	ab 0a       	sbc	r10, r27
     25c:	a5 0a       	sbc	r10, r21
     25e:	9f 0a       	sbc	r9, r31
     260:	93 0a       	sbc	r9, r19
     262:	8d 0a       	sbc	r8, r29
     264:	81 0a       	sbc	r8, r17
     266:	7b 0a       	sbc	r7, r27
     268:	75 0a       	sbc	r7, r21
     26a:	6f 0a       	sbc	r6, r31
     26c:	63 0a       	sbc	r6, r19
     26e:	5d 0a       	sbc	r5, r29
     270:	51 0a       	sbc	r5, r17
     272:	4b 0a       	sbc	r4, r27
     274:	3f 0a       	sbc	r3, r31
     276:	39 0a       	sbc	r3, r25
     278:	2d 0a       	sbc	r2, r29
     27a:	27 0a       	sbc	r2, r23
     27c:	1b 0a       	sbc	r1, r27
     27e:	15 0a       	sbc	r1, r21
     280:	09 0a       	sbc	r0, r25
     282:	03 0a       	sbc	r0, r19
     284:	fd 09       	sbc	r31, r13
     286:	f7 09       	sbc	r31, r7
     288:	f1 09       	sbc	r31, r1
     28a:	e5 09       	sbc	r30, r5
     28c:	df 09       	sbc	r29, r15
     28e:	d9 09       	sbc	r29, r9
     290:	d3 09       	sbc	r29, r3
     292:	cd 09       	sbc	r28, r13
     294:	c1 09       	sbc	r28, r1
     296:	bb 09       	sbc	r27, r11
     298:	af 09       	sbc	r26, r15
     29a:	a9 09       	sbc	r26, r9
     29c:	a3 09       	sbc	r26, r3
     29e:	9d 09       	sbc	r25, r13
     2a0:	91 09       	sbc	r25, r1
     2a2:	8b 09       	sbc	r24, r11
     2a4:	85 09       	sbc	r24, r5
     2a6:	7f 09       	sbc	r23, r15
     2a8:	79 09       	sbc	r23, r9
     2aa:	6d 09       	sbc	r22, r13
     2ac:	67 09       	sbc	r22, r7
     2ae:	5b 09       	sbc	r21, r11
     2b0:	55 09       	sbc	r21, r5
     2b2:	4f 09       	sbc	r20, r15
     2b4:	49 09       	sbc	r20, r9
     2b6:	3d 09       	sbc	r19, r13
     2b8:	37 09       	sbc	r19, r7
     2ba:	31 09       	sbc	r19, r1
     2bc:	2b 09       	sbc	r18, r11
     2be:	1f 09       	sbc	r17, r15
     2c0:	19 09       	sbc	r17, r9
     2c2:	13 09       	sbc	r17, r3
     2c4:	0d 09       	sbc	r16, r13
     2c6:	07 09       	sbc	r16, r7
     2c8:	fb 08       	sbc	r15, r11
     2ca:	f5 08       	sbc	r15, r5
     2cc:	e9 08       	sbc	r14, r9
     2ce:	e3 08       	sbc	r14, r3
     2d0:	d7 08       	sbc	r13, r7
     2d2:	d1 08       	sbc	r13, r1
     2d4:	c5 08       	sbc	r12, r5
     2d6:	bf 08       	sbc	r11, r15
     2d8:	b3 08       	sbc	r11, r3
     2da:	ad 08       	sbc	r10, r13
     2dc:	a7 08       	sbc	r10, r7
     2de:	a1 08       	sbc	r10, r1
     2e0:	9b 08       	sbc	r9, r11
     2e2:	8f 08       	sbc	r8, r15
     2e4:	89 08       	sbc	r8, r9
     2e6:	7d 08       	sbc	r7, r13
     2e8:	77 08       	sbc	r7, r7
     2ea:	71 08       	sbc	r7, r1
     2ec:	6b 08       	sbc	r6, r11
     2ee:	5f 08       	sbc	r5, r15
     2f0:	59 08       	sbc	r5, r9
     2f2:	53 08       	sbc	r5, r3
     2f4:	4d 08       	sbc	r4, r13
     2f6:	41 08       	sbc	r4, r1
     2f8:	3b 08       	sbc	r3, r11
     2fa:	2f 08       	sbc	r2, r15
     2fc:	29 08       	sbc	r2, r9
     2fe:	1d 08       	sbc	r1, r13
     300:	17 08       	sbc	r1, r7
     302:	0b 08       	sbc	r0, r11
     304:	05 08       	sbc	r0, r5
     306:	f9 07       	cpc	r31, r25
     308:	f3 07       	cpc	r31, r19
     30a:	e7 07       	cpc	r30, r23
     30c:	e1 07       	cpc	r30, r17
     30e:	d5 07       	cpc	r29, r21
     310:	cf 07       	cpc	r28, r31
     312:	c9 07       	cpc	r28, r25
     314:	c3 07       	cpc	r28, r19
     316:	bd 07       	cpc	r27, r29
     318:	b1 07       	cpc	r27, r17
     31a:	ab 07       	cpc	r26, r27
     31c:	a5 07       	cpc	r26, r21
     31e:	99 07       	cpc	r25, r25
     320:	93 07       	cpc	r25, r19
     322:	87 07       	cpc	r24, r23
     324:	81 07       	cpc	r24, r17
     326:	75 07       	cpc	r23, r21
     328:	6f 07       	cpc	r22, r31
     32a:	63 07       	cpc	r22, r19
     32c:	5d 07       	cpc	r21, r29
     32e:	57 07       	cpc	r21, r23
     330:	51 07       	cpc	r21, r17
     332:	45 07       	cpc	r20, r21
     334:	3f 07       	cpc	r19, r31
     336:	33 07       	cpc	r19, r19
     338:	2d 07       	cpc	r18, r29
     33a:	21 07       	cpc	r18, r17
     33c:	1b 07       	cpc	r17, r27
     33e:	0f 07       	cpc	r16, r31
     340:	09 07       	cpc	r16, r25
     342:	03 07       	cpc	r16, r19
     344:	fd 06       	cpc	r15, r29
     346:	f7 06       	cpc	r15, r23
     348:	eb 06       	cpc	r14, r27
     34a:	e5 06       	cpc	r14, r21
     34c:	df 06       	cpc	r13, r31
     34e:	83 0b       	sbc	r24, r19
     350:	ad 0b       	sbc	r26, r29
     352:	9b 0b       	sbc	r25, r27
     354:	ad 0b       	sbc	r26, r29
     356:	9b 0b       	sbc	r25, r27
     358:	ad 0b       	sbc	r26, r29
     35a:	9b 0b       	sbc	r25, r27
     35c:	d1 0b       	sbc	r29, r17
     35e:	9b 0b       	sbc	r25, r27
     360:	d1 0b       	sbc	r29, r17
     362:	b9 0b       	sbc	r27, r25
     364:	a7 0b       	sbc	r26, r23
     366:	e9 0b       	sbc	r30, r25
     368:	a7 0b       	sbc	r26, r23
     36a:	d7 0b       	sbc	r29, r23
     36c:	c5 0b       	sbc	r28, r21
     36e:	b3 0b       	sbc	r27, r19
     370:	9b 0b       	sbc	r25, r27
     372:	b3 0b       	sbc	r27, r19
     374:	9b 0b       	sbc	r25, r27
     376:	b3 0b       	sbc	r27, r19
     378:	9b 0b       	sbc	r25, r27
     37a:	cb 0b       	sbc	r28, r27
     37c:	9b 0b       	sbc	r25, r27
     37e:	cb 0b       	sbc	r28, r27
     380:	b9 0b       	sbc	r27, r25
     382:	dd 0b       	sbc	r29, r29
     384:	e3 0b       	sbc	r30, r19
     386:	9b 0b       	sbc	r25, r27
     388:	a7 0b       	sbc	r26, r23
     38a:	ef 0b       	sbc	r30, r31
     38c:	c5 0b       	sbc	r28, r21

0000038e <__ctors_end>:
     38e:	11 24       	eor	r1, r1
     390:	1f be       	out	0x3f, r1	; 63
     392:	cf ef       	ldi	r28, 0xFF	; 255
     394:	d0 e1       	ldi	r29, 0x10	; 16
     396:	de bf       	out	0x3e, r29	; 62
     398:	cd bf       	out	0x3d, r28	; 61

0000039a <__do_copy_data>:
     39a:	11 e0       	ldi	r17, 0x01	; 1
     39c:	a0 e0       	ldi	r26, 0x00	; 0
     39e:	b1 e0       	ldi	r27, 0x01	; 1
     3a0:	ec ed       	ldi	r30, 0xDC	; 220
     3a2:	f0 e2       	ldi	r31, 0x20	; 32
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	0b bf       	out	0x3b, r16	; 59
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__do_copy_data+0x14>
     3aa:	07 90       	elpm	r0, Z+
     3ac:	0d 92       	st	X+, r0
     3ae:	a0 31       	cpi	r26, 0x10	; 16
     3b0:	b1 07       	cpc	r27, r17
     3b2:	d9 f7       	brne	.-10     	; 0x3aa <__do_copy_data+0x10>

000003b4 <__do_clear_bss>:
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	a0 e1       	ldi	r26, 0x10	; 16
     3b8:	b1 e0       	ldi	r27, 0x01	; 1
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	ad 33       	cpi	r26, 0x3D	; 61
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 3d 10 	call	0x207a	; 0x207a <main>
     3c8:	0c 94 6c 10 	jmp	0x20d8	; 0x20d8 <_exit>

000003cc <__bad_interrupt>:
     3cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d0 <set_brightness.part.1>:
	else{
	    brightness_level++;
	}
    }
    else if(setting == 2){
	brightness_level--;
     3d0:	80 91 37 01 	lds	r24, 0x0137
     3d4:	81 50       	subi	r24, 0x01	; 1
	if(brightness_level >= 240){
     3d6:	80 3f       	cpi	r24, 0xF0	; 240
     3d8:	18 f0       	brcs	.+6      	; 0x3e0 <set_brightness.part.1+0x10>
	    brightness_level = 0;
     3da:	10 92 37 01 	sts	0x0137, r1
     3de:	08 95       	ret
	else{
	    brightness_level++;
	}
    }
    else if(setting == 2){
	brightness_level--;
     3e0:	80 93 37 01 	sts	0x0137, r24
     3e4:	08 95       	ret

000003e6 <play_rest>:
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     3e6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     3e8:	10 92 36 01 	sts	0x0136, r1
     3ec:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	90 93 34 01 	sts	0x0134, r25
     3f6:	80 93 33 01 	sts	0x0133, r24
     3fa:	08 95       	ret

000003fc <play_note>:
}

void play_note(char note, uint8_t flat, uint8_t octave, uint8_t duration) {
     3fc:	cf 93       	push	r28
  //octave must be 0-8 (0 is the lowest, 8 doesn't sound very good)
  //duration is in 64th notes at 120bpm
  //e.g. play_note('D', 1, 0, 16)
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
     3fe:	92 98       	cbi	0x12, 2	; 18
  beat = 0;             //reset the beat counter
     400:	10 92 36 01 	sts	0x0136, r1
     404:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;  //set the max beat
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	30 93 34 01 	sts	0x0134, r19
     40e:	20 93 33 01 	sts	0x0133, r18
  switch (octave) {
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	49 30       	cpi	r20, 0x09	; 9
     416:	51 05       	cpc	r21, r1
     418:	20 f0       	brcs	.+8      	; 0x422 <play_note+0x26>
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
	break;
      } 
      break;
    default: OCR1A=0x0000;
     41a:	1b bc       	out	0x2b, r1	; 43
     41c:	1a bc       	out	0x2a, r1	; 42
  }
}
     41e:	cf 91       	pop	r28
     420:	08 95       	ret
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     422:	4a 5b       	subi	r20, 0xBA	; 186
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	fa 01       	movw	r30, r20
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     428:	99 27       	eor	r25, r25
     42a:	87 fd       	sbrc	r24, 7
     42c:	90 95       	com	r25
     42e:	a9 2f       	mov	r26, r25
     430:	b9 2f       	mov	r27, r25
     432:	81 54       	subi	r24, 0x41	; 65
     434:	91 09       	sbc	r25, r1
  //this would play a Db, octave 0 for 1 quarter note
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
     436:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
     43a:	87 30       	cpi	r24, 0x07	; 7
     43c:	91 05       	cpc	r25, r1
     43e:	78 f7       	brcc	.-34     	; 0x41e <play_note+0x22>
     440:	81 5b       	subi	r24, 0xB1	; 177
     442:	9f 4f       	sbci	r25, 0xFF	; 255
     444:	fc 01       	movw	r30, r24
     446:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
     44a:	87 30       	cpi	r24, 0x07	; 7
     44c:	91 05       	cpc	r25, r1
     44e:	38 f7       	brcc	.-50     	; 0x41e <play_note+0x22>
     450:	8a 5a       	subi	r24, 0xAA	; 170
     452:	9f 4f       	sbci	r25, 0xFF	; 255
     454:	fc 01       	movw	r30, r24
     456:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
  //120 bpm (every 32ms inc beat)
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
     45a:	87 30       	cpi	r24, 0x07	; 7
     45c:	91 05       	cpc	r25, r1
     45e:	f8 f6       	brcc	.-66     	; 0x41e <play_note+0x22>
     460:	83 5a       	subi	r24, 0xA3	; 163
     462:	9f 4f       	sbci	r25, 0xFF	; 255
     464:	fc 01       	movw	r30, r24
     466:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
     46a:	87 30       	cpi	r24, 0x07	; 7
     46c:	91 05       	cpc	r25, r1
     46e:	b8 f6       	brcc	.-82     	; 0x41e <play_note+0x22>
     470:	8c 59       	subi	r24, 0x9C	; 156
     472:	9f 4f       	sbci	r25, 0xFF	; 255
     474:	fc 01       	movw	r30, r24
     476:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
     47a:	87 30       	cpi	r24, 0x07	; 7
     47c:	91 05       	cpc	r25, r1
     47e:	78 f6       	brcc	.-98     	; 0x41e <play_note+0x22>
     480:	85 59       	subi	r24, 0x95	; 149
     482:	9f 4f       	sbci	r25, 0xFF	; 255
     484:	fc 01       	movw	r30, r24
     486:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
     48a:	87 30       	cpi	r24, 0x07	; 7
     48c:	91 05       	cpc	r25, r1
     48e:	38 f6       	brcc	.-114    	; 0x41e <play_note+0x22>
     490:	8e 58       	subi	r24, 0x8E	; 142
     492:	9f 4f       	sbci	r25, 0xFF	; 255
     494:	fc 01       	movw	r30, r24
     496:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
     49a:	87 30       	cpi	r24, 0x07	; 7
     49c:	91 05       	cpc	r25, r1
     49e:	08 f0       	brcs	.+2      	; 0x4a2 <play_note+0xa6>
     4a0:	be cf       	rjmp	.-132    	; 0x41e <play_note+0x22>
     4a2:	87 58       	subi	r24, 0x87	; 135
     4a4:	9f 4f       	sbci	r25, 0xFF	; 255
     4a6:	fc 01       	movw	r30, r24
     4a8:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
     4ac:	87 30       	cpi	r24, 0x07	; 7
     4ae:	91 05       	cpc	r25, r1
     4b0:	08 f0       	brcs	.+2      	; 0x4b4 <play_note+0xb8>
     4b2:	b5 cf       	rjmp	.-150    	; 0x41e <play_note+0x22>
     4b4:	80 58       	subi	r24, 0x80	; 128
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	fc 01       	movw	r30, r24
     4ba:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
     4be:	87 30       	cpi	r24, 0x07	; 7
     4c0:	91 05       	cpc	r25, r1
     4c2:	08 f0       	brcs	.+2      	; 0x4c6 <play_note+0xca>
     4c4:	ac cf       	rjmp	.-168    	; 0x41e <play_note+0x22>
     4c6:	89 57       	subi	r24, 0x79	; 121
     4c8:	9f 4f       	sbci	r25, 0xFF	; 255
     4ca:	fc 01       	movw	r30, r24
     4cc:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
     4d0:	88 e5       	ldi	r24, 0x58	; 88
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	9b bd       	out	0x2b, r25	; 43
     4d6:	8a bd       	out	0x2a, r24	; 42
	break;
     4d8:	a2 cf       	rjmp	.-188    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
     4da:	66 23       	and	r22, r22
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <play_note+0xe4>
     4de:	0f c2       	rjmp	.+1054   	; 0x8fe <play_note+0x502>
     4e0:	83 e6       	ldi	r24, 0x63	; 99
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	9b bd       	out	0x2b, r25	; 43
     4e6:	8a bd       	out	0x2a, r24	; 42
     4e8:	9a cf       	rjmp	.-204    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
     4ea:	66 23       	and	r22, r22
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <play_note+0xf4>
     4ee:	11 c2       	rjmp	.+1058   	; 0x912 <play_note+0x516>
     4f0:	8f e6       	ldi	r24, 0x6F	; 111
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	9b bd       	out	0x2b, r25	; 43
     4f6:	8a bd       	out	0x2a, r24	; 42
     4f8:	92 cf       	rjmp	.-220    	; 0x41e <play_note+0x22>
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
     4fa:	86 e7       	ldi	r24, 0x76	; 118
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9b bd       	out	0x2b, r25	; 43
     500:	8a bd       	out	0x2a, r24	; 42
	break;
     502:	8d cf       	rjmp	.-230    	; 0x41e <play_note+0x22>
        else {OCR1A=G5;}
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
     504:	66 23       	and	r22, r22
     506:	09 f4       	brne	.+2      	; 0x50a <play_note+0x10e>
     508:	ff c1       	rjmp	.+1022   	; 0x908 <play_note+0x50c>
     50a:	8a e4       	ldi	r24, 0x4A	; 74
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	9b bd       	out	0x2b, r25	; 43
     510:	8a bd       	out	0x2a, r24	; 42
     512:	85 cf       	rjmp	.-246    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
     514:	66 23       	and	r22, r22
     516:	09 f4       	brne	.+2      	; 0x51a <play_note+0x11e>
     518:	01 c2       	rjmp	.+1026   	; 0x91c <play_note+0x520>
     51a:	83 e5       	ldi	r24, 0x53	; 83
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	9b bd       	out	0x2b, r25	; 43
     520:	8a bd       	out	0x2a, r24	; 42
     522:	7d cf       	rjmp	.-262    	; 0x41e <play_note+0x22>
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
     524:	66 23       	and	r22, r22
     526:	09 f4       	brne	.+2      	; 0x52a <play_note+0x12e>
     528:	b8 c1       	rjmp	.+880    	; 0x89a <play_note+0x49e>
     52a:	82 e4       	ldi	r24, 0x42	; 66
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	9b bd       	out	0x2b, r25	; 43
     530:	8a bd       	out	0x2a, r24	; 42
     532:	75 cf       	rjmp	.-278    	; 0x41e <play_note+0x22>
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
     534:	81 eb       	ldi	r24, 0xB1	; 177
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	9b bd       	out	0x2b, r25	; 43
     53a:	8a bd       	out	0x2a, r24	; 42
	break;
     53c:	70 cf       	rjmp	.-288    	; 0x41e <play_note+0x22>
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
     53e:	66 23       	and	r22, r22
     540:	09 f4       	brne	.+2      	; 0x544 <play_note+0x148>
     542:	d3 c1       	rjmp	.+934    	; 0x8ea <play_note+0x4ee>
     544:	85 e8       	ldi	r24, 0x85	; 133
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9b bd       	out	0x2b, r25	; 43
     54a:	8a bd       	out	0x2a, r24	; 42
     54c:	68 cf       	rjmp	.-304    	; 0x41e <play_note+0x22>
        else {OCR1A=G4;}
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
     54e:	66 23       	and	r22, r22
     550:	09 f4       	brne	.+2      	; 0x554 <play_note+0x158>
     552:	c1 c1       	rjmp	.+898    	; 0x8d6 <play_note+0x4da>
     554:	85 e9       	ldi	r24, 0x95	; 149
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	9b bd       	out	0x2b, r25	; 43
     55a:	8a bd       	out	0x2a, r24	; 42
     55c:	60 cf       	rjmp	.-320    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
     55e:	66 23       	and	r22, r22
     560:	09 f4       	brne	.+2      	; 0x564 <play_note+0x168>
     562:	be c1       	rjmp	.+892    	; 0x8e0 <play_note+0x4e4>
     564:	87 ea       	ldi	r24, 0xA7	; 167
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	9b bd       	out	0x2b, r25	; 43
     56a:	8a bd       	out	0x2a, r24	; 42
     56c:	58 cf       	rjmp	.-336    	; 0x41e <play_note+0x22>
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
     56e:	84 e6       	ldi	r24, 0x64	; 100
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	9b bd       	out	0x2b, r25	; 43
     574:	8a bd       	out	0x2a, r24	; 42
	break;
     576:	53 cf       	rjmp	.-346    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
     578:	66 23       	and	r22, r22
     57a:	09 f4       	brne	.+2      	; 0x57e <play_note+0x182>
     57c:	bb c1       	rjmp	.+886    	; 0x8f4 <play_note+0x4f8>
     57e:	80 ee       	ldi	r24, 0xE0	; 224
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	9b bd       	out	0x2b, r25	; 43
     584:	8a bd       	out	0x2a, r24	; 42
     586:	4b cf       	rjmp	.-362    	; 0x41e <play_note+0x22>
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
	break;
      case 'C': OCR1A=C5;
     588:	8d ee       	ldi	r24, 0xED	; 237
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9b bd       	out	0x2b, r25	; 43
     58e:	8a bd       	out	0x2a, r24	; 42
	break;
     590:	46 cf       	rjmp	.-372    	; 0x41e <play_note+0x22>
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
     592:	66 23       	and	r22, r22
     594:	09 f4       	brne	.+2      	; 0x598 <play_note+0x19c>
     596:	8b c1       	rjmp	.+790    	; 0x8ae <play_note+0x4b2>
     598:	87 ec       	ldi	r24, 0xC7	; 199
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	9b bd       	out	0x2b, r25	; 43
     59e:	8a bd       	out	0x2a, r24	; 42
     5a0:	3e cf       	rjmp	.-388    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
     5a2:	66 23       	and	r22, r22
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <play_note+0x1ac>
     5a6:	74 c1       	rjmp	.+744    	; 0x890 <play_note+0x494>
     5a8:	80 e9       	ldi	r24, 0x90	; 144
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	9b bd       	out	0x2b, r25	; 43
     5ae:	8a bd       	out	0x2a, r24	; 42
     5b0:	36 cf       	rjmp	.-404    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
     5b2:	66 23       	and	r22, r22
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <play_note+0x1bc>
     5b6:	cb c1       	rjmp	.+918    	; 0x94e <play_note+0x552>
     5b8:	84 e8       	ldi	r24, 0x84	; 132
     5ba:	93 e0       	ldi	r25, 0x03	; 3
     5bc:	9b bd       	out	0x2b, r25	; 43
     5be:	8a bd       	out	0x2a, r24	; 42
     5c0:	2e cf       	rjmp	.-420    	; 0x41e <play_note+0x22>
        else {OCR1A=G3;}
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
     5c2:	66 23       	and	r22, r22
     5c4:	09 f4       	brne	.+2      	; 0x5c8 <play_note+0x1cc>
     5c6:	af c1       	rjmp	.+862    	; 0x926 <play_note+0x52a>
     5c8:	8b e2       	ldi	r24, 0x2B	; 43
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9b bd       	out	0x2b, r25	; 43
     5ce:	8a bd       	out	0x2a, r24	; 42
     5d0:	26 cf       	rjmp	.-436    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
     5d2:	66 23       	and	r22, r22
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <play_note+0x1dc>
     5d6:	b1 c1       	rjmp	.+866    	; 0x93a <play_note+0x53e>
     5d8:	82 ea       	ldi	r24, 0xA2	; 162
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	9b bd       	out	0x2b, r25	; 43
     5de:	8a bd       	out	0x2a, r24	; 42
     5e0:	1e cf       	rjmp	.-452    	; 0x41e <play_note+0x22>
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
     5e2:	8c ed       	ldi	r24, 0xDC	; 220
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	9b bd       	out	0x2b, r25	; 43
     5e8:	8a bd       	out	0x2a, r24	; 42
	break;
     5ea:	19 cf       	rjmp	.-462    	; 0x41e <play_note+0x22>
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
     5ec:	66 23       	and	r22, r22
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <play_note+0x1f6>
     5f0:	59 c1       	rjmp	.+690    	; 0x8a4 <play_note+0x4a8>
     5f2:	87 e1       	ldi	r24, 0x17	; 23
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	9b bd       	out	0x2b, r25	; 43
     5f8:	8a bd       	out	0x2a, r24	; 42
     5fa:	11 cf       	rjmp	.-478    	; 0x41e <play_note+0x22>
        else {OCR1A=G2;}
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
     5fc:	66 23       	and	r22, r22
     5fe:	09 f4       	brne	.+2      	; 0x602 <play_note+0x206>
     600:	b0 c1       	rjmp	.+864    	; 0x962 <play_note+0x566>
     602:	88 e5       	ldi	r24, 0x58	; 88
     604:	92 e0       	ldi	r25, 0x02	; 2
     606:	9b bd       	out	0x2b, r25	; 43
     608:	8a bd       	out	0x2a, r24	; 42
     60a:	09 cf       	rjmp	.-494    	; 0x41e <play_note+0x22>
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
     60c:	8a ec       	ldi	r24, 0xCA	; 202
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	9b bd       	out	0x2b, r25	; 43
     612:	8a bd       	out	0x2a, r24	; 42
	break;
     614:	04 cf       	rjmp	.-504    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
     616:	66 23       	and	r22, r22
     618:	09 f4       	brne	.+2      	; 0x61c <play_note+0x220>
     61a:	35 c1       	rjmp	.+618    	; 0x886 <play_note+0x48a>
     61c:	86 e4       	ldi	r24, 0x46	; 70
     61e:	96 e0       	ldi	r25, 0x06	; 6
     620:	9b bd       	out	0x2b, r25	; 43
     622:	8a bd       	out	0x2a, r24	; 42
     624:	fc ce       	rjmp	.-520    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
     626:	66 23       	and	r22, r22
     628:	09 f4       	brne	.+2      	; 0x62c <play_note+0x230>
     62a:	82 c1       	rjmp	.+772    	; 0x930 <play_note+0x534>
     62c:	8a e0       	ldi	r24, 0x0A	; 10
     62e:	97 e0       	ldi	r25, 0x07	; 7
     630:	9b bd       	out	0x2b, r25	; 43
     632:	8a bd       	out	0x2a, r24	; 42
     634:	f4 ce       	rjmp	.-536    	; 0x41e <play_note+0x22>
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
     636:	86 e9       	ldi	r24, 0x96	; 150
     638:	95 e0       	ldi	r25, 0x05	; 5
     63a:	9b bd       	out	0x2b, r25	; 43
     63c:	8a bd       	out	0x2a, r24	; 42
	break;
     63e:	ef ce       	rjmp	.-546    	; 0x41e <play_note+0x22>
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
     640:	8a eb       	ldi	r24, 0xBA	; 186
     642:	93 e0       	ldi	r25, 0x03	; 3
     644:	9b bd       	out	0x2b, r25	; 43
     646:	8a bd       	out	0x2a, r24	; 42
	break;
     648:	ea ce       	rjmp	.-556    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
     64a:	66 23       	and	r22, r22
     64c:	09 f4       	brne	.+2      	; 0x650 <play_note+0x254>
     64e:	7a c1       	rjmp	.+756    	; 0x944 <play_note+0x548>
     650:	81 ec       	ldi	r24, 0xC1	; 193
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	9b bd       	out	0x2b, r25	; 43
     656:	8a bd       	out	0x2a, r24	; 42
     658:	e2 ce       	rjmp	.-572    	; 0x41e <play_note+0x22>
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
     65a:	66 23       	and	r22, r22
     65c:	09 f4       	brne	.+2      	; 0x660 <play_note+0x264>
     65e:	7c c1       	rjmp	.+760    	; 0x958 <play_note+0x55c>
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	9b bd       	out	0x2b, r25	; 43
     666:	8a bd       	out	0x2a, r24	; 42
     668:	da ce       	rjmp	.-588    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
     66a:	66 23       	and	r22, r22
     66c:	09 f4       	brne	.+2      	; 0x670 <play_note+0x274>
     66e:	7e c1       	rjmp	.+764    	; 0x96c <play_note+0x570>
     670:	80 e5       	ldi	r24, 0x50	; 80
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	9b bd       	out	0x2b, r25	; 43
     676:	8a bd       	out	0x2a, r24	; 42
     678:	d2 ce       	rjmp	.-604    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
     67a:	66 23       	and	r22, r22
     67c:	09 f4       	brne	.+2      	; 0x680 <play_note+0x284>
     67e:	ad c1       	rjmp	.+858    	; 0x9da <play_note+0x5de>
     680:	82 e2       	ldi	r24, 0x22	; 34
     682:	93 e0       	ldi	r25, 0x03	; 3
     684:	9b bd       	out	0x2b, r25	; 43
     686:	8a bd       	out	0x2a, r24	; 42
     688:	ca ce       	rjmp	.-620    	; 0x41e <play_note+0x22>
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
     68a:	86 e7       	ldi	r24, 0x76	; 118
     68c:	97 e0       	ldi	r25, 0x07	; 7
     68e:	9b bd       	out	0x2b, r25	; 43
     690:	8a bd       	out	0x2a, r24	; 42
	break;
     692:	c5 ce       	rjmp	.-630    	; 0x41e <play_note+0x22>
  PORTD &= unmute;      //unmute (just in case)
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
     694:	66 23       	and	r22, r22
     696:	09 f4       	brne	.+2      	; 0x69a <play_note+0x29e>
     698:	0f c1       	rjmp	.+542    	; 0x8b8 <play_note+0x4bc>
     69a:	8e ec       	ldi	r24, 0xCE	; 206
     69c:	92 e1       	ldi	r25, 0x12	; 18
     69e:	9b bd       	out	0x2b, r25	; 43
     6a0:	8a bd       	out	0x2a, r24	; 42
     6a2:	bd ce       	rjmp	.-646    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
     6a4:	66 23       	and	r22, r22
     6a6:	09 f4       	brne	.+2      	; 0x6aa <play_note+0x2ae>
     6a8:	7a c1       	rjmp	.+756    	; 0x99e <play_note+0x5a2>
     6aa:	8d e1       	ldi	r24, 0x1D	; 29
     6ac:	95 e1       	ldi	r25, 0x15	; 21
     6ae:	9b bd       	out	0x2b, r25	; 43
     6b0:	8a bd       	out	0x2a, r24	; 42
     6b2:	b5 ce       	rjmp	.-662    	; 0x41e <play_note+0x22>
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
     6b4:	66 23       	and	r22, r22
     6b6:	09 f4       	brne	.+2      	; 0x6ba <play_note+0x2be>
     6b8:	dc c0       	rjmp	.+440    	; 0x872 <play_note+0x476>
     6ba:	80 e6       	ldi	r24, 0x60	; 96
     6bc:	98 e0       	ldi	r25, 0x08	; 8
     6be:	9b bd       	out	0x2b, r25	; 43
     6c0:	8a bd       	out	0x2a, r24	; 42
     6c2:	ad ce       	rjmp	.-678    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
     6c4:	66 23       	and	r22, r22
     6c6:	09 f4       	brne	.+2      	; 0x6ca <play_note+0x2ce>
     6c8:	92 c1       	rjmp	.+804    	; 0x9ee <play_note+0x5f2>
     6ca:	80 e1       	ldi	r24, 0x10	; 16
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9b bd       	out	0x2b, r25	; 43
     6d0:	8a bd       	out	0x2a, r24	; 42
     6d2:	a5 ce       	rjmp	.-694    	; 0x41e <play_note+0x22>
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
     6d4:	8e e2       	ldi	r24, 0x2E	; 46
     6d6:	9b e0       	ldi	r25, 0x0B	; 11
     6d8:	9b bd       	out	0x2b, r25	; 43
     6da:	8a bd       	out	0x2a, r24	; 42
	break;
     6dc:	a0 ce       	rjmp	.-704    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
     6de:	66 23       	and	r22, r22
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <play_note+0x2e8>
     6e2:	49 c1       	rjmp	.+658    	; 0x976 <play_note+0x57a>
     6e4:	8b e1       	ldi	r24, 0x1B	; 27
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	9b bd       	out	0x2b, r25	; 43
     6ea:	8a bd       	out	0x2a, r24	; 42
     6ec:	98 ce       	rjmp	.-720    	; 0x41e <play_note+0x22>
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
     6ee:	8c e1       	ldi	r24, 0x1C	; 28
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9b bd       	out	0x2b, r25	; 43
     6f4:	8a bd       	out	0x2a, r24	; 42
	break;
     6f6:	93 ce       	rjmp	.-730    	; 0x41e <play_note+0x22>
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
     6f8:	66 23       	and	r22, r22
     6fa:	09 f4       	brne	.+2      	; 0x6fe <play_note+0x302>
     6fc:	41 c1       	rjmp	.+642    	; 0x980 <play_note+0x584>
     6fe:	87 e0       	ldi	r24, 0x07	; 7
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	9b bd       	out	0x2b, r25	; 43
     704:	8a bd       	out	0x2a, r24	; 42
     706:	8b ce       	rjmp	.-746    	; 0x41e <play_note+0x22>
        else {OCR1A=G7;}
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
     708:	66 23       	and	r22, r22
     70a:	09 f4       	brne	.+2      	; 0x70e <play_note+0x312>
     70c:	da c0       	rjmp	.+436    	; 0x8c2 <play_note+0x4c6>
     70e:	8b e0       	ldi	r24, 0x0B	; 11
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	9b bd       	out	0x2b, r25	; 43
     714:	8a bd       	out	0x2a, r24	; 42
     716:	83 ce       	rjmp	.-762    	; 0x41e <play_note+0x22>
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
     718:	82 e1       	ldi	r24, 0x12	; 18
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	9b bd       	out	0x2b, r25	; 43
     71e:	8a bd       	out	0x2a, r24	; 42
	break;
     720:	7e ce       	rjmp	.-772    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
     722:	66 23       	and	r22, r22
     724:	09 f4       	brne	.+2      	; 0x728 <play_note+0x32c>
     726:	9b c0       	rjmp	.+310    	; 0x85e <play_note+0x462>
     728:	89 e1       	ldi	r24, 0x19	; 25
     72a:	99 e1       	ldi	r25, 0x19	; 25
     72c:	9b bd       	out	0x2b, r25	; 43
     72e:	8a bd       	out	0x2a, r24	; 42
     730:	76 ce       	rjmp	.-788    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
     732:	66 23       	and	r22, r22
     734:	09 f4       	brne	.+2      	; 0x738 <play_note+0x33c>
     736:	29 c1       	rjmp	.+594    	; 0x98a <play_note+0x58e>
     738:	80 e3       	ldi	r24, 0x30	; 48
     73a:	9c e1       	ldi	r25, 0x1C	; 28
     73c:	9b bd       	out	0x2b, r25	; 43
     73e:	8a bd       	out	0x2a, r24	; 42
     740:	6e ce       	rjmp	.-804    	; 0x41e <play_note+0x22>
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
     742:	8c ed       	ldi	r24, 0xDC	; 220
     744:	9d e1       	ldi	r25, 0x1D	; 29
     746:	9b bd       	out	0x2b, r25	; 43
     748:	8a bd       	out	0x2a, r24	; 42
	break;
     74a:	69 ce       	rjmp	.-814    	; 0x41e <play_note+0x22>
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
     74c:	8a e3       	ldi	r24, 0x3A	; 58
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9b bd       	out	0x2b, r25	; 43
     752:	8a bd       	out	0x2a, r24	; 42
	break;
     754:	64 ce       	rjmp	.-824    	; 0x41e <play_note+0x22>
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
     756:	66 23       	and	r22, r22
     758:	09 f4       	brne	.+2      	; 0x75c <play_note+0x360>
     75a:	35 c1       	rjmp	.+618    	; 0x9c6 <play_note+0x5ca>
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9b bd       	out	0x2b, r25	; 43
     762:	8a bd       	out	0x2a, r24	; 42
     764:	5c ce       	rjmp	.-840    	; 0x41e <play_note+0x22>
        else {OCR1A=G6;}
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
     766:	66 23       	and	r22, r22
     768:	09 f4       	brne	.+2      	; 0x76c <play_note+0x370>
     76a:	32 c1       	rjmp	.+612    	; 0x9d0 <play_note+0x5d4>
     76c:	84 e2       	ldi	r24, 0x24	; 36
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	9b bd       	out	0x2b, r25	; 43
     772:	8a bd       	out	0x2a, r24	; 42
     774:	54 ce       	rjmp	.-856    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
     776:	66 23       	and	r22, r22
     778:	09 f4       	brne	.+2      	; 0x77c <play_note+0x380>
     77a:	76 c0       	rjmp	.+236    	; 0x868 <play_note+0x46c>
     77c:	89 e2       	ldi	r24, 0x29	; 41
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9b bd       	out	0x2b, r25	; 43
     782:	8a bd       	out	0x2a, r24	; 42
     784:	4c ce       	rjmp	.-872    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
     786:	66 23       	and	r22, r22
     788:	09 f4       	brne	.+2      	; 0x78c <play_note+0x390>
     78a:	78 c0       	rjmp	.+240    	; 0x87c <play_note+0x480>
     78c:	81 e3       	ldi	r24, 0x31	; 49
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	9b bd       	out	0x2b, r25	; 43
     792:	8a bd       	out	0x2a, r24	; 42
     794:	44 ce       	rjmp	.-888    	; 0x41e <play_note+0x22>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
     796:	8b e2       	ldi	r24, 0x2B	; 43
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9b bd       	out	0x2b, r25	; 43
     79c:	8a bd       	out	0x2a, r24	; 42
	break;
     79e:	3f ce       	rjmp	.-898    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
     7a0:	66 23       	and	r22, r22
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <play_note+0x3aa>
     7a4:	93 c0       	rjmp	.+294    	; 0x8cc <play_note+0x4d0>
     7a6:	87 e3       	ldi	r24, 0x37	; 55
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9b bd       	out	0x2b, r25	; 43
     7ac:	8a bd       	out	0x2a, r24	; 42
     7ae:	37 ce       	rjmp	.-914    	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
     7b0:	66 23       	and	r22, r22
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <play_note+0x3ba>
     7b4:	4f c0       	rjmp	.+158    	; 0x854 <play_note+0x458>
     7b6:	88 e1       	ldi	r24, 0x18	; 24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	9b bd       	out	0x2b, r25	; 43
     7bc:	8a bd       	out	0x2a, r24	; 42
     7be:	2f ce       	rjmp	.-930    	; 0x41e <play_note+0x22>
        else {OCR1A=G1;}
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
     7c0:	66 23       	and	r22, r22
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <play_note+0x3ca>
     7c4:	f6 c0       	rjmp	.+492    	; 0x9b2 <play_note+0x5b6>
     7c6:	82 eb       	ldi	r24, 0xB2	; 178
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	9b bd       	out	0x2b, r25	; 43
     7cc:	8a bd       	out	0x2a, r24	; 42
     7ce:	27 ce       	rjmp	.-946    	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
     7d0:	66 23       	and	r22, r22
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <play_note+0x3da>
     7d4:	16 c1       	rjmp	.+556    	; 0xa02 <play_note+0x606>
     7d6:	8d e8       	ldi	r24, 0x8D	; 141
     7d8:	9a e0       	ldi	r25, 0x0A	; 10
     7da:	9b bd       	out	0x2b, r25	; 43
     7dc:	8a bd       	out	0x2a, r24	; 42
     7de:	1f ce       	rjmp	.-962    	; 0x41e <play_note+0x22>
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
     7e0:	66 23       	and	r22, r22
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <play_note+0x3ea>
     7e4:	d7 c0       	rjmp	.+430    	; 0x994 <play_note+0x598>
     7e6:	86 e1       	ldi	r24, 0x16	; 22
     7e8:	9e e0       	ldi	r25, 0x0E	; 14
     7ea:	9b bd       	out	0x2b, r25	; 43
     7ec:	8a bd       	out	0x2a, r24	; 42
     7ee:	17 ce       	rjmp	.-978    	; 0x41e <play_note+0x22>
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
     7f0:	66 23       	and	r22, r22
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <play_note+0x3fa>
     7f4:	f7 c0       	rjmp	.+494    	; 0x9e4 <play_note+0x5e8>
     7f6:	80 ec       	ldi	r24, 0xC0	; 192
     7f8:	90 e1       	ldi	r25, 0x10	; 16
     7fa:	9b bd       	out	0x2b, r25	; 43
     7fc:	8a bd       	out	0x2a, r24	; 42
     7fe:	0f ce       	rjmp	.-994    	; 0x41e <play_note+0x22>
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
     800:	66 23       	and	r22, r22
     802:	09 f4       	brne	.+2      	; 0x806 <play_note+0x40a>
     804:	d1 c0       	rjmp	.+418    	; 0x9a8 <play_note+0x5ac>
     806:	8f e2       	ldi	r24, 0x2F	; 47
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	9b bd       	out	0x2b, r25	; 43
     80c:	8a bd       	out	0x2a, r24	; 42
     80e:	07 ce       	rjmp	.-1010   	; 0x41e <play_note+0x22>
        else {OCR1A=G0;}
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
     810:	66 23       	and	r22, r22
     812:	09 f4       	brne	.+2      	; 0x816 <play_note+0x41a>
     814:	f1 c0       	rjmp	.+482    	; 0x9f8 <play_note+0x5fc>
     816:	87 e6       	ldi	r24, 0x67	; 103
     818:	99 e0       	ldi	r25, 0x09	; 9
     81a:	9b bd       	out	0x2b, r25	; 43
     81c:	8a bd       	out	0x2a, r24	; 42
     81e:	ff cd       	rjmp	.-1026   	; 0x41e <play_note+0x22>
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
     820:	66 23       	and	r22, r22
     822:	09 f4       	brne	.+2      	; 0x826 <play_note+0x42a>
     824:	cb c0       	rjmp	.+406    	; 0x9bc <play_note+0x5c0>
     826:	8d e8       	ldi	r24, 0x8D	; 141
     828:	9c e0       	ldi	r25, 0x0C	; 12
     82a:	9b bd       	out	0x2b, r25	; 43
     82c:	8a bd       	out	0x2a, r24	; 42
     82e:	f7 cd       	rjmp	.-1042   	; 0x41e <play_note+0x22>
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
     830:	8d e5       	ldi	r24, 0x5D	; 93
     832:	96 e1       	ldi	r25, 0x16	; 22
     834:	9b bd       	out	0x2b, r25	; 43
     836:	8a bd       	out	0x2a, r24	; 42
	break;
     838:	f2 cd       	rjmp	.-1052   	; 0x41e <play_note+0x22>
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
     83a:	66 23       	and	r22, r22
     83c:	09 f4       	brne	.+2      	; 0x840 <play_note+0x444>
     83e:	e6 c0       	rjmp	.+460    	; 0xa0c <play_note+0x610>
     840:	86 e4       	ldi	r24, 0x46	; 70
     842:	95 e0       	ldi	r25, 0x05	; 5
     844:	9b bd       	out	0x2b, r25	; 43
     846:	8a bd       	out	0x2a, r24	; 42
     848:	ea cd       	rjmp	.-1068   	; 0x41e <play_note+0x22>
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
     84a:	8d ee       	ldi	r24, 0xED	; 237
     84c:	9e e0       	ldi	r25, 0x0E	; 14
     84e:	9b bd       	out	0x2b, r25	; 43
     850:	8a bd       	out	0x2a, r24	; 42
	break;
     852:	e5 cd       	rjmp	.-1078   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
	break;
      case 'E': if(flat){OCR1A=Eb8;}
        else {OCR1A=E8;}
     854:	85 e1       	ldi	r24, 0x15	; 21
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	9b bd       	out	0x2b, r25	; 43
     85a:	8a bd       	out	0x2a, r24	; 42
     85c:	e0 cd       	rjmp	.-1088   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
	break;
      case 'E': if(flat){OCR1A=Eb0;}
        else {OCR1A=E0;}
     85e:	82 eb       	ldi	r24, 0xB2	; 178
     860:	97 e1       	ldi	r25, 0x17	; 23
     862:	9b bd       	out	0x2b, r25	; 43
     864:	8a bd       	out	0x2a, r24	; 42
     866:	db cd       	rjmp	.-1098   	; 0x41e <play_note+0x22>
        else {OCR1A=E7;}
	break;
      case 'F': OCR1A=F7;
	break;
      case 'G': if(flat){OCR1A=Gb7;}
        else {OCR1A=G7;}
     868:	86 e2       	ldi	r24, 0x26	; 38
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	9b bd       	out	0x2b, r25	; 43
     86e:	8a bd       	out	0x2a, r24	; 42
     870:	d6 cd       	rjmp	.-1108   	; 0x41e <play_note+0x22>
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
	break;
      case 'B': if(flat){OCR1A=Bb1;}
        else {OCR1A=B1;}
     872:	87 ee       	ldi	r24, 0xE7	; 231
     874:	97 e0       	ldi	r25, 0x07	; 7
     876:	9b bd       	out	0x2b, r25	; 43
     878:	8a bd       	out	0x2a, r24	; 42
     87a:	d1 cd       	rjmp	.-1118   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
	break;
      case 'E': if(flat){OCR1A=Eb7;}
        else {OCR1A=E7;}
     87c:	8e e2       	ldi	r24, 0x2E	; 46
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9b bd       	out	0x2b, r25	; 43
     882:	8a bd       	out	0x2a, r24	; 42
     884:	cc cd       	rjmp	.-1128   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
	break;
      case 'E': if(flat){OCR1A=Eb2;}
        else {OCR1A=E2;}
     886:	8b ee       	ldi	r24, 0xEB	; 235
     888:	95 e0       	ldi	r25, 0x05	; 5
     88a:	9b bd       	out	0x2b, r25	; 43
     88c:	8a bd       	out	0x2a, r24	; 42
     88e:	c7 cd       	rjmp	.-1138   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
	break;
      case 'E': if(flat){OCR1A=Eb4;}
        else {OCR1A=E4;}
     890:	8a e7       	ldi	r24, 0x7A	; 122
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	9b bd       	out	0x2b, r25	; 43
     896:	8a bd       	out	0x2a, r24	; 42
     898:	c2 cd       	rjmp	.-1148   	; 0x41e <play_note+0x22>
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
	break;
      case 'B': if(flat){OCR1A=Bb6;}
        else {OCR1A=B6;}
     89a:	8e e3       	ldi	r24, 0x3E	; 62
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9b bd       	out	0x2b, r25	; 43
     8a0:	8a bd       	out	0x2a, r24	; 42
     8a2:	bd cd       	rjmp	.-1158   	; 0x41e <play_note+0x22>
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
	break;
      case 'B': if(flat){OCR1A=Bb3;}
        else {OCR1A=B3;}
     8a4:	89 ef       	ldi	r24, 0xF9	; 249
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	9b bd       	out	0x2b, r25	; 43
     8aa:	8a bd       	out	0x2a, r24	; 42
     8ac:	b8 cd       	rjmp	.-1168   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
	break;
      case 'E': if(flat){OCR1A=Eb5;}
        else {OCR1A=E5;}
     8ae:	8c eb       	ldi	r24, 0xBC	; 188
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	9b bd       	out	0x2b, r25	; 43
     8b4:	8a bd       	out	0x2a, r24	; 42
     8b6:	b3 cd       	rjmp	.-1178   	; 0x41e <play_note+0x22>
  beat = 0;             //reset the beat counter
  max_beat = duration;  //set the max beat
  switch (octave) {
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
     8b8:	80 ec       	ldi	r24, 0xC0	; 192
     8ba:	91 e1       	ldi	r25, 0x11	; 17
     8bc:	9b bd       	out	0x2b, r25	; 43
     8be:	8a bd       	out	0x2a, r24	; 42
     8c0:	ae cd       	rjmp	.-1188   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
     8c2:	89 e0       	ldi	r24, 0x09	; 9
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	9b bd       	out	0x2b, r25	; 43
     8c8:	8a bd       	out	0x2a, r24	; 42
     8ca:	a9 cd       	rjmp	.-1198   	; 0x41e <play_note+0x22>
        else {OCR1A=B7;}
	break;
      case 'C': OCR1A=C7;
	break;
      case 'D': if(flat){OCR1A=Db7;}
        else {OCR1A=D7;}
     8cc:	84 e3       	ldi	r24, 0x34	; 52
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	9b bd       	out	0x2b, r25	; 43
     8d2:	8a bd       	out	0x2a, r24	; 42
     8d4:	a4 cd       	rjmp	.-1208   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
     8d6:	8d e8       	ldi	r24, 0x8D	; 141
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	9b bd       	out	0x2b, r25	; 43
     8dc:	8a bd       	out	0x2a, r24	; 42
     8de:	9f cd       	rjmp	.-1218   	; 0x41e <play_note+0x22>
        else {OCR1A=E5;}
	break;
      case 'F': OCR1A=F5;
	break;
      case 'G': if(flat){OCR1A=Gb5;}
        else {OCR1A=G5;}
     8e0:	8e e9       	ldi	r24, 0x9E	; 158
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	9b bd       	out	0x2b, r25	; 43
     8e6:	8a bd       	out	0x2a, r24	; 42
     8e8:	9a cd       	rjmp	.-1228   	; 0x41e <play_note+0x22>
    case 5: switch (note) {
      case 'A': if(flat){OCR1A=Ab5;}
        else {OCR1A=A5;}
	break;
      case 'B': if(flat){OCR1A=Bb5;}
        else {OCR1A=B5;}
     8ea:	8d e7       	ldi	r24, 0x7D	; 125
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	9b bd       	out	0x2b, r25	; 43
     8f0:	8a bd       	out	0x2a, r24	; 42
     8f2:	95 cd       	rjmp	.-1238   	; 0x41e <play_note+0x22>
	break;
      case 'C': OCR1A=C5;
	break;
      case 'D': if(flat){OCR1A=Db5;}
        else {OCR1A=D5;}
     8f4:	83 ed       	ldi	r24, 0xD3	; 211
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	9b bd       	out	0x2b, r25	; 43
     8fa:	8a bd       	out	0x2a, r24	; 42
     8fc:	90 cd       	rjmp	.-1248   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
	break;
      case 'E': if(flat){OCR1A=Eb6;}
        else {OCR1A=E6;}
     8fe:	8d e5       	ldi	r24, 0x5D	; 93
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	9b bd       	out	0x2b, r25	; 43
     904:	8a bd       	out	0x2a, r24	; 42
     906:	8b cd       	rjmp	.-1258   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 6: switch (note) {
      case 'A': if(flat){OCR1A=Ab6;}
        else {OCR1A=A6;}
     908:	86 e4       	ldi	r24, 0x46	; 70
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9b bd       	out	0x2b, r25	; 43
     90e:	8a bd       	out	0x2a, r24	; 42
     910:	86 cd       	rjmp	.-1268   	; 0x41e <play_note+0x22>
        else {OCR1A=B6;}
	break;
      case 'C': OCR1A=C6;
	break;
      case 'D': if(flat){OCR1A=Db6;}
        else {OCR1A=D6;}
     912:	89 e6       	ldi	r24, 0x69	; 105
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	9b bd       	out	0x2b, r25	; 43
     918:	8a bd       	out	0x2a, r24	; 42
     91a:	81 cd       	rjmp	.-1278   	; 0x41e <play_note+0x22>
        else {OCR1A=E6;}
	break;
      case 'F': OCR1A=F6;
	break;
      case 'G': if(flat){OCR1A=Gb6;}
        else {OCR1A=G6;}
     91c:	8e e4       	ldi	r24, 0x4E	; 78
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9b bd       	out	0x2b, r25	; 43
     922:	8a bd       	out	0x2a, r24	; 42
     924:	7c cd       	rjmp	.-1288   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
     926:	8b e1       	ldi	r24, 0x1B	; 27
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	9b bd       	out	0x2b, r25	; 43
     92c:	8a bd       	out	0x2a, r24	; 42
     92e:	77 cd       	rjmp	.-1298   	; 0x41e <play_note+0x22>
        else {OCR1A=B2;}
	break;
      case 'C': OCR1A=C2;
	break;
      case 'D': if(flat){OCR1A=Db2;}
        else {OCR1A=D2;}
     930:	85 ea       	ldi	r24, 0xA5	; 165
     932:	96 e0       	ldi	r25, 0x06	; 6
     934:	9b bd       	out	0x2b, r25	; 43
     936:	8a bd       	out	0x2a, r24	; 42
     938:	72 cd       	rjmp	.-1308   	; 0x41e <play_note+0x22>
        else {OCR1A=E3;}
	break;
      case 'F': OCR1A=F3;
	break;
      case 'G': if(flat){OCR1A=Gb3;}
        else {OCR1A=G3;}
     93a:	8c e7       	ldi	r24, 0x7C	; 124
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	9b bd       	out	0x2b, r25	; 43
     940:	8a bd       	out	0x2a, r24	; 42
     942:	6d cd       	rjmp	.-1318   	; 0x41e <play_note+0x22>
        else {OCR1A=B4;}
	break;
      case 'C': OCR1A=C4;
	break;
      case 'D': if(flat){OCR1A=Db4;}
        else {OCR1A=D4;}
     944:	88 ea       	ldi	r24, 0xA8	; 168
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9b bd       	out	0x2b, r25	; 43
     94a:	8a bd       	out	0x2a, r24	; 42
     94c:	68 cd       	rjmp	.-1328   	; 0x41e <play_note+0x22>
        else {OCR1A=B3;}
	break;
      case 'C': OCR1A=C3;
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
     94e:	82 e5       	ldi	r24, 0x52	; 82
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	9b bd       	out	0x2b, r25	; 43
     954:	8a bd       	out	0x2a, r24	; 42
     956:	63 cd       	rjmp	.-1338   	; 0x41e <play_note+0x22>
    case 4: switch (note) {
      case 'A': if(flat){OCR1A=Ab4;}
        else {OCR1A=A4;}
	break;
      case 'B': if(flat){OCR1A=Bb4;}
        else {OCR1A=B4;}
     958:	8c ef       	ldi	r24, 0xFC	; 252
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	9b bd       	out	0x2b, r25	; 43
     95e:	8a bd       	out	0x2a, r24	; 42
     960:	5e cd       	rjmp	.-1348   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 3: switch (note) {
      case 'A': if(flat){OCR1A=Ab3;}
        else {OCR1A=A3;}
     962:	87 e3       	ldi	r24, 0x37	; 55
     964:	92 e0       	ldi	r25, 0x02	; 2
     966:	9b bd       	out	0x2b, r25	; 43
     968:	8a bd       	out	0x2a, r24	; 42
     96a:	59 cd       	rjmp	.-1358   	; 0x41e <play_note+0x22>
        else {OCR1A=E4;}
	break;
      case 'F': OCR1A=F4;
	break;
      case 'G': if(flat){OCR1A=Gb4;}
        else {OCR1A=G4;}
     96c:	8d e3       	ldi	r24, 0x3D	; 61
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	9b bd       	out	0x2b, r25	; 43
     972:	8a bd       	out	0x2a, r24	; 42
     974:	54 cd       	rjmp	.-1368   	; 0x41e <play_note+0x22>
        else {OCR1A=B8;}
	break;
      case 'C': OCR1A=C8;
	break;
      case 'D': if(flat){OCR1A=Db8;}
        else {OCR1A=D8;}
     976:	89 e1       	ldi	r24, 0x19	; 25
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	9b bd       	out	0x2b, r25	; 43
     97c:	8a bd       	out	0x2a, r24	; 42
     97e:	4f cd       	rjmp	.-1378   	; 0x41e <play_note+0x22>
    case 8: switch (note) {
      case 'A': if(flat){OCR1A=Ab8;}
        else {OCR1A=A8;}
	break;
      case 'B': if(flat){OCR1A=Bb8;}
        else {OCR1A=B8;}
     980:	85 e0       	ldi	r24, 0x05	; 5
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	9b bd       	out	0x2b, r25	; 43
     986:	8a bd       	out	0x2a, r24	; 42
     988:	4a cd       	rjmp	.-1388   	; 0x41e <play_note+0x22>
        else {OCR1A=B0;}
	break;
      case 'C': OCR1A=C0;
	break;
      case 'D': if(flat){OCR1A=Db0;}
        else {OCR1A=D0;}
     98a:	8a e9       	ldi	r24, 0x9A	; 154
     98c:	9a e1       	ldi	r25, 0x1A	; 26
     98e:	9b bd       	out	0x2b, r25	; 43
     990:	8a bd       	out	0x2a, r24	; 42
     992:	45 cd       	rjmp	.-1398   	; 0x41e <play_note+0x22>
        else {OCR1A=B1;}
	break;
      case 'C': OCR1A=C1;
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
     994:	8c e4       	ldi	r24, 0x4C	; 76
     996:	9d e0       	ldi	r25, 0x0D	; 13
     998:	9b bd       	out	0x2b, r25	; 43
     99a:	8a bd       	out	0x2a, r24	; 42
     99c:	40 cd       	rjmp	.-1408   	; 0x41e <play_note+0x22>
        else {OCR1A=E0;}
	break;
      case 'F': OCR1A=F0;
	break;
      case 'G': if(flat){OCR1A=Gb0;}
        else {OCR1A=G0;}
     99e:	8d ee       	ldi	r24, 0xED	; 237
     9a0:	93 e1       	ldi	r25, 0x13	; 19
     9a2:	9b bd       	out	0x2b, r25	; 43
     9a4:	8a bd       	out	0x2a, r24	; 42
     9a6:	3b cd       	rjmp	.-1418   	; 0x41e <play_note+0x22>
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
	break;
      case 'B': if(flat){OCR1A=Bb2;}
        else {OCR1A=B2;}
     9a8:	83 ef       	ldi	r24, 0xF3	; 243
     9aa:	93 e0       	ldi	r25, 0x03	; 3
     9ac:	9b bd       	out	0x2b, r25	; 43
     9ae:	8a bd       	out	0x2a, r24	; 42
     9b0:	36 cd       	rjmp	.-1428   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 2: switch (note) {
      case 'A': if(flat){OCR1A=Ab2;}
        else {OCR1A=A2;}
     9b2:	8f e6       	ldi	r24, 0x6F	; 111
     9b4:	94 e0       	ldi	r25, 0x04	; 4
     9b6:	9b bd       	out	0x2b, r25	; 43
     9b8:	8a bd       	out	0x2a, r24	; 42
     9ba:	31 cd       	rjmp	.-1438   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db1;}
        else {OCR1A=D1;}
	break;
      case 'E': if(flat){OCR1A=Eb1;}
        else {OCR1A=E1;}
     9bc:	88 ed       	ldi	r24, 0xD8	; 216
     9be:	9b e0       	ldi	r25, 0x0B	; 11
     9c0:	9b bd       	out	0x2b, r25	; 43
     9c2:	8a bd       	out	0x2a, r24	; 42
     9c4:	2c cd       	rjmp	.-1448   	; 0x41e <play_note+0x22>
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
	break;
      case 'B': if(flat){OCR1A=Bb7;}
        else {OCR1A=B7;}
     9c6:	8e e1       	ldi	r24, 0x1E	; 30
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9b bd       	out	0x2b, r25	; 43
     9cc:	8a bd       	out	0x2a, r24	; 42
     9ce:	27 cd       	rjmp	.-1458   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 7: switch (note) {
      case 'A': if(flat){OCR1A=Ab7;}
        else {OCR1A=A7;}
     9d0:	82 e2       	ldi	r24, 0x22	; 34
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9b bd       	out	0x2b, r25	; 43
     9d6:	8a bd       	out	0x2a, r24	; 42
     9d8:	22 cd       	rjmp	.-1468   	; 0x41e <play_note+0x22>
	break;
      case 'D': if(flat){OCR1A=Db3;}
        else {OCR1A=D3;}
	break;
      case 'E': if(flat){OCR1A=Eb3;}
        else {OCR1A=E3;}
     9da:	85 ef       	ldi	r24, 0xF5	; 245
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	9b bd       	out	0x2b, r25	; 43
     9e0:	8a bd       	out	0x2a, r24	; 42
     9e2:	1d cd       	rjmp	.-1478   	; 0x41e <play_note+0x22>
    case 0: switch (note) {
      case 'A': if(flat){OCR1A=Ab0;}
        else {OCR1A=A0;}
	break;
      case 'B': if(flat){OCR1A=Bb0;}
        else {OCR1A=B0;}
     9e4:	80 ed       	ldi	r24, 0xD0	; 208
     9e6:	9f e0       	ldi	r25, 0x0F	; 15
     9e8:	9b bd       	out	0x2b, r25	; 43
     9ea:	8a bd       	out	0x2a, r24	; 42
     9ec:	18 cd       	rjmp	.-1488   	; 0x41e <play_note+0x22>
        else {OCR1A=E8;}
	break;
      case 'F': OCR1A=F8;
	break;
      case 'G': if(flat){OCR1A=Gb8;}
        else {OCR1A=G8;}
     9ee:	8d e0       	ldi	r24, 0x0D	; 13
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	9b bd       	out	0x2b, r25	; 43
     9f4:	8a bd       	out	0x2a, r24	; 42
     9f6:	13 cd       	rjmp	.-1498   	; 0x41e <play_note+0x22>
	break;
      } 
      break;
    case 1: switch (note) {
      case 'A': if(flat){OCR1A=Ab1;}
        else {OCR1A=A1;}
     9f8:	8f ed       	ldi	r24, 0xDF	; 223
     9fa:	98 e0       	ldi	r25, 0x08	; 8
     9fc:	9b bd       	out	0x2b, r25	; 43
     9fe:	8a bd       	out	0x2a, r24	; 42
     a00:	0e cd       	rjmp	.-1508   	; 0x41e <play_note+0x22>
        else {OCR1A=E1;}
	break;
      case 'F': OCR1A=F1;
	break;
      case 'G': if(flat){OCR1A=Gb1;}
        else {OCR1A=G1;}
     a02:	86 ef       	ldi	r24, 0xF6	; 246
     a04:	99 e0       	ldi	r25, 0x09	; 9
     a06:	9b bd       	out	0x2b, r25	; 43
     a08:	8a bd       	out	0x2a, r24	; 42
     a0a:	09 cd       	rjmp	.-1518   	; 0x41e <play_note+0x22>
        else {OCR1A=E2;}
	break;
      case 'F': OCR1A=F2;
	break;
      case 'G': if(flat){OCR1A=Gb2;}
        else {OCR1A=G2;}
     a0c:	8a ef       	ldi	r24, 0xFA	; 250
     a0e:	94 e0       	ldi	r25, 0x04	; 4
     a10:	9b bd       	out	0x2b, r25	; 43
     a12:	8a bd       	out	0x2a, r24	; 42
     a14:	04 cd       	rjmp	.-1528   	; 0x41e <play_note+0x22>

00000a16 <song0>:
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     a16:	86 34       	cpi	r24, 0x46	; 70
     a18:	91 05       	cpc	r25, r1
     a1a:	20 f0       	brcs	.+8      	; 0xa24 <song0+0xe>
       break;
    case 68: play_note('F', 0, 4, 24);
       break;
    case 69: play_rest(8);
       break;
    default: notes=-1;
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	80 93 25 01 	sts	0x0125, r24
     a22:	08 95       	ret
volatile uint16_t beat;
volatile uint16_t max_beat;
volatile uint8_t  notes;

void song0(uint16_t note) { //beaver fight song (Max and Kellen)
  switch (note) {
     a24:	fc 01       	movw	r30, r24
     a26:	e2 57       	subi	r30, 0x72	; 114
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
     a2e:	22 e0       	ldi	r18, 0x02	; 2
     a30:	44 e0       	ldi	r20, 0x04	; 4
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	81 e4       	ldi	r24, 0x41	; 65
     a36:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 45: play_note('A', 0, 4, 6);
       break;
    case 46: play_note('A', 1, 4, 2);
       break;
    case 47: play_note('A', 0, 4, 6);
     a3a:	26 e0       	ldi	r18, 0x06	; 6
     a3c:	44 e0       	ldi	r20, 0x04	; 4
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	81 e4       	ldi	r24, 0x41	; 65
     a42:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
     a46:	22 e0       	ldi	r18, 0x02	; 2
     a48:	44 e0       	ldi	r20, 0x04	; 4
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	81 e4       	ldi	r24, 0x41	; 65
     a4e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 51: play_note('G', 1, 4, 8);
       break;
    case 52: play_note('G', 0, 4, 8);
       break;
    case 53: play_note('D', 0, 4, 8);
     a52:	28 e0       	ldi	r18, 0x08	; 8
     a54:	44 e0       	ldi	r20, 0x04	; 4
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	84 e4       	ldi	r24, 0x44	; 68
     a5a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 48: play_note('A', 1, 4, 2);
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
     a5e:	28 e0       	ldi	r18, 0x08	; 8
     a60:	44 e0       	ldi	r20, 0x04	; 4
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	86 e4       	ldi	r24, 0x46	; 70
     a66:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 54: play_note('B', 1, 4, 6);
       break;
    case 55: play_note('A', 0, 4, 2);
       break;
    case 56: play_note('B', 1, 4, 6);
     a6a:	26 e0       	ldi	r18, 0x06	; 6
     a6c:	44 e0       	ldi	r20, 0x04	; 4
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	82 e4       	ldi	r24, 0x42	; 66
     a72:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 42: play_note('E', 0, 4, 8);
       break;
    case 43: play_note('D', 0, 4, 8);
       break;
    case 44: play_note('C', 0, 4, 8);
     a76:	28 e0       	ldi	r18, 0x08	; 8
     a78:	44 e0       	ldi	r20, 0x04	; 4
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	83 e4       	ldi	r24, 0x43	; 67
     a7e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 64: play_note('C', 0, 5, 4);
       break;
    case 65: play_note('D', 0, 5, 4);
       break;
    case 66: play_note('A', 0, 4, 8);
     a82:	28 e0       	ldi	r18, 0x08	; 8
     a84:	44 e0       	ldi	r20, 0x04	; 4
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	81 e4       	ldi	r24, 0x41	; 65
     a8a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 67: play_note('G', 0, 4, 8);
     a8e:	28 e0       	ldi	r18, 0x08	; 8
     a90:	44 e0       	ldi	r20, 0x04	; 4
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	87 e4       	ldi	r24, 0x47	; 71
     a96:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 40: play_rest(8);
       break;
    case 41: play_note('F', 0, 4, 8);
       break;
    case 42: play_note('E', 0, 4, 8);
     a9a:	28 e0       	ldi	r18, 0x08	; 8
     a9c:	44 e0       	ldi	r20, 0x04	; 4
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	85 e4       	ldi	r24, 0x45	; 69
     aa2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
     aa6:	20 e1       	ldi	r18, 0x10	; 16
     aa8:	44 e0       	ldi	r20, 0x04	; 4
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	81 e4       	ldi	r24, 0x41	; 65
     aae:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
       break;
    case 64: play_note('C', 0, 5, 4);
     ab2:	24 e0       	ldi	r18, 0x04	; 4
     ab4:	45 e0       	ldi	r20, 0x05	; 5
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	83 e4       	ldi	r24, 0x43	; 67
     aba:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 65: play_note('D', 0, 5, 4);
     abe:	24 e0       	ldi	r18, 0x04	; 4
     ac0:	45 e0       	ldi	r20, 0x05	; 5
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	84 e4       	ldi	r24, 0x44	; 68
     ac6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     aca:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     acc:	10 92 36 01 	sts	0x0136, r1
     ad0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	90 93 34 01 	sts	0x0134, r25
     adc:	80 93 33 01 	sts	0x0133, r24
     ae0:	08 95       	ret
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ae2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ae4:	10 92 36 01 	sts	0x0136, r1
     ae8:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	90 93 34 01 	sts	0x0134, r25
     af4:	80 93 33 01 	sts	0x0133, r24
     af8:	08 95       	ret
       break;
    case 56: play_note('B', 1, 4, 6);
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
     afa:	20 e1       	ldi	r18, 0x10	; 16
     afc:	44 e0       	ldi	r20, 0x04	; 4
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	82 e4       	ldi	r24, 0x42	; 66
     b02:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
       break;
    case 63: play_note('B', 1, 4, 8);
     b06:	28 e0       	ldi	r18, 0x08	; 8
     b08:	44 e0       	ldi	r20, 0x04	; 4
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	82 e4       	ldi	r24, 0x42	; 66
     b0e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 37: play_note('G', 0, 4, 8);
       break;
    case 38: play_note('A', 0, 4, 8);
       break;
    case 39: play_note('G', 0, 4, 24);
     b12:	28 e1       	ldi	r18, 0x18	; 24
     b14:	44 e0       	ldi	r20, 0x04	; 4
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	87 e4       	ldi	r24, 0x47	; 71
     b1a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
       break;
    case 60: play_note('D', 0, 5, 16);
     b1e:	20 e1       	ldi	r18, 0x10	; 16
     b20:	45 e0       	ldi	r20, 0x05	; 5
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	84 e4       	ldi	r24, 0x44	; 68
     b26:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     b2a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     b2c:	10 92 36 01 	sts	0x0136, r1
     b30:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     b34:	82 e0       	ldi	r24, 0x02	; 2
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	90 93 34 01 	sts	0x0134, r25
     b3c:	80 93 33 01 	sts	0x0133, r24
     b40:	08 95       	ret
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
       break;
    case 36: play_note('A', 0, 4, 4);
     b42:	24 e0       	ldi	r18, 0x04	; 4
     b44:	44 e0       	ldi	r20, 0x04	; 4
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	81 e4       	ldi	r24, 0x41	; 65
     b4a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
       break;
    case 23: play_note('G', 0, 4, 6);
     b4e:	26 e0       	ldi	r18, 0x06	; 6
     b50:	44 e0       	ldi	r20, 0x04	; 4
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	87 e4       	ldi	r24, 0x47	; 71
     b56:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 20: play_note('G', 0, 4, 7);
       break;
    case 21: play_rest(1); //rest
       break;
    case 22: play_note('G', 1, 4, 4);
     b5a:	24 e0       	ldi	r18, 0x04	; 4
     b5c:	44 e0       	ldi	r20, 0x04	; 4
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	87 e4       	ldi	r24, 0x47	; 71
     b62:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 49: play_note('A', 0, 4, 16);
       break;
    case 50: play_note('F', 0, 4, 8);
       break;
    case 51: play_note('G', 1, 4, 8);
     b66:	28 e0       	ldi	r18, 0x08	; 8
     b68:	44 e0       	ldi	r20, 0x04	; 4
     b6a:	61 e0       	ldi	r22, 0x01	; 1
     b6c:	87 e4       	ldi	r24, 0x47	; 71
     b6e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 16: play_note('A', 0, 4, 2);
       break;
    case 17: play_note('B', 1, 4, 16);
       break;
    case 18: play_note('G', 0, 4, 3);
     b72:	23 e0       	ldi	r18, 0x03	; 3
     b74:	44 e0       	ldi	r20, 0x04	; 4
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	87 e4       	ldi	r24, 0x47	; 71
     b7a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 57: play_note('A', 0, 4, 2);
       break;
    case 58: play_note('B', 1, 4, 16);
      break;//phrase
    case 59: play_note('D', 0, 4, 16);
     b7e:	20 e1       	ldi	r18, 0x10	; 16
     b80:	44 e0       	ldi	r20, 0x04	; 4
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	84 e4       	ldi	r24, 0x44	; 68
     b86:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 60: play_note('D', 0, 5, 16);
       break;
    case 61: play_note('A', 0, 4, 16);
       break;
    case 62: play_note('C', 0, 5, 16);
     b8a:	20 e1       	ldi	r18, 0x10	; 16
     b8c:	45 e0       	ldi	r20, 0x05	; 5
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	83 e4       	ldi	r24, 0x43	; 67
     b92:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 29: play_note('A', 1, 4, 4);
       break;
    case 30: play_note('A', 0, 4, 6);
       break;
    case 31: play_note('B', 1, 4, 2);
     b96:	22 e0       	ldi	r18, 0x02	; 2
     b98:	44 e0       	ldi	r20, 0x04	; 4
     b9a:	61 e0       	ldi	r22, 0x01	; 1
     b9c:	82 e4       	ldi	r24, 0x42	; 66
     b9e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 32: play_note('C', 0, 5, 4);
       break;
    case 33: play_note('D', 1, 5, 4);
     ba2:	24 e0       	ldi	r18, 0x04	; 4
     ba4:	45 e0       	ldi	r20, 0x05	; 5
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	84 e4       	ldi	r24, 0x44	; 68
     baa:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 27: play_rest(2); 
       break;
    case 28: play_note('A', 0, 4, 8);
       break;
    case 29: play_note('A', 1, 4, 4);
     bae:	24 e0       	ldi	r18, 0x04	; 4
     bb0:	44 e0       	ldi	r20, 0x04	; 4
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	81 e4       	ldi	r24, 0x41	; 65
     bb6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 33: play_note('D', 1, 5, 4);
       break;
    case 34: play_note('D', 0, 5, 4);
       break;
    case 35: play_note('B', 0, 4, 8);
     bba:	28 e0       	ldi	r18, 0x08	; 8
     bbc:	44 e0       	ldi	r20, 0x04	; 4
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	82 e4       	ldi	r24, 0x42	; 66
     bc2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 66: play_note('A', 0, 4, 8);
       break;
    case 67: play_note('G', 0, 4, 8);
       break;
    case 68: play_note('F', 0, 4, 24);
     bc6:	28 e1       	ldi	r18, 0x18	; 24
     bc8:	44 e0       	ldi	r20, 0x04	; 4
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	86 e4       	ldi	r24, 0x46	; 70
     bce:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 18: play_note('G', 0, 4, 3);
       break;
    case 19: play_rest(1); //rest
       break;
    case 20: play_note('G', 0, 4, 7);
     bd2:	27 e0       	ldi	r18, 0x07	; 7
     bd4:	44 e0       	ldi	r20, 0x04	; 4
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	87 e4       	ldi	r24, 0x47	; 71
     bda:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>

00000bde <song1>:
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
     bde:	8f 33       	cpi	r24, 0x3F	; 63
     be0:	91 05       	cpc	r25, r1
     be2:	20 f0       	brcs	.+8      	; 0xbec <song1+0xe>
       break;//bar
    case 61: play_note('A', 1, 3, 16);
       break;
    case 62: play_rest(16);
      break;//bar phrase
    default: notes=-1;
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	80 93 25 01 	sts	0x0125, r24
     bea:	08 95       	ret
    default: notes=-1;
  }
}//song0

void song1(uint16_t note) { //tetris theme (Kellen)
switch (note) {
     bec:	fc 01       	movw	r30, r24
     bee:	ec 52       	subi	r30, 0x2C	; 44
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
     bf6:	24 e0       	ldi	r18, 0x04	; 4
     bf8:	44 e0       	ldi	r20, 0x04	; 4
     bfa:	60 e0       	ldi	r22, 0x00	; 0
     bfc:	83 e4       	ldi	r24, 0x43	; 67
     bfe:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
     c02:	28 e0       	ldi	r18, 0x08	; 8
     c04:	44 e0       	ldi	r20, 0x04	; 4
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	85 e4       	ldi	r24, 0x45	; 69
     c0a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     c0e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     c10:	10 92 36 01 	sts	0x0136, r1
     c14:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	90 93 34 01 	sts	0x0134, r25
     c20:	80 93 33 01 	sts	0x0133, r24
     c24:	08 95       	ret
        break;
    case 36: play_note('B', 0, 3, 4);
       break;
    case 37: play_note('C', 0, 4, 4);
       break;
    case 38: play_note('D', 0, 4, 8);
     c26:	28 e0       	ldi	r18, 0x08	; 8
     c28:	44 e0       	ldi	r20, 0x04	; 4
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	84 e4       	ldi	r24, 0x44	; 68
     c2e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
     c32:	20 e1       	ldi	r18, 0x10	; 16
     c34:	43 e0       	ldi	r20, 0x03	; 3
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	83 e4       	ldi	r24, 0x43	; 67
     c3a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 30: play_note('C', 0, 4, 4);
       break;
    case 31: play_note('E', 0, 4, 8);
        break;
    case 32: play_note('D', 0, 4, 4);
     c3e:	24 e0       	ldi	r18, 0x04	; 4
     c40:	44 e0       	ldi	r20, 0x04	; 4
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	84 e4       	ldi	r24, 0x44	; 68
     c46:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;//bar
    case 34: play_note('B', 0, 3, 7);
       break;
    case 35: play_rest(1);
        break;
    case 36: play_note('B', 0, 3, 4);
     c4a:	24 e0       	ldi	r18, 0x04	; 4
     c4c:	43 e0       	ldi	r20, 0x03	; 3
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	82 e4       	ldi	r24, 0x42	; 66
     c52:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
       break;
    case 41: play_note('A', 0, 3, 7);
     c56:	27 e0       	ldi	r18, 0x07	; 7
     c58:	43 e0       	ldi	r20, 0x03	; 3
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	81 e4       	ldi	r24, 0x41	; 65
     c5e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
     c62:	24 e0       	ldi	r18, 0x04	; 4
     c64:	44 e0       	ldi	r20, 0x04	; 4
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	86 e4       	ldi	r24, 0x46	; 70
     c6a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
     c6e:	20 e1       	ldi	r18, 0x10	; 16
     c70:	42 e0       	ldi	r20, 0x02	; 2
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	82 e4       	ldi	r24, 0x42	; 66
     c76:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
     c7a:	20 e1       	ldi	r18, 0x10	; 16
     c7c:	43 e0       	ldi	r20, 0x03	; 3
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	81 e4       	ldi	r24, 0x41	; 65
     c82:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 38: play_note('D', 0, 4, 8);
       break;
    case 39: play_note('E', 0, 4, 8);
       break;
    case 40: play_note('C', 0, 4, 8);
     c86:	28 e0       	ldi	r18, 0x08	; 8
     c88:	44 e0       	ldi	r20, 0x04	; 4
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	83 e4       	ldi	r24, 0x43	; 67
     c8e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
       break;
    case 55: play_note('C', 0, 3, 16);
       break;//bar
    case 56: play_note('D', 0, 3, 16);
     c92:	20 e1       	ldi	r18, 0x10	; 16
     c94:	43 e0       	ldi	r20, 0x03	; 3
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	84 e4       	ldi	r24, 0x44	; 68
     c9a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 52: play_note('B', 0, 2, 8);
       break;
    case 53: play_rest(8);
       break;//bar phrase
    case 54: play_note('E', 0, 3, 16);
     c9e:	20 e1       	ldi	r18, 0x10	; 16
     ca0:	43 e0       	ldi	r20, 0x03	; 3
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	85 e4       	ldi	r24, 0x45	; 69
     ca6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     caa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     cac:	10 92 36 01 	sts	0x0136, r1
     cb0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     cb4:	88 e0       	ldi	r24, 0x08	; 8
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	90 93 34 01 	sts	0x0134, r25
     cbc:	80 93 33 01 	sts	0x0133, r24
     cc0:	08 95       	ret
        break;
    case 32: play_note('D', 0, 4, 4);
       break;
    case 33: play_note('C', 0, 4, 4);
       break;//bar
    case 34: play_note('B', 0, 3, 7);
     cc2:	27 e0       	ldi	r18, 0x07	; 7
     cc4:	43 e0       	ldi	r20, 0x03	; 3
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	82 e4       	ldi	r24, 0x42	; 66
     cca:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 13: play_note('D', 0, 4, 4);
       break;
    case 14: play_note('C', 0, 4, 4);
       break;//bar
    case 15: play_note('B', 0, 3, 12);
     cce:	2c e0       	ldi	r18, 0x0C	; 12
     cd0:	43 e0       	ldi	r20, 0x03	; 3
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	82 e4       	ldi	r24, 0x42	; 66
     cd6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 59: play_note('E', 0, 3, 8);
       break;
    case 60: play_note('A', 0, 3, 16);
       break;//bar
    case 61: play_note('A', 1, 3, 16);
     cda:	20 e1       	ldi	r18, 0x10	; 16
     cdc:	43 e0       	ldi	r20, 0x03	; 3
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	81 e4       	ldi	r24, 0x41	; 65
     ce2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ce6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ce8:	10 92 36 01 	sts	0x0136, r1
     cec:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     cf0:	80 e1       	ldi	r24, 0x10	; 16
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	90 93 34 01 	sts	0x0134, r25
     cf8:	80 93 33 01 	sts	0x0133, r24
     cfc:	08 95       	ret
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
       break;
    case 27: play_note('G', 0, 4, 4);
     cfe:	24 e0       	ldi	r18, 0x04	; 4
     d00:	44 e0       	ldi	r20, 0x04	; 4
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	87 e4       	ldi	r24, 0x47	; 71
     d06:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 50: play_note('A', 0, 2, 16);
       break;//bar
    case 51: play_note('A', 1, 2, 16);
       break;
    case 52: play_note('B', 0, 2, 8);
     d0a:	28 e0       	ldi	r18, 0x08	; 8
     d0c:	42 e0       	ldi	r20, 0x02	; 2
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	82 e4       	ldi	r24, 0x42	; 66
     d12:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 48: play_note('B', 0, 2, 16);
       break;//bar
    case 49: play_note('C', 0, 3, 16);
       break;
    case 50: play_note('A', 0, 2, 16);
     d16:	20 e1       	ldi	r18, 0x10	; 16
     d18:	42 e0       	ldi	r20, 0x02	; 2
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	81 e4       	ldi	r24, 0x41	; 65
     d1e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;//bar
    case 51: play_note('A', 1, 2, 16);
     d22:	20 e1       	ldi	r18, 0x10	; 16
     d24:	42 e0       	ldi	r20, 0x02	; 2
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	81 e4       	ldi	r24, 0x41	; 65
     d2a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 27: play_note('G', 0, 4, 4);
       break;
    case 28: play_note('F', 0, 4, 4);
       break;//bar
    case 29: play_note('E', 0, 4, 12);
     d2e:	2c e0       	ldi	r18, 0x0C	; 12
     d30:	44 e0       	ldi	r20, 0x04	; 4
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	85 e4       	ldi	r24, 0x45	; 69
     d36:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_note('D', 0, 4, 2);
     d3a:	22 e0       	ldi	r18, 0x02	; 2
     d3c:	44 e0       	ldi	r20, 0x04	; 4
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	84 e4       	ldi	r24, 0x44	; 68
     d42:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 2: play_note('C', 0, 4, 4);
       break;
    case 3: play_note('D', 0, 4, 4);
       break;
    case 4: play_note('E', 0, 4, 2);
     d46:	22 e0       	ldi	r18, 0x02	; 2
     d48:	44 e0       	ldi	r20, 0x04	; 4
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	85 e4       	ldi	r24, 0x45	; 69
     d4e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;//bar
    case 56: play_note('D', 0, 3, 16);
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
     d52:	28 e0       	ldi	r18, 0x08	; 8
     d54:	43 e0       	ldi	r20, 0x03	; 3
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	83 e4       	ldi	r24, 0x43	; 67
     d5a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;//bar
    case 8: play_note('A', 0, 3, 7);
       break;
    case 9: play_rest(1);
       break;
    case 10: play_note('A', 0, 3, 4);
     d5e:	24 e0       	ldi	r18, 0x04	; 4
     d60:	43 e0       	ldi	r20, 0x03	; 3
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	81 e4       	ldi	r24, 0x41	; 65
     d66:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 57: play_note('B', 0, 2, 16);
       break;//bar
    case 58: play_note('C', 0, 3, 8);
       break;
    case 59: play_note('E', 0, 3, 8);
     d6a:	28 e0       	ldi	r18, 0x08	; 8
     d6c:	43 e0       	ldi	r20, 0x03	; 3
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	85 e4       	ldi	r24, 0x45	; 69
     d72:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 41: play_note('A', 0, 3, 7);
       break;
    case 42: play_rest(1);
       break;
    case 43: play_note('A', 0, 3, 8);
     d76:	28 e0       	ldi	r18, 0x08	; 8
     d78:	43 e0       	ldi	r20, 0x03	; 3
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	81 e4       	ldi	r24, 0x41	; 65
     d7e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     d82:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     d84:	10 92 36 01 	sts	0x0136, r1
     d88:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	90 93 34 01 	sts	0x0134, r25
     d94:	80 93 33 01 	sts	0x0133, r24
     d98:	08 95       	ret
       break;
    case 24: play_note('D', 0, 4, 8);
        break;
    case 25: play_note('F', 0, 4, 4);
       break;
    case 26: play_note('A', 0, 4, 8);
     d9a:	28 e0       	ldi	r18, 0x08	; 8
     d9c:	44 e0       	ldi	r20, 0x04	; 4
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	81 e4       	ldi	r24, 0x41	; 65
     da2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>

00000da6 <song2>:

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
     da6:	85 39       	cpi	r24, 0x95	; 149
     da8:	91 05       	cpc	r25, r1
     daa:	20 f0       	brcs	.+8      	; 0xdb4 <song2+0xe>
        break;
    case 147: play_note('G', 0, 3, 4);
	break;
    case 148: play_rest(8);
        break;
    default: notes=-1;
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	80 93 25 01 	sts	0x0125, r24
     db2:	08 95       	ret

 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
     db4:	fc 01       	movw	r30, r24
     db6:	ed 5e       	subi	r30, 0xED	; 237
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
        break;
    case 147: play_note('G', 0, 3, 4);
     dbe:	24 e0       	ldi	r18, 0x04	; 4
     dc0:	43 e0       	ldi	r20, 0x03	; 3
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	87 e4       	ldi	r24, 0x47	; 71
     dc6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 144: play_note('C', 0, 4, 2);
        break;
    case 145: play_rest(2);
        break;
    case 146: play_note('A', 0, 3, 2);
     dca:	22 e0       	ldi	r18, 0x02	; 2
     dcc:	43 e0       	ldi	r20, 0x03	; 3
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	81 e4       	ldi	r24, 0x41	; 65
     dd2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     dd6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     dd8:	10 92 36 01 	sts	0x0136, r1
     ddc:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 34 01 	sts	0x0134, r25
     de8:	80 93 33 01 	sts	0x0133, r24
     dec:	08 95       	ret
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
        break;
    case 144: play_note('C', 0, 4, 2);
     dee:	22 e0       	ldi	r18, 0x02	; 2
     df0:	44 e0       	ldi	r20, 0x04	; 4
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	83 e4       	ldi	r24, 0x43	; 67
     df6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
        break;
    case 143: play_note('E', 0, 4, 2);
     dfa:	22 e0       	ldi	r18, 0x02	; 2
     dfc:	44 e0       	ldi	r20, 0x04	; 4
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	85 e4       	ldi	r24, 0x45	; 69
     e02:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
        break;
    case 142: play_note('D', 0, 4, 4);
     e06:	24 e0       	ldi	r18, 0x04	; 4
     e08:	44 e0       	ldi	r20, 0x04	; 4
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	84 e4       	ldi	r24, 0x44	; 68
     e0e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 139: play_note('C', 0, 4, 2);
        break;
    case 140: play_rest(2);
        break;
    case 141: play_note('C', 0, 4, 2);
     e12:	22 e0       	ldi	r18, 0x02	; 2
     e14:	44 e0       	ldi	r20, 0x04	; 4
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	83 e4       	ldi	r24, 0x43	; 67
     e1a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e1e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e20:	10 92 36 01 	sts	0x0136, r1
     e24:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	90 93 34 01 	sts	0x0134, r25
     e30:	80 93 33 01 	sts	0x0133, r24
     e34:	08 95       	ret
        break;
    case 137: play_note('C', 0, 4, 2);
        break;
    case 138: play_rest(2);
        break;
    case 139: play_note('C', 0, 4, 2);
     e36:	22 e0       	ldi	r18, 0x02	; 2
     e38:	44 e0       	ldi	r20, 0x04	; 4
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	83 e4       	ldi	r24, 0x43	; 67
     e3e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e42:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e44:	10 92 36 01 	sts	0x0136, r1
     e48:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	90 93 34 01 	sts	0x0134, r25
     e54:	80 93 33 01 	sts	0x0133, r24
     e58:	08 95       	ret
        break;
    case 135: play_note('C', 0, 4, 2);
        break;
    case 136: play_rest(1);
        break;
    case 137: play_note('C', 0, 4, 2);
     e5a:	22 e0       	ldi	r18, 0x02	; 2
     e5c:	44 e0       	ldi	r20, 0x04	; 4
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	83 e4       	ldi	r24, 0x43	; 67
     e62:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e66:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e68:	10 92 36 01 	sts	0x0136, r1
     e6c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 34 01 	sts	0x0134, r25
     e78:	80 93 33 01 	sts	0x0133, r24
     e7c:	08 95       	ret
        break;
    case 133: play_note('E', 0, 4, 2);
        break;
    case 134: play_rest(16);
        break;
    case 135: play_note('C', 0, 4, 2);
     e7e:	22 e0       	ldi	r18, 0x02	; 2
     e80:	44 e0       	ldi	r20, 0x04	; 4
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	83 e4       	ldi	r24, 0x43	; 67
     e86:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     e8a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     e8c:	10 92 36 01 	sts	0x0136, r1
     e90:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	90 93 34 01 	sts	0x0134, r25
     e9c:	80 93 33 01 	sts	0x0133, r24
     ea0:	08 95       	ret
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
        break;
    case 133: play_note('E', 0, 4, 2);
     ea2:	22 e0       	ldi	r18, 0x02	; 2
     ea4:	44 e0       	ldi	r20, 0x04	; 4
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	85 e4       	ldi	r24, 0x45	; 69
     eaa:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
        break;
    case 132: play_note('D', 0, 4, 2);
     eae:	22 e0       	ldi	r18, 0x02	; 2
     eb0:	44 e0       	ldi	r20, 0x04	; 4
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	84 e4       	ldi	r24, 0x44	; 68
     eb6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 129: play_note('C', 0, 4, 2);
        break;
    case 130: play_rest(2);
        break;
    case 131: play_note('C', 0, 4, 2);
     eba:	22 e0       	ldi	r18, 0x02	; 2
     ebc:	44 e0       	ldi	r20, 0x04	; 4
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	83 e4       	ldi	r24, 0x43	; 67
     ec2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ec6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ec8:	10 92 36 01 	sts	0x0136, r1
     ecc:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	90 93 34 01 	sts	0x0134, r25
     ed8:	80 93 33 01 	sts	0x0133, r24
     edc:	08 95       	ret
       break;
    case 127: play_note('C', 0, 4, 2);
        break;
    case 128: play_rest(2);
        break;
    case 129: play_note('C', 0, 4, 2);
     ede:	22 e0       	ldi	r18, 0x02	; 2
     ee0:	44 e0       	ldi	r20, 0x04	; 4
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	83 e4       	ldi	r24, 0x43	; 67
     ee6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     eea:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     eec:	10 92 36 01 	sts	0x0136, r1
     ef0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	90 93 34 01 	sts	0x0134, r25
     efc:	80 93 33 01 	sts	0x0133, r24
     f00:	08 95       	ret
       break;
    case 125: play_note('C', 0, 4, 2);
       break;
    case 126: play_rest(1);
       break;
    case 127: play_note('C', 0, 4, 2);
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	44 e0       	ldi	r20, 0x04	; 4
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	83 e4       	ldi	r24, 0x43	; 67
     f0a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f0e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f10:	10 92 36 01 	sts	0x0136, r1
     f14:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	90 93 34 01 	sts	0x0134, r25
     f20:	80 93 33 01 	sts	0x0133, r24
     f24:	08 95       	ret
        break;
    case 123: play_note('G', 0, 3, 4);
        break;
    case 124: play_rest(4);
       break;
    case 125: play_note('C', 0, 4, 2);
     f26:	22 e0       	ldi	r18, 0x02	; 2
     f28:	44 e0       	ldi	r20, 0x04	; 4
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	83 e4       	ldi	r24, 0x43	; 67
     f2e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f32:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f34:	10 92 36 01 	sts	0x0136, r1
     f38:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     f3c:	84 e0       	ldi	r24, 0x04	; 4
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	90 93 34 01 	sts	0x0134, r25
     f44:	80 93 33 01 	sts	0x0133, r24
     f48:	08 95       	ret
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
        break;
    case 123: play_note('G', 0, 3, 4);
     f4a:	24 e0       	ldi	r18, 0x04	; 4
     f4c:	43 e0       	ldi	r20, 0x03	; 3
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	87 e4       	ldi	r24, 0x47	; 71
     f52:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 120: play_note('C', 0, 4, 2);
        break;
    case 121: play_rest(2);
        break;
    case 122: play_note('A', 0, 3, 2);
     f56:	22 e0       	ldi	r18, 0x02	; 2
     f58:	43 e0       	ldi	r20, 0x03	; 3
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	81 e4       	ldi	r24, 0x41	; 65
     f5e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     f62:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     f64:	10 92 36 01 	sts	0x0136, r1
     f68:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	90 93 34 01 	sts	0x0134, r25
     f74:	80 93 33 01 	sts	0x0133, r24
     f78:	08 95       	ret
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
        break;
    case 120: play_note('C', 0, 4, 2);
     f7a:	22 e0       	ldi	r18, 0x02	; 2
     f7c:	44 e0       	ldi	r20, 0x04	; 4
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	83 e4       	ldi	r24, 0x43	; 67
     f82:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
        break;
    case 119: play_note('E', 0, 4, 2);
     f86:	22 e0       	ldi	r18, 0x02	; 2
     f88:	44 e0       	ldi	r20, 0x04	; 4
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	85 e4       	ldi	r24, 0x45	; 69
     f8e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
        break;
    case 118: play_note('D', 0, 4, 4);
     f92:	24 e0       	ldi	r18, 0x04	; 4
     f94:	44 e0       	ldi	r20, 0x04	; 4
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	84 e4       	ldi	r24, 0x44	; 68
     f9a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 115: play_note('C', 0, 4, 2);
        break;
    case 116: play_rest(2);
        break;
    case 117: play_note('C', 0, 4, 2);
     f9e:	22 e0       	ldi	r18, 0x02	; 2
     fa0:	44 e0       	ldi	r20, 0x04	; 4
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	83 e4       	ldi	r24, 0x43	; 67
     fa6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     faa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     fac:	10 92 36 01 	sts	0x0136, r1
     fb0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	90 93 34 01 	sts	0x0134, r25
     fbc:	80 93 33 01 	sts	0x0133, r24
     fc0:	08 95       	ret
       break;
    case 113: play_note('C', 0, 4, 2);
        break;
    case 114: play_rest(2);
        break;
    case 115: play_note('C', 0, 4, 2);
     fc2:	22 e0       	ldi	r18, 0x02	; 2
     fc4:	44 e0       	ldi	r20, 0x04	; 4
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	83 e4       	ldi	r24, 0x43	; 67
     fca:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     fce:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     fd0:	10 92 36 01 	sts	0x0136, r1
     fd4:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	90 93 34 01 	sts	0x0134, r25
     fe0:	80 93 33 01 	sts	0x0133, r24
     fe4:	08 95       	ret
       break;
    case 111: play_note('C', 0, 4, 2);
       break;
    case 112: play_rest(1);
       break;
    case 113: play_note('C', 0, 4, 2);
     fe6:	22 e0       	ldi	r18, 0x02	; 2
     fe8:	44 e0       	ldi	r20, 0x04	; 4
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	83 e4       	ldi	r24, 0x43	; 67
     fee:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
     ff2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
     ff4:	10 92 36 01 	sts	0x0136, r1
     ff8:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	90 93 34 01 	sts	0x0134, r25
    1004:	80 93 33 01 	sts	0x0133, r24
    1008:	08 95       	ret
        break;
    case 109: play_note('C', 0, 4, 4);
       break;
    case 110: play_rest(10);
       break;
    case 111: play_note('C', 0, 4, 2);
    100a:	22 e0       	ldi	r18, 0x02	; 2
    100c:	44 e0       	ldi	r20, 0x04	; 4
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	83 e4       	ldi	r24, 0x43	; 67
    1012:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1016:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1018:	10 92 36 01 	sts	0x0136, r1
    101c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1020:	8a e0       	ldi	r24, 0x0A	; 10
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	90 93 34 01 	sts	0x0134, r25
    1028:	80 93 33 01 	sts	0x0133, r24
    102c:	08 95       	ret
       break;
    case 107: play_note('D', 0, 4, 2);
       break;
    case 108: play_rest(4);
        break;
    case 109: play_note('C', 0, 4, 4);
    102e:	24 e0       	ldi	r18, 0x04	; 4
    1030:	44 e0       	ldi	r20, 0x04	; 4
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	83 e4       	ldi	r24, 0x43	; 67
    1036:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    103a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    103c:	10 92 36 01 	sts	0x0136, r1
    1040:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	90 93 34 01 	sts	0x0134, r25
    104c:	80 93 33 01 	sts	0x0133, r24
    1050:	08 95       	ret
       break;
    case 105: play_note('E', 1, 4, 4);
       break;
    case 106: play_rest(2);
       break;
    case 107: play_note('D', 0, 4, 2);
    1052:	22 e0       	ldi	r18, 0x02	; 2
    1054:	44 e0       	ldi	r20, 0x04	; 4
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	84 e4       	ldi	r24, 0x44	; 68
    105a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    105e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1060:	10 92 36 01 	sts	0x0136, r1
    1064:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	90 93 34 01 	sts	0x0134, r25
    1070:	80 93 33 01 	sts	0x0133, r24
    1074:	08 95       	ret
       break;
    case 103: play_note('D', 0, 4, 2);
       break;
    case 104: play_rest(4);
       break;
    case 105: play_note('E', 1, 4, 4);
    1076:	24 e0       	ldi	r18, 0x04	; 4
    1078:	44 e0       	ldi	r20, 0x04	; 4
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	85 e4       	ldi	r24, 0x45	; 69
    107e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1082:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1084:	10 92 36 01 	sts	0x0136, r1
    1088:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	90 93 34 01 	sts	0x0134, r25
    1094:	80 93 33 01 	sts	0x0133, r24
    1098:	08 95       	ret
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
       break;
    case 103: play_note('D', 0, 4, 2);
    109a:	22 e0       	ldi	r18, 0x02	; 2
    109c:	44 e0       	ldi	r20, 0x04	; 4
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	84 e4       	ldi	r24, 0x44	; 68
    10a2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
       break;
    case 102: play_note('C', 0, 4, 2);
    10a6:	22 e0       	ldi	r18, 0x02	; 2
    10a8:	44 e0       	ldi	r20, 0x04	; 4
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	83 e4       	ldi	r24, 0x43	; 67
    10ae:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 99: play_note('C', 0, 4, 2);
       break;
    case 100: play_rest(2);
       break;
    case 101: play_note('A', 0, 3, 2);
    10b2:	22 e0       	ldi	r18, 0x02	; 2
    10b4:	43 e0       	ldi	r20, 0x03	; 3
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	81 e4       	ldi	r24, 0x41	; 65
    10ba:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    10be:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    10c0:	10 92 36 01 	sts	0x0136, r1
    10c4:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	90 93 34 01 	sts	0x0134, r25
    10d0:	80 93 33 01 	sts	0x0133, r24
    10d4:	08 95       	ret
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
       break;
    case 99: play_note('C', 0, 4, 2);
    10d6:	22 e0       	ldi	r18, 0x02	; 2
    10d8:	44 e0       	ldi	r20, 0x04	; 4
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	83 e4       	ldi	r24, 0x43	; 67
    10de:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
       break;
    case 98: play_note('A', 0, 3, 2);
    10e2:	22 e0       	ldi	r18, 0x02	; 2
    10e4:	43 e0       	ldi	r20, 0x03	; 3
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	81 e4       	ldi	r24, 0x41	; 65
    10ea:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 95: play_note('E', 0, 4, 2);
       break;
    case 96: play_rest(2);
       break;
    case 97: play_note('A', 1, 3, 2);
    10ee:	22 e0       	ldi	r18, 0x02	; 2
    10f0:	43 e0       	ldi	r20, 0x03	; 3
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	81 e4       	ldi	r24, 0x41	; 65
    10f6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    10fa:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    10fc:	10 92 36 01 	sts	0x0136, r1
    1100:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	90 93 34 01 	sts	0x0134, r25
    110c:	80 93 33 01 	sts	0x0133, r24
    1110:	08 95       	ret
       break;
    case 93: play_note('E', 1, 4, 2);
       break;
    case 94: play_rest(2);
       break;
    case 95: play_note('E', 0, 4, 2);
    1112:	22 e0       	ldi	r18, 0x02	; 2
    1114:	44 e0       	ldi	r20, 0x04	; 4
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	85 e4       	ldi	r24, 0x45	; 69
    111a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    111e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1120:	10 92 36 01 	sts	0x0136, r1
    1124:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	90 93 34 01 	sts	0x0134, r25
    1130:	80 93 33 01 	sts	0x0133, r24
    1134:	08 95       	ret
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
       break;
    case 93: play_note('E', 1, 4, 2);
    1136:	22 e0       	ldi	r18, 0x02	; 2
    1138:	44 e0       	ldi	r20, 0x04	; 4
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	85 e4       	ldi	r24, 0x45	; 69
    113e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
       break;
    case 92: play_note('F', 0, 4, 2);
    1142:	22 e0       	ldi	r18, 0x02	; 2
    1144:	44 e0       	ldi	r20, 0x04	; 4
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	86 e4       	ldi	r24, 0x46	; 70
    114a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
       break;
    case 91: play_note('G', 1, 4, 2);
    114e:	22 e0       	ldi	r18, 0x02	; 2
    1150:	44 e0       	ldi	r20, 0x04	; 4
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	87 e4       	ldi	r24, 0x47	; 71
    1156:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 88: play_note('G', 0, 4, 4);
       break;
    case 89: play_rest(8);
       break;
    case 90: play_note('G', 0, 4, 2);
    115a:	22 e0       	ldi	r18, 0x02	; 2
    115c:	44 e0       	ldi	r20, 0x04	; 4
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	87 e4       	ldi	r24, 0x47	; 71
    1162:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1166:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1168:	10 92 36 01 	sts	0x0136, r1
    116c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1170:	88 e0       	ldi	r24, 0x08	; 8
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 34 01 	sts	0x0134, r25
    1178:	80 93 33 01 	sts	0x0133, r24
    117c:	08 95       	ret
       break;
    case 86: play_note('G', 0, 4, 1);
       break;
    case 87: play_rest(1);
       break;
    case 88: play_note('G', 0, 4, 4);
    117e:	24 e0       	ldi	r18, 0x04	; 4
    1180:	44 e0       	ldi	r20, 0x04	; 4
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	87 e4       	ldi	r24, 0x47	; 71
    1186:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    118a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    118c:	10 92 36 01 	sts	0x0136, r1
    1190:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	90 93 34 01 	sts	0x0134, r25
    119c:	80 93 33 01 	sts	0x0133, r24
    11a0:	08 95       	ret
       break;
    case 84: play_note('G', 0, 4, 2);
       break;
    case 85: play_rest(2);
       break;
    case 86: play_note('G', 0, 4, 1);
    11a2:	21 e0       	ldi	r18, 0x01	; 1
    11a4:	44 e0       	ldi	r20, 0x04	; 4
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	87 e4       	ldi	r24, 0x47	; 71
    11aa:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11ae:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11b0:	10 92 36 01 	sts	0x0136, r1
    11b4:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	90 93 34 01 	sts	0x0134, r25
    11c0:	80 93 33 01 	sts	0x0133, r24
    11c4:	08 95       	ret
       break;
    case 82: play_note('E', 0, 3, 2);
       break;
    case 83: play_rest(2);
       break;
    case 84: play_note('G', 0, 4, 2);
    11c6:	22 e0       	ldi	r18, 0x02	; 2
    11c8:	44 e0       	ldi	r20, 0x04	; 4
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	87 e4       	ldi	r24, 0x47	; 71
    11ce:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11d2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11d4:	10 92 36 01 	sts	0x0136, r1
    11d8:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 34 01 	sts	0x0134, r25
    11e4:	80 93 33 01 	sts	0x0133, r24
    11e8:	08 95       	ret
       break;
    case 80: play_note('E', 1, 3, 2);
       break;
    case 81: play_rest(2);
       break;
    case 82: play_note('E', 0, 3, 2);
    11ea:	22 e0       	ldi	r18, 0x02	; 2
    11ec:	43 e0       	ldi	r20, 0x03	; 3
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	85 e4       	ldi	r24, 0x45	; 69
    11f2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    11f6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    11f8:	10 92 36 01 	sts	0x0136, r1
    11fc:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	90 93 34 01 	sts	0x0134, r25
    1208:	80 93 33 01 	sts	0x0133, r24
    120c:	08 95       	ret
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
       break;
    case 80: play_note('E', 1, 3, 2);
    120e:	22 e0       	ldi	r18, 0x02	; 2
    1210:	43 e0       	ldi	r20, 0x03	; 3
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	85 e4       	ldi	r24, 0x45	; 69
    1216:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
       break;
    case 79: play_note('F', 0, 3, 2);
    121a:	22 e0       	ldi	r18, 0x02	; 2
    121c:	43 e0       	ldi	r20, 0x03	; 3
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	86 e4       	ldi	r24, 0x46	; 70
    1222:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
       break;
    case 78: play_note('G', 1, 3, 2);
    1226:	22 e0       	ldi	r18, 0x02	; 2
    1228:	43 e0       	ldi	r20, 0x03	; 3
    122a:	61 e0       	ldi	r22, 0x01	; 1
    122c:	87 e4       	ldi	r24, 0x47	; 71
    122e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 75: play_note('D', 0, 4, 2);
       break;
    case 76: play_rest(4);
       break;
    case 77: play_note('G', 0, 3, 2);
    1232:	22 e0       	ldi	r18, 0x02	; 2
    1234:	43 e0       	ldi	r20, 0x03	; 3
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	87 e4       	ldi	r24, 0x47	; 71
    123a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    123e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1240:	10 92 36 01 	sts	0x0136, r1
    1244:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	90 93 34 01 	sts	0x0134, r25
    1250:	80 93 33 01 	sts	0x0133, r24
    1254:	08 95       	ret
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
       break;
    case 75: play_note('D', 0, 4, 2);
    1256:	22 e0       	ldi	r18, 0x02	; 2
    1258:	44 e0       	ldi	r20, 0x04	; 4
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	84 e4       	ldi	r24, 0x44	; 68
    125e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
       break;
    case 74: play_note('C', 0, 4, 2);
    1262:	22 e0       	ldi	r18, 0x02	; 2
    1264:	44 e0       	ldi	r20, 0x04	; 4
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	83 e4       	ldi	r24, 0x43	; 67
    126a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 71: play_note('C', 0, 4, 2);
       break;
    case 72: play_rest(2);
       break;
    case 73: play_note('A', 0, 3, 2);
    126e:	22 e0       	ldi	r18, 0x02	; 2
    1270:	43 e0       	ldi	r20, 0x03	; 3
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	81 e4       	ldi	r24, 0x41	; 65
    1276:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    127a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    127c:	10 92 36 01 	sts	0x0136, r1
    1280:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 34 01 	sts	0x0134, r25
    128c:	80 93 33 01 	sts	0x0133, r24
    1290:	08 95       	ret
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
       break;
    case 71: play_note('C', 0, 4, 2);
    1292:	22 e0       	ldi	r18, 0x02	; 2
    1294:	44 e0       	ldi	r20, 0x04	; 4
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	83 e4       	ldi	r24, 0x43	; 67
    129a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
       break;
    case 70: play_note('A', 0, 3, 2);
    129e:	22 e0       	ldi	r18, 0x02	; 2
    12a0:	43 e0       	ldi	r20, 0x03	; 3
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	81 e4       	ldi	r24, 0x41	; 65
    12a6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 67: play_note('E', 0, 4, 2);
       break;
    case 68: play_rest(2);
       break;
    case 69: play_note('A', 1, 3, 2);
    12aa:	22 e0       	ldi	r18, 0x02	; 2
    12ac:	43 e0       	ldi	r20, 0x03	; 3
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	81 e4       	ldi	r24, 0x41	; 65
    12b2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    12b6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    12b8:	10 92 36 01 	sts	0x0136, r1
    12bc:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	90 93 34 01 	sts	0x0134, r25
    12c8:	80 93 33 01 	sts	0x0133, r24
    12cc:	08 95       	ret
       break;
    case 65: play_note('E', 1, 4, 2);
       break;
    case 66: play_rest(2);
       break;
    case 67: play_note('E', 0, 4, 2);
    12ce:	22 e0       	ldi	r18, 0x02	; 2
    12d0:	44 e0       	ldi	r20, 0x04	; 4
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	85 e4       	ldi	r24, 0x45	; 69
    12d6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    12da:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    12dc:	10 92 36 01 	sts	0x0136, r1
    12e0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	90 93 34 01 	sts	0x0134, r25
    12ec:	80 93 33 01 	sts	0x0133, r24
    12f0:	08 95       	ret
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
       break;
    case 65: play_note('E', 1, 4, 2);
    12f2:	22 e0       	ldi	r18, 0x02	; 2
    12f4:	44 e0       	ldi	r20, 0x04	; 4
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	85 e4       	ldi	r24, 0x45	; 69
    12fa:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
       break;
    case 64: play_note('F', 0, 4, 2);
    12fe:	22 e0       	ldi	r18, 0x02	; 2
    1300:	44 e0       	ldi	r20, 0x04	; 4
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	86 e4       	ldi	r24, 0x46	; 70
    1306:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
       break;
    case 63: play_note('G', 1, 4, 2);
    130a:	22 e0       	ldi	r18, 0x02	; 2
    130c:	44 e0       	ldi	r20, 0x04	; 4
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	87 e4       	ldi	r24, 0x47	; 71
    1312:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 60: play_note('B', 0, 3, 2);
       break;
    case 61: play_rest(8);
       break;
    case 62: play_note('G', 0, 4, 2);
    1316:	22 e0       	ldi	r18, 0x02	; 2
    1318:	44 e0       	ldi	r20, 0x04	; 4
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	87 e4       	ldi	r24, 0x47	; 71
    131e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1322:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1324:	10 92 36 01 	sts	0x0136, r1
    1328:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    132c:	88 e0       	ldi	r24, 0x08	; 8
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	90 93 34 01 	sts	0x0134, r25
    1334:	80 93 33 01 	sts	0x0133, r24
    1338:	08 95       	ret
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
       break;
    case 60: play_note('B', 0, 3, 2);
    133a:	22 e0       	ldi	r18, 0x02	; 2
    133c:	43 e0       	ldi	r20, 0x03	; 3
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	82 e4       	ldi	r24, 0x42	; 66
    1342:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
       break;
    case 59: play_note('D', 0, 4, 2);
    1346:	22 e0       	ldi	r18, 0x02	; 2
    1348:	44 e0       	ldi	r20, 0x04	; 4
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	84 e4       	ldi	r24, 0x44	; 68
    134e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 56: play_note('E', 0, 4, 2);
       break;
    case 57: play_rest(2);
        break;
    case 58: play_note('C', 0, 4, 2);
    1352:	22 e0       	ldi	r18, 0x02	; 2
    1354:	44 e0       	ldi	r20, 0x04	; 4
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	83 e4       	ldi	r24, 0x43	; 67
    135a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    135e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1360:	10 92 36 01 	sts	0x0136, r1
    1364:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	90 93 34 01 	sts	0x0134, r25
    1370:	80 93 33 01 	sts	0x0133, r24
    1374:	08 95       	ret
       break;
    case 54: play_note('G', 0, 4, 2);
       break;
    case 55: play_rest(2);
        break;
    case 56: play_note('E', 0, 4, 2);
    1376:	22 e0       	ldi	r18, 0x02	; 2
    1378:	44 e0       	ldi	r20, 0x04	; 4
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	85 e4       	ldi	r24, 0x45	; 69
    137e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1382:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1384:	10 92 36 01 	sts	0x0136, r1
    1388:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	90 93 34 01 	sts	0x0134, r25
    1394:	80 93 33 01 	sts	0x0133, r24
    1398:	08 95       	ret
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
       break;
    case 54: play_note('G', 0, 4, 2);
    139a:	22 e0       	ldi	r18, 0x02	; 2
    139c:	44 e0       	ldi	r20, 0x04	; 4
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	87 e4       	ldi	r24, 0x47	; 71
    13a2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
       break;
    case 53: play_note('F', 0, 4, 2);
    13a6:	22 e0       	ldi	r18, 0x02	; 2
    13a8:	44 e0       	ldi	r20, 0x04	; 4
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	86 e4       	ldi	r24, 0x46	; 70
    13ae:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
       break;
    case 52: play_note('A', 0, 4, 4);
    13b2:	24 e0       	ldi	r18, 0x04	; 4
    13b4:	44 e0       	ldi	r20, 0x04	; 4
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	81 e4       	ldi	r24, 0x41	; 65
    13ba:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 49: play_note('E', 0, 4, 2);
       break;
    case 50: play_rest(1);
        break;
    case 51: play_note('G', 0, 4, 2);
    13be:	22 e0       	ldi	r18, 0x02	; 2
    13c0:	44 e0       	ldi	r20, 0x04	; 4
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	87 e4       	ldi	r24, 0x47	; 71
    13c6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    13ca:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    13cc:	10 92 36 01 	sts	0x0136, r1
    13d0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	90 93 34 01 	sts	0x0134, r25
    13dc:	80 93 33 01 	sts	0x0133, r24
    13e0:	08 95       	ret
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
       break;
    case 49: play_note('E', 0, 4, 2);
    13e2:	22 e0       	ldi	r18, 0x02	; 2
    13e4:	44 e0       	ldi	r20, 0x04	; 4
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	85 e4       	ldi	r24, 0x45	; 69
    13ea:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
       break;
    case 48: play_note('G' , 0, 3, 3);
    13ee:	23 e0       	ldi	r18, 0x03	; 3
    13f0:	43 e0       	ldi	r20, 0x03	; 3
    13f2:	60 e0       	ldi	r22, 0x00	; 0
    13f4:	87 e4       	ldi	r24, 0x47	; 71
    13f6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
       break;
    case 47: play_note('A', 0, 3, 4); //phrase
    13fa:	24 e0       	ldi	r18, 0x04	; 4
    13fc:	43 e0       	ldi	r20, 0x03	; 3
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	81 e4       	ldi	r24, 0x41	; 65
    1402:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
         break;
    case 44: play_note('B', 0, 3, 2);
       break;
    case 45: play_rest(2);
       break;
    case 46: play_note('B', 1, 3, 2);
    1406:	22 e0       	ldi	r18, 0x02	; 2
    1408:	43 e0       	ldi	r20, 0x03	; 3
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	82 e4       	ldi	r24, 0x42	; 66
    140e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1412:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1414:	10 92 36 01 	sts	0x0136, r1
    1418:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	90 93 34 01 	sts	0x0134, r25
    1424:	80 93 33 01 	sts	0x0133, r24
    1428:	08 95       	ret
       break;
    case 42: play_note('A', 0, 3, 2);
       break;
    case 43: play_rest(2);
         break;
    case 44: play_note('B', 0, 3, 2);
    142a:	22 e0       	ldi	r18, 0x02	; 2
    142c:	43 e0       	ldi	r20, 0x03	; 3
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	82 e4       	ldi	r24, 0x42	; 66
    1432:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1436:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1438:	10 92 36 01 	sts	0x0136, r1
    143c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	90 93 34 01 	sts	0x0134, r25
    1448:	80 93 33 01 	sts	0x0133, r24
    144c:	08 95       	ret
       break;
    case 40: play_note('E', 0, 3, 4);
       break;
    case 41: play_rest(2);
       break;
    case 42: play_note('A', 0, 3, 2);
    144e:	22 e0       	ldi	r18, 0x02	; 2
    1450:	43 e0       	ldi	r20, 0x03	; 3
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	81 e4       	ldi	r24, 0x41	; 65
    1456:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    145a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    145c:	10 92 36 01 	sts	0x0136, r1
    1460:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	90 93 34 01 	sts	0x0134, r25
    146c:	80 93 33 01 	sts	0x0133, r24
    1470:	08 95       	ret
       break;
    case 38: play_note('G', 0, 3, 2);
       break;
    case 39: play_rest(3);
       break;
    case 40: play_note('E', 0, 3, 4);
    1472:	24 e0       	ldi	r18, 0x04	; 4
    1474:	43 e0       	ldi	r20, 0x03	; 3
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	85 e4       	ldi	r24, 0x45	; 69
    147a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    147e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1480:	10 92 36 01 	sts	0x0136, r1
    1484:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1488:	83 e0       	ldi	r24, 0x03	; 3
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	90 93 34 01 	sts	0x0134, r25
    1490:	80 93 33 01 	sts	0x0133, r24
    1494:	08 95       	ret
        break;
    case 36: play_note('C', 0, 4, 5);
       break;
    case 37: play_rest(2);
       break;
    case 38: play_note('G', 0, 3, 2);
    1496:	22 e0       	ldi	r18, 0x02	; 2
    1498:	43 e0       	ldi	r20, 0x03	; 3
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	87 e4       	ldi	r24, 0x47	; 71
    149e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14a2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14a4:	10 92 36 01 	sts	0x0136, r1
    14a8:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	90 93 34 01 	sts	0x0134, r25
    14b4:	80 93 33 01 	sts	0x0133, r24
    14b8:	08 95       	ret
       break;
    case 34: play_note('B', 0, 3, 2);
       break;
    case 35: play_rest(4);
        break;
    case 36: play_note('C', 0, 4, 5);
    14ba:	25 e0       	ldi	r18, 0x05	; 5
    14bc:	44 e0       	ldi	r20, 0x04	; 4
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	83 e4       	ldi	r24, 0x43	; 67
    14c2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    14c6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    14c8:	10 92 36 01 	sts	0x0136, r1
    14cc:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    14d0:	84 e0       	ldi	r24, 0x04	; 4
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	90 93 34 01 	sts	0x0134, r25
    14d8:	80 93 33 01 	sts	0x0133, r24
    14dc:	08 95       	ret
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
       break;
    case 34: play_note('B', 0, 3, 2);
    14de:	22 e0       	ldi	r18, 0x02	; 2
    14e0:	43 e0       	ldi	r20, 0x03	; 3
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	82 e4       	ldi	r24, 0x42	; 66
    14e6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
       break;
    case 33: play_note('D', 0, 4, 2);
    14ea:	22 e0       	ldi	r18, 0x02	; 2
    14ec:	44 e0       	ldi	r20, 0x04	; 4
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	84 e4       	ldi	r24, 0x44	; 68
    14f2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 30: play_note('E', 0, 4, 2);
       break;
    case 31: play_rest(2);
        break;
    case 32: play_note('C', 0, 4, 2);
    14f6:	22 e0       	ldi	r18, 0x02	; 2
    14f8:	44 e0       	ldi	r20, 0x04	; 4
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	83 e4       	ldi	r24, 0x43	; 67
    14fe:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1502:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1504:	10 92 36 01 	sts	0x0136, r1
    1508:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 34 01 	sts	0x0134, r25
    1514:	80 93 33 01 	sts	0x0133, r24
    1518:	08 95       	ret
       break;
    case 28: play_note('G', 0, 4, 2);
       break;
    case 29: play_rest(2);
        break;
    case 30: play_note('E', 0, 4, 2);
    151a:	22 e0       	ldi	r18, 0x02	; 2
    151c:	44 e0       	ldi	r20, 0x04	; 4
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	85 e4       	ldi	r24, 0x45	; 69
    1522:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1526:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1528:	10 92 36 01 	sts	0x0136, r1
    152c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1530:	82 e0       	ldi	r24, 0x02	; 2
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	90 93 34 01 	sts	0x0134, r25
    1538:	80 93 33 01 	sts	0x0133, r24
    153c:	08 95       	ret
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
       break;
    case 28: play_note('G', 0, 4, 2);
    153e:	22 e0       	ldi	r18, 0x02	; 2
    1540:	44 e0       	ldi	r20, 0x04	; 4
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	87 e4       	ldi	r24, 0x47	; 71
    1546:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
       break;
    case 27: play_note('F', 0, 4, 2);
    154a:	22 e0       	ldi	r18, 0x02	; 2
    154c:	44 e0       	ldi	r20, 0x04	; 4
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	86 e4       	ldi	r24, 0x46	; 70
    1552:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
       break;
    case 26: play_note('A', 0, 4, 4);
    1556:	24 e0       	ldi	r18, 0x04	; 4
    1558:	44 e0       	ldi	r20, 0x04	; 4
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	81 e4       	ldi	r24, 0x41	; 65
    155e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 23: play_note('E', 0, 4, 2);
       break;
    case 24: play_rest(1);
        break;
    case 25: play_note('G', 0, 4, 2);
    1562:	22 e0       	ldi	r18, 0x02	; 2
    1564:	44 e0       	ldi	r20, 0x04	; 4
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	87 e4       	ldi	r24, 0x47	; 71
    156a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    156e:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1570:	10 92 36 01 	sts	0x0136, r1
    1574:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	90 93 34 01 	sts	0x0134, r25
    1580:	80 93 33 01 	sts	0x0133, r24
    1584:	08 95       	ret
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
       break;
    case 23: play_note('E', 0, 4, 2);
    1586:	22 e0       	ldi	r18, 0x02	; 2
    1588:	44 e0       	ldi	r20, 0x04	; 4
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	85 e4       	ldi	r24, 0x45	; 69
    158e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
       break;
    case 22: play_note('G' , 0, 3, 3);
    1592:	23 e0       	ldi	r18, 0x03	; 3
    1594:	43 e0       	ldi	r20, 0x03	; 3
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	87 e4       	ldi	r24, 0x47	; 71
    159a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
       break;
    case 21: play_note('A', 0, 3, 4);
    159e:	24 e0       	ldi	r18, 0x04	; 4
    15a0:	43 e0       	ldi	r20, 0x03	; 3
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	81 e4       	ldi	r24, 0x41	; 65
    15a6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
         break;
    case 18: play_note('B', 0, 3, 2);
       break;
    case 19: play_rest(2);
       break;
    case 20: play_note('B', 1, 3, 2);
    15aa:	22 e0       	ldi	r18, 0x02	; 2
    15ac:	43 e0       	ldi	r20, 0x03	; 3
    15ae:	61 e0       	ldi	r22, 0x01	; 1
    15b0:	82 e4       	ldi	r24, 0x42	; 66
    15b2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15b6:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15b8:	10 92 36 01 	sts	0x0136, r1
    15bc:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	90 93 34 01 	sts	0x0134, r25
    15c8:	80 93 33 01 	sts	0x0133, r24
    15cc:	08 95       	ret
       break;
    case 16: play_note('A', 0, 3, 2);
       break;
    case 17: play_rest(2);
         break;
    case 18: play_note('B', 0, 3, 2);
    15ce:	22 e0       	ldi	r18, 0x02	; 2
    15d0:	43 e0       	ldi	r20, 0x03	; 3
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	82 e4       	ldi	r24, 0x42	; 66
    15d6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15da:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    15dc:	10 92 36 01 	sts	0x0136, r1
    15e0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	90 93 34 01 	sts	0x0134, r25
    15ec:	80 93 33 01 	sts	0x0133, r24
    15f0:	08 95       	ret
       break;
    case 14: play_note('E', 0, 3, 4);
       break;
    case 15: play_rest(2);
       break;
    case 16: play_note('A', 0, 3, 2);
    15f2:	22 e0       	ldi	r18, 0x02	; 2
    15f4:	43 e0       	ldi	r20, 0x03	; 3
    15f6:	60 e0       	ldi	r22, 0x00	; 0
    15f8:	81 e4       	ldi	r24, 0x41	; 65
    15fa:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    15fe:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1600:	10 92 36 01 	sts	0x0136, r1
    1604:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	90 93 34 01 	sts	0x0134, r25
    1610:	80 93 33 01 	sts	0x0133, r24
    1614:	08 95       	ret
       break;
    case 12: play_note('G', 0, 3, 2);
       break;
    case 13: play_rest(4);
       break;
    case 14: play_note('E', 0, 3, 4);
    1616:	24 e0       	ldi	r18, 0x04	; 4
    1618:	43 e0       	ldi	r20, 0x03	; 3
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	85 e4       	ldi	r24, 0x45	; 69
    161e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1622:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1624:	10 92 36 01 	sts	0x0136, r1
    1628:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 34 01 	sts	0x0134, r25
    1634:	80 93 33 01 	sts	0x0133, r24
    1638:	08 95       	ret
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
       break;
    case 12: play_note('G', 0, 3, 2);
    163a:	22 e0       	ldi	r18, 0x02	; 2
    163c:	43 e0       	ldi	r20, 0x03	; 3
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	87 e4       	ldi	r24, 0x47	; 71
    1642:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 9: play_note('G', 0, 2, 8);
       break;
    case 10: play_rest(8);
       break;
    case 11: play_note('C', 0, 4, 5);
    1646:	25 e0       	ldi	r18, 0x05	; 5
    1648:	44 e0       	ldi	r20, 0x04	; 4
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	83 e4       	ldi	r24, 0x43	; 67
    164e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1652:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1654:	10 92 36 01 	sts	0x0136, r1
    1658:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    165c:	88 e0       	ldi	r24, 0x08	; 8
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	90 93 34 01 	sts	0x0134, r25
    1664:	80 93 33 01 	sts	0x0133, r24
    1668:	08 95       	ret
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
       break;
    case 9: play_note('G', 0, 2, 8);
    166a:	28 e0       	ldi	r18, 0x08	; 8
    166c:	42 e0       	ldi	r20, 0x02	; 2
    166e:	60 e0       	ldi	r22, 0x00	; 0
    1670:	87 e4       	ldi	r24, 0x47	; 71
    1672:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
       break;
    case 8: play_note('G', 0, 4, 8);
    1676:	28 e0       	ldi	r18, 0x08	; 8
    1678:	44 e0       	ldi	r20, 0x04	; 4
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	87 e4       	ldi	r24, 0x47	; 71
    167e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
       break;
    case 7: play_note('E', 0, 4, 4);
    1682:	24 e0       	ldi	r18, 0x04	; 4
    1684:	44 e0       	ldi	r20, 0x04	; 4
    1686:	60 e0       	ldi	r22, 0x00	; 0
    1688:	85 e4       	ldi	r24, 0x45	; 69
    168a:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 4: play_note('E', 0, 4, 2);
       break;
    case 5: play_rest(2);
       break;
    case 6: play_note('C', 0, 4, 2);
    168e:	22 e0       	ldi	r18, 0x02	; 2
    1690:	44 e0       	ldi	r20, 0x04	; 4
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	83 e4       	ldi	r24, 0x43	; 67
    1696:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    169a:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    169c:	10 92 36 01 	sts	0x0136, r1
    16a0:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	90 93 34 01 	sts	0x0134, r25
    16ac:	80 93 33 01 	sts	0x0133, r24
    16b0:	08 95       	ret
       break;
    case 2: play_note('E', 0, 4, 3);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 2);
    16b2:	22 e0       	ldi	r18, 0x02	; 2
    16b4:	44 e0       	ldi	r20, 0x04	; 4
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	85 e4       	ldi	r24, 0x45	; 69
    16ba:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16be:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16c0:	10 92 36 01 	sts	0x0136, r1
    16c4:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	90 93 34 01 	sts	0x0134, r25
    16d0:	80 93 33 01 	sts	0x0133, r24
    16d4:	08 95       	ret
switch (note) {
    case 0: play_note('E', 0, 4, 1);
       break;
    case 1: play_rest(1);
       break;
    case 2: play_note('E', 0, 4, 3);
    16d6:	23 e0       	ldi	r18, 0x03	; 3
    16d8:	44 e0       	ldi	r20, 0x04	; 4
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	85 e4       	ldi	r24, 0x45	; 69
    16de:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    16e2:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    16e4:	10 92 36 01 	sts	0x0136, r1
    16e8:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	90 93 34 01 	sts	0x0134, r25
    16f4:	80 93 33 01 	sts	0x0133, r24
    16f8:	08 95       	ret
 }
}//song1

void song2(uint16_t note) { //Super Mario Bros Theme (Brian)
switch (note) {
    case 0: play_note('E', 0, 4, 1);
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	44 e0       	ldi	r20, 0x04	; 4
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	85 e4       	ldi	r24, 0x45	; 69
    1702:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1706:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1708:	10 92 36 01 	sts	0x0136, r1
    170c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1710:	88 e0       	ldi	r24, 0x08	; 8
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	90 93 34 01 	sts	0x0134, r25
    1718:	80 93 33 01 	sts	0x0133, r24
    171c:	08 95       	ret

0000171e <song3>:

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    171e:	8f 31       	cpi	r24, 0x1F	; 31
    1720:	91 05       	cpc	r25, r1
    1722:	20 f0       	brcs	.+8      	; 0x172c <song3+0xe>
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
       break;
    default: notes=-1;
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	80 93 25 01 	sts	0x0125, r24
    172a:	08 95       	ret

 }
}//song2

void song3(uint16_t note) { //(Max and Kellen)
  switch (note) {
    172c:	fc 01       	movw	r30, r24
    172e:	e8 55       	subi	r30, 0x58	; 88
    1730:	fe 4f       	sbci	r31, 0xFE	; 254
    1732:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__tablejump2__>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1736:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1738:	10 92 36 01 	sts	0x0136, r1
    173c:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	90 93 34 01 	sts	0x0134, r25
    1748:	80 93 33 01 	sts	0x0133, r24
    174c:	08 95       	ret
       break;
    case 26: play_note('E', 0, 5, 3);
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
    174e:	24 e0       	ldi	r18, 0x04	; 4
    1750:	45 e0       	ldi	r20, 0x05	; 5
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	85 e4       	ldi	r24, 0x45	; 69
    1756:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 2: play_note('E', 0, 4, 7);
       break;
    case 3: play_rest(1);
       break;
    case 4: play_note('E', 0, 4, 7);
    175a:	27 e0       	ldi	r18, 0x07	; 7
    175c:	44 e0       	ldi	r20, 0x04	; 4
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	85 e4       	ldi	r24, 0x45	; 69
    1762:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 17: play_note('E', 1, 4, 7);
       break;
    case 18: play_rest(1);
       break;
    case 19: play_note('E', 1, 4, 7);
    1766:	27 e0       	ldi	r18, 0x07	; 7
    1768:	44 e0       	ldi	r20, 0x04	; 4
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	85 e4       	ldi	r24, 0x45	; 69
    176e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
}

void play_rest(uint8_t duration) {
  //mute for duration
  //duration is in 64th notes at 120bpm
  PORTD |= mute;
    1772:	92 9a       	sbi	0x12, 2	; 18
  beat=0;
    1774:	10 92 36 01 	sts	0x0136, r1
    1778:	10 92 35 01 	sts	0x0135, r1
  max_beat = duration;
    177c:	85 e0       	ldi	r24, 0x05	; 5
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	90 93 34 01 	sts	0x0134, r25
    1784:	80 93 33 01 	sts	0x0133, r24
    1788:	08 95       	ret
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
       break;
    case 30: play_note('E', 0, 5, 8);
    178a:	28 e0       	ldi	r18, 0x08	; 8
    178c:	45 e0       	ldi	r20, 0x05	; 5
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	85 e4       	ldi	r24, 0x45	; 69
    1792:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 21: play_note('E', 1, 4, 3);
       break;
    case 22: play_rest(1);
       break;
    case 23: play_note('E', 1, 4, 3);
    1796:	23 e0       	ldi	r18, 0x03	; 3
    1798:	44 e0       	ldi	r20, 0x04	; 4
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	85 e4       	ldi	r24, 0x45	; 69
    179e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 6: play_note('E', 0, 4, 3);
       break;
    case 7: play_rest(1);
       break;
    case 8: play_note('E', 0, 4, 3);
    17a2:	23 e0       	ldi	r18, 0x03	; 3
    17a4:	44 e0       	ldi	r20, 0x04	; 4
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	85 e4       	ldi	r24, 0x45	; 69
    17aa:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 11: play_note('G', 1, 5, 4);
       break;
    case 12: play_note('E', 0, 5, 4);
       break;
    case 13: play_note('G', 0, 5, 8);
    17ae:	28 e0       	ldi	r18, 0x08	; 8
    17b0:	45 e0       	ldi	r20, 0x05	; 5
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	87 e4       	ldi	r24, 0x47	; 71
    17b6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 23: play_note('E', 1, 4, 3);
       break;
    case 24: play_rest(5);
       break;
    case 25: play_note('E', 1, 5, 4);
    17ba:	24 e0       	ldi	r18, 0x04	; 4
    17bc:	45 e0       	ldi	r20, 0x05	; 5
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	85 e4       	ldi	r24, 0x45	; 69
    17c2:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 26: play_note('E', 0, 5, 3);
    17c6:	23 e0       	ldi	r18, 0x03	; 3
    17c8:	45 e0       	ldi	r20, 0x05	; 5
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	85 e4       	ldi	r24, 0x45	; 69
    17ce:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 9: play_rest(5);
       break;
    case 10: play_note('E', 0, 5, 4);
       break;
    case 11: play_note('G', 1, 5, 4);
    17d2:	24 e0       	ldi	r18, 0x04	; 4
    17d4:	45 e0       	ldi	r20, 0x05	; 5
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	87 e4       	ldi	r24, 0x47	; 71
    17da:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>
       break;
    case 27: play_rest(1); //rest 1
       break;
    case 28: play_note('E', 0, 5, 4);
       break;
    case 29: play_note('G', 1, 5, 8);
    17de:	28 e0       	ldi	r18, 0x08	; 8
    17e0:	45 e0       	ldi	r20, 0x05	; 5
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	87 e4       	ldi	r24, 0x47	; 71
    17e6:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <play_note>

000017ea <play_song>:
}//song3

void play_song(uint8_t song, uint8_t note) {
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	89 f0       	breq	.+34     	; 0x1810 <play_song+0x26>
    17ee:	60 f0       	brcs	.+24     	; 0x1808 <play_song+0x1e>
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	31 f0       	breq	.+12     	; 0x1800 <play_song+0x16>
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	41 f4       	brne	.+16     	; 0x1808 <play_song+0x1e>
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    break;
  case 3: song3(note);
    17f8:	86 2f       	mov	r24, r22
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <song3>
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    break;
  case 2: song2(note); //super mario bros
    1800:	86 2f       	mov	r24, r22
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <song2>
    break;
  case 3: song3(note);
    break;
  default: song0(note); //defaults to beaver fight song
    1808:	86 2f       	mov	r24, r22
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <song0>
  //if you add a song, you'll have to add it to this
  //switch statement.
  switch (song) {
  case 0: song0(note); //beaver fight song
    break;
  case 1: song1(note); //tetris theme
    1810:	86 2f       	mov	r24, r22
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0c 94 ef 05 	jmp	0xbde	; 0xbde <song1>

00001818 <music_off>:
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1818:	10 92 25 01 	sts	0x0125, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    181c:	8e b5       	in	r24, 0x2e	; 46
    181e:	8c 7f       	andi	r24, 0xFC	; 252
    1820:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    1822:	92 9a       	sbi	0x12, 2	; 18
    1824:	08 95       	ret

00001826 <music_on>:
}

void music_on(void) {
  //this starts the alarm timer running
  notes=0;
    1826:	10 92 25 01 	sts	0x0125, r1
  TCCR1B |= (1<<CS11)|(1<<CS10);
    182a:	8e b5       	in	r24, 0x2e	; 46
    182c:	83 60       	ori	r24, 0x03	; 3
    182e:	8e bd       	out	0x2e, r24	; 46
  //unmutes the output
  PORTD &= unmute;
    1830:	92 98       	cbi	0x12, 2	; 18
  //and starts the selected song
  play_song(song, notes);
    1832:	60 91 25 01 	lds	r22, 0x0125
    1836:	80 91 32 01 	lds	r24, 0x0132
    183a:	0c 94 f5 0b 	jmp	0x17ea	; 0x17ea <play_song>

0000183e <music_init>:
}

void music_init(void) {
  //initially turned off (use music_on() to turn on)
  TIMSK |= (1<<OCIE1A);  //enable timer interrupt 1 on compare
    183e:	87 b7       	in	r24, 0x37	; 55
    1840:	80 61       	ori	r24, 0x10	; 16
    1842:	87 bf       	out	0x37, r24	; 55
  TCCR1A = 0x00;         //TCNT1, normal port operation
    1844:	1f bc       	out	0x2f, r1	; 47
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
    1846:	8e b5       	in	r24, 0x2e	; 46
    1848:	88 60       	ori	r24, 0x08	; 8
    184a:	8e bd       	out	0x2e, r24	; 46
  TCCR1C = 0x00;         //no forced compare
    184c:	10 92 7a 00 	sts	0x007A, r1
  OCR1A = 0x0031;        //(use to vary alarm frequency)
    1850:	81 e3       	ldi	r24, 0x31	; 49
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	9b bd       	out	0x2b, r25	; 43
    1856:	8a bd       	out	0x2a, r24	; 42
  }
}

void music_off(void) {
  //this turns the alarm timer off
  notes=0;
    1858:	10 92 25 01 	sts	0x0125, r1
  TCCR1B &= ~((1<<CS11)|(1<<CS10));
    185c:	8e b5       	in	r24, 0x2e	; 46
    185e:	8c 7f       	andi	r24, 0xFC	; 252
    1860:	8e bd       	out	0x2e, r24	; 46
  //and mutes the output
  PORTD |= mute;
    1862:	92 9a       	sbi	0x12, 2	; 18
  TCCR1A = 0x00;         //TCNT1, normal port operation
  TCCR1B |= (1<<WGM12);  //CTC, OCR1A = top, clk/64 (250kHz)
  TCCR1C = 0x00;         //no forced compare
  OCR1A = 0x0031;        //(use to vary alarm frequency)
  music_off();
  beat = 0;
    1864:	10 92 36 01 	sts	0x0136, r1
    1868:	10 92 35 01 	sts	0x0135, r1
  max_beat = 0;
    186c:	10 92 34 01 	sts	0x0134, r1
    1870:	10 92 33 01 	sts	0x0133, r1
  notes = 0;
    1874:	10 92 25 01 	sts	0x0125, r1
  song = 0;              //beaver fight song
    1878:	10 92 32 01 	sts	0x0132, r1
    187c:	08 95       	ret

0000187e <__vector_12>:
/*********************************************************************/
/*                             TIMER1_COMPA                          */
/*Oscillates pin7, PORTD for alarm tone output                       */
/*********************************************************************/

ISR(TIMER1_COMPA_vect) {
    187e:	1f 92       	push	r1
    1880:	0f 92       	push	r0
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	0f 92       	push	r0
    1886:	11 24       	eor	r1, r1
    1888:	0b b6       	in	r0, 0x3b	; 59
    188a:	0f 92       	push	r0
    188c:	2f 93       	push	r18
    188e:	3f 93       	push	r19
    1890:	4f 93       	push	r20
    1892:	5f 93       	push	r21
    1894:	6f 93       	push	r22
    1896:	7f 93       	push	r23
    1898:	8f 93       	push	r24
    189a:	9f 93       	push	r25
    189c:	af 93       	push	r26
    189e:	bf 93       	push	r27
    18a0:	ef 93       	push	r30
    18a2:	ff 93       	push	r31
  PORTD ^= ALARM_PIN;      //flips the bit, creating a tone
    18a4:	82 b3       	in	r24, 0x12	; 18
    18a6:	80 58       	subi	r24, 0x80	; 128
    18a8:	82 bb       	out	0x12, r24	; 18
  if(beat >= max_beat) {   //if we've played the note long enough
    18aa:	20 91 35 01 	lds	r18, 0x0135
    18ae:	30 91 36 01 	lds	r19, 0x0136
    18b2:	80 91 33 01 	lds	r24, 0x0133
    18b6:	90 91 34 01 	lds	r25, 0x0134
    18ba:	28 17       	cp	r18, r24
    18bc:	39 07       	cpc	r19, r25
    18be:	58 f0       	brcs	.+22     	; 0x18d6 <__vector_12+0x58>
    notes++;               //move on to the next note
    18c0:	80 91 25 01 	lds	r24, 0x0125
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	80 93 25 01 	sts	0x0125, r24
    play_song(song, notes);//and play it
    18ca:	60 91 25 01 	lds	r22, 0x0125
    18ce:	80 91 32 01 	lds	r24, 0x0132
    18d2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <play_song>
  }
}
    18d6:	ff 91       	pop	r31
    18d8:	ef 91       	pop	r30
    18da:	bf 91       	pop	r27
    18dc:	af 91       	pop	r26
    18de:	9f 91       	pop	r25
    18e0:	8f 91       	pop	r24
    18e2:	7f 91       	pop	r23
    18e4:	6f 91       	pop	r22
    18e6:	5f 91       	pop	r21
    18e8:	4f 91       	pop	r20
    18ea:	3f 91       	pop	r19
    18ec:	2f 91       	pop	r18
    18ee:	0f 90       	pop	r0
    18f0:	0b be       	out	0x3b, r0	; 59
    18f2:	0f 90       	pop	r0
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	0f 90       	pop	r0
    18f8:	1f 90       	pop	r1
    18fa:	18 95       	reti

000018fc <chk_buttons>:
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    18fc:	20 91 1c 01 	lds	r18, 0x011C
    1900:	30 91 1d 01 	lds	r19, 0x011D
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	49 b3       	in	r20, 0x19	; 25
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <chk_buttons+0x16>
    190e:	55 95       	asr	r21
    1910:	47 95       	ror	r20
    1912:	8a 95       	dec	r24
    1914:	e2 f7       	brpl	.-8      	; 0x190e <chk_buttons+0x12>
    1916:	40 fd       	sbrc	r20, 0
    1918:	0e c0       	rjmp	.+28     	; 0x1936 <chk_buttons+0x3a>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 ee       	ldi	r25, 0xE0	; 224
    191e:	28 2b       	or	r18, r24
    1920:	39 2b       	or	r19, r25
    1922:	30 93 1d 01 	sts	0x011D, r19
    1926:	20 93 1c 01 	sts	0x011C, r18
    if (state == 0xF000){
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	21 15       	cp	r18, r1
    192e:	30 4f       	sbci	r19, 0xF0	; 240
    1930:	09 f0       	breq	.+2      	; 0x1934 <chk_buttons+0x38>
    1932:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
    }
    return 0;
}
    1934:	08 95       	ret
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 ee       	ldi	r25, 0xE0	; 224
    193a:	f1 cf       	rjmp	.-30     	; 0x191e <chk_buttons+0x22>

0000193c <int2seg>:
//***********************************************************************************
// int2seg
// return the 7-segment code for each digit
//***********************************************************************************
uint8_t int2seg(uint8_t number){
    if(number == 0 ){
    193c:	81 11       	cpse	r24, r1
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <int2seg+0x8>
	return ZERO;
    1940:	80 ec       	ldi	r24, 0xC0	; 192
    1942:	08 95       	ret
    }
    else if(number == 1 ){
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 f0       	breq	.+36     	; 0x196c <int2seg+0x30>
	return ONE;
    }
    else if(number == 2 ){
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	91 f0       	breq	.+36     	; 0x1970 <int2seg+0x34>
	return TWO;
    }
    else if(number == 3 ){
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	a1 f0       	breq	.+40     	; 0x1978 <int2seg+0x3c>
	return THREE;
    }
    else if(number == 4 ){
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	81 f0       	breq	.+32     	; 0x1974 <int2seg+0x38>
	return FOUR;
    }
    else if(number == 5 ){
    1954:	85 30       	cpi	r24, 0x05	; 5
    1956:	91 f0       	breq	.+36     	; 0x197c <int2seg+0x40>
	return FIVE;
    }
    else if(number == 6 ){
    1958:	86 30       	cpi	r24, 0x06	; 6
    195a:	91 f0       	breq	.+36     	; 0x1980 <int2seg+0x44>
	return  SIX;
    }
    else if(number == 7 ){
    195c:	87 30       	cpi	r24, 0x07	; 7
    195e:	91 f0       	breq	.+36     	; 0x1984 <int2seg+0x48>
	return SEVEN;
    }
    else if(number == 8 ){
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	91 f0       	breq	.+36     	; 0x1988 <int2seg+0x4c>
	return EIGHT;
    }
    else if(number == 9 ){
    1964:	89 30       	cpi	r24, 0x09	; 9
    1966:	91 f0       	breq	.+36     	; 0x198c <int2seg+0x50>
	return NINE;
    }
    else{ 
	return 0;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	08 95       	ret
uint8_t int2seg(uint8_t number){
    if(number == 0 ){
	return ZERO;
    }
    else if(number == 1 ){
	return ONE;
    196c:	89 ef       	ldi	r24, 0xF9	; 249
    196e:	08 95       	ret
    }
    else if(number == 2 ){
	return TWO;
    1970:	84 ea       	ldi	r24, 0xA4	; 164
    1972:	08 95       	ret
    }
    else if(number == 3 ){
	return THREE;
    }
    else if(number == 4 ){
	return FOUR;
    1974:	89 e9       	ldi	r24, 0x99	; 153
    1976:	08 95       	ret
    }
    else if(number == 2 ){
	return TWO;
    }
    else if(number == 3 ){
	return THREE;
    1978:	80 eb       	ldi	r24, 0xB0	; 176
    197a:	08 95       	ret
    }
    else if(number == 4 ){
	return FOUR;
    }
    else if(number == 5 ){
	return FIVE;
    197c:	82 e9       	ldi	r24, 0x92	; 146
    197e:	08 95       	ret
    }
    else if(number == 6 ){
	return  SIX;
    1980:	82 e8       	ldi	r24, 0x82	; 130
    1982:	08 95       	ret
    }
    else if(number == 7 ){
	return SEVEN;
    1984:	88 ef       	ldi	r24, 0xF8	; 248
	return NINE;
    }
    else{ 
	return 0;
    }
}
    1986:	08 95       	ret
    }
    else if(number == 7 ){
	return SEVEN;
    }
    else if(number == 8 ){
	return EIGHT;
    1988:	80 e8       	ldi	r24, 0x80	; 128
    198a:	08 95       	ret
    }
    else if(number == 9 ){
	return NINE;
    198c:	80 e9       	ldi	r24, 0x90	; 144
    198e:	08 95       	ret

00001990 <segsum>:
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
//***********************************************************************************

void segsum(uint16_t sum) {
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	ec 01       	movw	r28, r24
    //determine how many digits there are 
    //int digit;
    // Break down the digits
    
    if(ticker%2 == 1){
    199a:	80 91 1e 01 	lds	r24, 0x011E
    199e:	80 ff       	sbrs	r24, 0
    19a0:	79 c0       	rjmp	.+242    	; 0x1a94 <segsum+0x104>
	segment_data[2] = 0xFC;
    19a2:	8c ef       	ldi	r24, 0xFC	; 252
    19a4:	80 93 3a 01 	sts	0x013A, r24
	segment_data[2] = 0xFF;
    } 
    //When setting alarm is on)
    //break up decimal sum into 4 digit-segments
    
    segment_data[0] = int2seg(sum % 10); //ones
    19a8:	9e 01       	movw	r18, r28
    19aa:	ad ec       	ldi	r26, 0xCD	; 205
    19ac:	bc ec       	ldi	r27, 0xCC	; 204
    19ae:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__umulhisi3>
    19b2:	96 95       	lsr	r25
    19b4:	87 95       	ror	r24
    19b6:	96 95       	lsr	r25
    19b8:	87 95       	ror	r24
    19ba:	96 95       	lsr	r25
    19bc:	87 95       	ror	r24
    19be:	3c 2f       	mov	r19, r28
    19c0:	2a e0       	ldi	r18, 0x0A	; 10
    19c2:	82 9f       	mul	r24, r18
    19c4:	30 19       	sub	r19, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	83 2f       	mov	r24, r19
    19ca:	0e 94 9e 0c 	call	0x193c	; 0x193c <int2seg>
    19ce:	80 93 38 01 	sts	0x0138, r24
    segment_data[1] = int2seg((sum % 100)/10); //tens
    19d2:	9e 01       	movw	r18, r28
    19d4:	36 95       	lsr	r19
    19d6:	27 95       	ror	r18
    19d8:	36 95       	lsr	r19
    19da:	27 95       	ror	r18
    19dc:	ab e7       	ldi	r26, 0x7B	; 123
    19de:	b4 e1       	ldi	r27, 0x14	; 20
    19e0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__umulhisi3>
    19e4:	96 95       	lsr	r25
    19e6:	87 95       	ror	r24
    19e8:	44 e6       	ldi	r20, 0x64	; 100
    19ea:	48 9f       	mul	r20, r24
    19ec:	90 01       	movw	r18, r0
    19ee:	49 9f       	mul	r20, r25
    19f0:	30 0d       	add	r19, r0
    19f2:	11 24       	eor	r1, r1
    19f4:	ce 01       	movw	r24, r28
    19f6:	82 1b       	sub	r24, r18
    19f8:	93 0b       	sbc	r25, r19
    19fa:	9c 01       	movw	r18, r24
    19fc:	ad ec       	ldi	r26, 0xCD	; 205
    19fe:	bc ec       	ldi	r27, 0xCC	; 204
    1a00:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__umulhisi3>
    1a04:	96 95       	lsr	r25
    1a06:	87 95       	ror	r24
    1a08:	96 95       	lsr	r25
    1a0a:	87 95       	ror	r24
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	0e 94 9e 0c 	call	0x193c	; 0x193c <int2seg>
    1a14:	80 93 39 01 	sts	0x0139, r24
    //segment_data[2] = 1; //decimal
    segment_data[3] = int2seg((sum % 1000)/100); //hundreds
    1a18:	9e 01       	movw	r18, r28
    1a1a:	36 95       	lsr	r19
    1a1c:	27 95       	ror	r18
    1a1e:	36 95       	lsr	r19
    1a20:	27 95       	ror	r18
    1a22:	36 95       	lsr	r19
    1a24:	27 95       	ror	r18
    1a26:	a5 ec       	ldi	r26, 0xC5	; 197
    1a28:	b0 e2       	ldi	r27, 0x20	; 32
    1a2a:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__umulhisi3>
    1a2e:	8c 01       	movw	r16, r24
    1a30:	12 95       	swap	r17
    1a32:	02 95       	swap	r16
    1a34:	0f 70       	andi	r16, 0x0F	; 15
    1a36:	01 27       	eor	r16, r17
    1a38:	1f 70       	andi	r17, 0x0F	; 15
    1a3a:	01 27       	eor	r16, r17
    1a3c:	28 ee       	ldi	r18, 0xE8	; 232
    1a3e:	33 e0       	ldi	r19, 0x03	; 3
    1a40:	02 9f       	mul	r16, r18
    1a42:	c0 01       	movw	r24, r0
    1a44:	03 9f       	mul	r16, r19
    1a46:	90 0d       	add	r25, r0
    1a48:	12 9f       	mul	r17, r18
    1a4a:	90 0d       	add	r25, r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	9e 01       	movw	r18, r28
    1a50:	28 1b       	sub	r18, r24
    1a52:	39 0b       	sbc	r19, r25
    1a54:	36 95       	lsr	r19
    1a56:	27 95       	ror	r18
    1a58:	36 95       	lsr	r19
    1a5a:	27 95       	ror	r18
    1a5c:	ab e7       	ldi	r26, 0x7B	; 123
    1a5e:	b4 e1       	ldi	r27, 0x14	; 20
    1a60:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__umulhisi3>
    1a64:	96 95       	lsr	r25
    1a66:	87 95       	ror	r24
    1a68:	0e 94 9e 0c 	call	0x193c	; 0x193c <int2seg>
    1a6c:	80 93 3b 01 	sts	0x013B, r24
    segment_data[4] = int2seg(sum/1000); //thousands
    1a70:	80 2f       	mov	r24, r16
    1a72:	0e 94 9e 0c 	call	0x193c	; 0x193c <int2seg>
    1a76:	80 93 3c 01 	sts	0x013C, r24
    //blank out leading zero digits 
    //now move data to right place for misplaced colon position
    if(mode == 3){
    1a7a:	80 91 24 01 	lds	r24, 0x0124
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	f9 f0       	breq	.+62     	; 0x1ac0 <segsum+0x130>
	//segment_data[4] = 0xFF;
       // segment_data[3] = 0xFF;
	segment_data[2] = 0xFF;
    }

    else if(mode == 2){
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	29 f1       	breq	.+74     	; 0x1ad0 <segsum+0x140>
	segment_data[2] = 0x00;
    }                                         
    else if(mode == 1 && blink){
    1a86:	81 30       	cpi	r24, 0x01	; 1
    1a88:	49 f0       	breq	.+18     	; 0x1a9c <segsum+0x10c>
	segment_data[4] = 0xFF;
	segment_data[3] = 0xFF;
	segment_data[1] = 0xFF;
	segment_data[0] = 0xFF;
    }
}//segment_sum
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret
    
    if(ticker%2 == 1){
	segment_data[2] = 0xFC;
    }
    else{
	segment_data[2] = 0xFF;
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	80 93 3a 01 	sts	0x013A, r24
    1a9a:	86 cf       	rjmp	.-244    	; 0x19a8 <segsum+0x18>
    }

    else if(mode == 2){
	segment_data[2] = 0x00;
    }                                         
    else if(mode == 1 && blink){
    1a9c:	80 91 10 01 	lds	r24, 0x0110
    1aa0:	88 23       	and	r24, r24
    1aa2:	99 f3       	breq	.-26     	; 0x1a8a <segsum+0xfa>
	segment_data[4] = 0xFF;
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	80 93 3c 01 	sts	0x013C, r24
	segment_data[3] = 0xFF;
    1aaa:	80 93 3b 01 	sts	0x013B, r24
	segment_data[1] = 0xFF;
    1aae:	80 93 39 01 	sts	0x0139, r24
	segment_data[0] = 0xFF;
    1ab2:	80 93 38 01 	sts	0x0138, r24
    }
}//segment_sum
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret
    //blank out leading zero digits 
    //now move data to right place for misplaced colon position
    if(mode == 3){
	//segment_data[4] = 0xFF;
       // segment_data[3] = 0xFF;
	segment_data[2] = 0xFF;
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	80 93 3a 01 	sts	0x013A, r24
	segment_data[4] = 0xFF;
	segment_data[3] = 0xFF;
	segment_data[1] = 0xFF;
	segment_data[0] = 0xFF;
    }
}//segment_sum
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret
       // segment_data[3] = 0xFF;
	segment_data[2] = 0xFF;
    }

    else if(mode == 2){
	segment_data[2] = 0x00;
    1ad0:	10 92 3a 01 	sts	0x013A, r1
	segment_data[4] = 0xFF;
	segment_data[3] = 0xFF;
	segment_data[1] = 0xFF;
	segment_data[0] = 0xFF;
    }
}//segment_sum
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <button_routine>:
//***********************************************************************************
void button_routine(){
    1ade:	cf 93       	push	r28
    uint8_t button;
    int previous_mode;   
    DDRA  = 0x00; // PORTA input mode
    1ae0:	1a ba       	out	0x1a, r1	; 26
    PORTA = 0xFF; //Pull ups
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	8b bb       	out	0x1b, r24	; 27
    __asm__ __volatile__ ("nop");
    1ae6:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1ae8:	00 00       	nop
    //enable tristate buffer for pushbutton switches
    PORTB |= 0x70; //Set S2,S1,S0 to 111
    1aea:	88 b3       	in	r24, 0x18	; 24
    1aec:	80 67       	ori	r24, 0x70	; 112
    1aee:	88 bb       	out	0x18, r24	; 24
    __asm__ __volatile__ ("nop");
    1af0:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1af2:	00 00       	nop
    //now check each button and increment the count as needed
    previous_mode = mode;
    1af4:	60 91 24 01 	lds	r22, 0x0124
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	80 91 1c 01 	lds	r24, 0x011C
    1afe:	90 91 1d 01 	lds	r25, 0x011D
    1b02:	f1 e0       	ldi	r31, 0x01	; 1
    1b04:	e0 e0       	ldi	r30, 0x00	; 0
	    }
	    else if(button == 1){  
		mode = 2;
	    }
	    else if(button == 2){
		mode = 3;
    1b06:	c3 e0       	ldi	r28, 0x03	; 3
	    }
	    if(button == 0){
		mode = 1;   
	    }
	    else if(button == 1){  
		mode = 2;
    1b08:	b2 e0       	ldi	r27, 0x02	; 2
	    if(previous_mode == button + 1){
		mode = 0;
		return;
	    }
	    if(button == 0){
		mode = 1;   
    1b0a:	a1 e0       	ldi	r26, 0x01	; 1
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    1b0c:	9c 01       	movw	r18, r24
    1b0e:	22 0f       	add	r18, r18
    1b10:	33 1f       	adc	r19, r19
    1b12:	89 b3       	in	r24, 0x19	; 25
    1b14:	4e 2f       	mov	r20, r30
    1b16:	50 e0       	ldi	r21, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 2e       	mov	r0, r30
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <button_routine+0x44>
    1b1e:	95 95       	asr	r25
    1b20:	87 95       	ror	r24
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <button_routine+0x40>
    1b26:	80 fd       	sbrc	r24, 0
    1b28:	11 c0       	rjmp	.+34     	; 0x1b4c <button_routine+0x6e>
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 ee       	ldi	r25, 0xE0	; 224
    1b2e:	82 2b       	or	r24, r18
    1b30:	93 2b       	or	r25, r19
    1b32:	90 93 1d 01 	sts	0x011D, r25
    1b36:	80 93 1c 01 	sts	0x011C, r24
    if (state == 0xF000){
    1b3a:	81 15       	cp	r24, r1
    1b3c:	20 ef       	ldi	r18, 0xF0	; 240
    1b3e:	92 07       	cpc	r25, r18
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <button_routine+0x74>
    PORTB |= 0x70; //Set S2,S1,S0 to 111
    __asm__ __volatile__ ("nop");
    __asm__ __volatile__ ("nop");
    //now check each button and increment the count as needed
    previous_mode = mode;
    for (button = 0 ; button < BUTTON_COUNT ; button++){
    1b42:	f4 30       	cpi	r31, 0x04	; 4
    1b44:	a1 f0       	breq	.+40     	; 0x1b6e <button_routine+0x90>
    1b46:	ef 5f       	subi	r30, 0xFF	; 255
    1b48:	ff 5f       	subi	r31, 0xFF	; 255
    1b4a:	e0 cf       	rjmp	.-64     	; 0x1b0c <button_routine+0x2e>
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"            
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 ee       	ldi	r25, 0xE0	; 224
    1b50:	ee cf       	rjmp	.-36     	; 0x1b2e <button_routine+0x50>
    //now check each button and increment the count as needed
    previous_mode = mode;
    for (button = 0 ; button < BUTTON_COUNT ; button++){
	if (chk_buttons(button)){
	    //Check the state of buttons
	    if(previous_mode == button + 1){
    1b52:	4f 5f       	subi	r20, 0xFF	; 255
    1b54:	5f 4f       	sbci	r21, 0xFF	; 255
    1b56:	46 17       	cp	r20, r22
    1b58:	57 07       	cpc	r21, r23
    1b5a:	79 f0       	breq	.+30     	; 0x1b7a <button_routine+0x9c>
		mode = 0;
		return;
	    }
	    if(button == 0){
    1b5c:	ee 23       	and	r30, r30
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <button_routine+0xa2>
		mode = 1;   
	    }
	    else if(button == 1){  
    1b60:	e1 30       	cpi	r30, 0x01	; 1
    1b62:	89 f0       	breq	.+34     	; 0x1b86 <button_routine+0xa8>
		mode = 2;
	    }
	    else if(button == 2){
    1b64:	e2 30       	cpi	r30, 0x02	; 2
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <button_routine+0x64>
		mode = 3;
    1b68:	c0 93 24 01 	sts	0x0124, r28
    1b6c:	ec cf       	rjmp	.-40     	; 0x1b46 <button_routine+0x68>
	    } 
	}
    }
    DDRA = 0xFF;  //switch PORTA to output
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	8a bb       	out	0x1a, r24	; 26
    __asm__ __volatile__ ("nop"); //Buffer
    1b72:	00 00       	nop
    __asm__ __volatile__ ("nop"); //Buffer 
    1b74:	00 00       	nop

}
    1b76:	cf 91       	pop	r28
    1b78:	08 95       	ret
    previous_mode = mode;
    for (button = 0 ; button < BUTTON_COUNT ; button++){
	if (chk_buttons(button)){
	    //Check the state of buttons
	    if(previous_mode == button + 1){
		mode = 0;
    1b7a:	10 92 24 01 	sts	0x0124, r1
		return;
    1b7e:	fb cf       	rjmp	.-10     	; 0x1b76 <button_routine+0x98>
	    }
	    if(button == 0){
		mode = 1;   
    1b80:	a0 93 24 01 	sts	0x0124, r26
    1b84:	e0 cf       	rjmp	.-64     	; 0x1b46 <button_routine+0x68>
	    }
	    else if(button == 1){  
		mode = 2;
    1b86:	b0 93 24 01 	sts	0x0124, r27
    1b8a:	dd cf       	rjmp	.-70     	; 0x1b46 <button_routine+0x68>

00001b8c <__vector_21>:
    display_update(); 
    //bar_graph();
    //OCR2 = brightness[brightness_level];
}

ISR(ADC_vect){
    1b8c:	1f 92       	push	r1
    1b8e:	0f 92       	push	r0
    1b90:	0f b6       	in	r0, 0x3f	; 63
    1b92:	0f 92       	push	r0
    1b94:	11 24       	eor	r1, r1
    1b96:	8f 93       	push	r24
    1b98:	9f 93       	push	r25
    //brightness_level = 255 - ADC;
    
    if(ADCH < 100){
    1b9a:	85 b1       	in	r24, 0x05	; 5
    1b9c:	84 36       	cpi	r24, 0x64	; 100
    1b9e:	48 f0       	brcs	.+18     	; 0x1bb2 <__vector_21+0x26>
       OCR2 = 100-ADCH;
    }  
    else{
	OCR2 = 1;// brightness_level;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	83 bd       	out	0x23, r24	; 35
    }
    //OCR2 =150;
    //second++;
    //ADCSRA |= (1<<ADSC);
    //second++;
}
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	0f 90       	pop	r0
    1bae:	1f 90       	pop	r1
    1bb0:	18 95       	reti

ISR(ADC_vect){
    //brightness_level = 255 - ADC;
    
    if(ADCH < 100){
       OCR2 = 100-ADCH;
    1bb2:	95 b1       	in	r25, 0x05	; 5
    1bb4:	84 e6       	ldi	r24, 0x64	; 100
    1bb6:	89 1b       	sub	r24, r25
    1bb8:	83 bd       	out	0x23, r24	; 35
    }
    //OCR2 =150;
    //second++;
    //ADCSRA |= (1<<ADSC);
    //second++;
}
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	0f 90       	pop	r0
    1bc0:	0f be       	out	0x3f, r0	; 63
    1bc2:	0f 90       	pop	r0
    1bc4:	1f 90       	pop	r1
    1bc6:	18 95       	reti

00001bc8 <update_time>:
/***************************************************************************
  Initialize SPI 
 ****************************************************************************/
void update_time(void){

    if (second >= 60){
    1bc8:	40 91 23 01 	lds	r20, 0x0123
	minute++;
    1bcc:	80 91 22 01 	lds	r24, 0x0122
/***************************************************************************
  Initialize SPI 
 ****************************************************************************/
void update_time(void){

    if (second >= 60){
    1bd0:	4c 33       	cpi	r20, 0x3C	; 60
    1bd2:	80 f5       	brcc	.+96     	; 0x1c34 <update_time+0x6c>
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
	minute++;
	second = 0;
    }             
    if(minute >=60){
    1bd6:	8c 33       	cpi	r24, 0x3C	; 60
    1bd8:	28 f5       	brcc	.+74     	; 0x1c24 <update_time+0x5c>
    1bda:	80 91 21 01 	lds	r24, 0x0121
	hour++;
	minute = 0;
    }
    if(hour >= 24){
    1bde:	88 31       	cpi	r24, 0x18	; 24
    1be0:	10 f0       	brcs	.+4      	; 0x1be6 <update_time+0x1e>
	hour = 0;
    1be2:	10 92 21 01 	sts	0x0121, r1
    }    
    if(alarm_minute >=60){
    1be6:	60 91 20 01 	lds	r22, 0x0120
	alarm_hour++;
    1bea:	80 91 1f 01 	lds	r24, 0x011F
	minute = 0;
    }
    if(hour >= 24){
	hour = 0;
    }    
    if(alarm_minute >=60){
    1bee:	6c 33       	cpi	r22, 0x3C	; 60
    1bf0:	48 f5       	brcc	.+82     	; 0x1c44 <update_time+0x7c>
    1bf2:	20 91 22 01 	lds	r18, 0x0122
    1bf6:	74 e6       	ldi	r23, 0x64	; 100
    1bf8:	27 9f       	mul	r18, r23
    1bfa:	90 01       	movw	r18, r0
    1bfc:	11 24       	eor	r1, r1
	alarm_hour++;
	minute = 0;
    }
    if(alarm_hour >= 24){
    1bfe:	88 31       	cpi	r24, 0x18	; 24
    1c00:	50 f1       	brcs	.+84     	; 0x1c56 <update_time+0x8e>
	alarm_hour = 0;
    1c02:	10 92 1f 01 	sts	0x011F, r1
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    }    

    //update_number();
    time = (minute * 100) + second;
    1c0a:	24 0f       	add	r18, r20
    1c0c:	35 1f       	adc	r19, r21
    1c0e:	30 93 14 01 	sts	0x0114, r19
    1c12:	20 93 13 01 	sts	0x0113, r18
    alarm_time = (alarm_hour * 100) + alarm_minute;
    1c16:	86 0f       	add	r24, r22
    1c18:	91 1d       	adc	r25, r1
    1c1a:	90 93 12 01 	sts	0x0112, r25
    1c1e:	80 93 11 01 	sts	0x0111, r24
    1c22:	08 95       	ret
    if (second >= 60){
	minute++;
	second = 0;
    }             
    if(minute >=60){
	hour++;
    1c24:	80 91 21 01 	lds	r24, 0x0121
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	80 93 21 01 	sts	0x0121, r24
	minute = 0;
    1c2e:	10 92 22 01 	sts	0x0122, r1
    1c32:	d5 cf       	rjmp	.-86     	; 0x1bde <update_time+0x16>
  Initialize SPI 
 ****************************************************************************/
void update_time(void){

    if (second >= 60){
	minute++;
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	80 93 22 01 	sts	0x0122, r24
	second = 0;
    1c3a:	10 92 23 01 	sts	0x0123, r1
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	c9 cf       	rjmp	.-110    	; 0x1bd6 <update_time+0xe>
    }
    if(hour >= 24){
	hour = 0;
    }    
    if(alarm_minute >=60){
	alarm_hour++;
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	80 93 1f 01 	sts	0x011F, r24
	minute = 0;
    1c4a:	10 92 22 01 	sts	0x0122, r1
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    }
    if(alarm_hour >= 24){
    1c52:	88 31       	cpi	r24, 0x18	; 24
    1c54:	b0 f6       	brcc	.-84     	; 0x1c02 <update_time+0x3a>
    1c56:	74 e6       	ldi	r23, 0x64	; 100
    1c58:	87 9f       	mul	r24, r23
    1c5a:	c0 01       	movw	r24, r0
    1c5c:	11 24       	eor	r1, r1
    1c5e:	d5 cf       	rjmp	.-86     	; 0x1c0a <update_time+0x42>

00001c60 <__vector_16>:
  Interrupt routine: set flag for checking button in main
  (Might cause an issue if button check takes too long to run, it will become
  polling instead of interrupt. Tried putting button routine in the ISR,
  LED dims
 ****************************************************************************/
ISR(TIMER0_OVF_vect){
    1c60:	1f 92       	push	r1
    1c62:	0f 92       	push	r0
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	0f 92       	push	r0
    1c68:	11 24       	eor	r1, r1
    1c6a:	0b b6       	in	r0, 0x3b	; 59
    1c6c:	0f 92       	push	r0
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	cf 93       	push	r28
    1c84:	ef 93       	push	r30
    1c86:	ff 93       	push	r31
    static uint8_t count = 0;
    count++;
    1c88:	c0 91 1b 01 	lds	r28, 0x011B
    1c8c:	cf 5f       	subi	r28, 0xFF	; 255
    1c8e:	c0 93 1b 01 	sts	0x011B, r28
    update_time();
    1c92:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <update_time>
    if((count%32) == 0){
    1c96:	8c 2f       	mov	r24, r28
    1c98:	8f 71       	andi	r24, 0x1F	; 31
    1c9a:	39 f4       	brne	.+14     	; 0x1caa <__vector_16+0x4a>
	blink = !blink;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 91 10 01 	lds	r25, 0x0110
    1ca2:	91 11       	cpse	r25, r1
    1ca4:	22 c0       	rjmp	.+68     	; 0x1cea <__vector_16+0x8a>
    1ca6:	80 93 10 01 	sts	0x0110, r24
    }
    if((count%128)==0){
    1caa:	cf 77       	andi	r28, 0x7F	; 127
    1cac:	51 f4       	brne	.+20     	; 0x1cc2 <__vector_16+0x62>
	ticker++;     
    1cae:	80 91 1e 01 	lds	r24, 0x011E
    1cb2:	8f 5f       	subi	r24, 0xFF	; 255
    1cb4:	80 93 1e 01 	sts	0x011E, r24
	second++;    
    1cb8:	80 91 23 01 	lds	r24, 0x0123
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	80 93 23 01 	sts	0x0123, r24
    }

}
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	cf 91       	pop	r28
    1cc8:	bf 91       	pop	r27
    1cca:	af 91       	pop	r26
    1ccc:	9f 91       	pop	r25
    1cce:	8f 91       	pop	r24
    1cd0:	7f 91       	pop	r23
    1cd2:	6f 91       	pop	r22
    1cd4:	5f 91       	pop	r21
    1cd6:	4f 91       	pop	r20
    1cd8:	3f 91       	pop	r19
    1cda:	2f 91       	pop	r18
    1cdc:	0f 90       	pop	r0
    1cde:	0b be       	out	0x3b, r0	; 59
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti
ISR(TIMER0_OVF_vect){
    static uint8_t count = 0;
    count++;
    update_time();
    if((count%32) == 0){
	blink = !blink;
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	dc cf       	rjmp	.-72     	; 0x1ca6 <__vector_16+0x46>

00001cee <SPI_init>:
void SPI_init(){
    /* Set MOSI and SCK output, all others input */
    //DDRB = (1<<PB3)|(1<<PB1);

    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    1cee:	81 e5       	ldi	r24, 0x51	; 81
    1cf0:	8d b9       	out	0x0d, r24	; 13
    1cf2:	08 95       	ret

00001cf4 <SPI_Transmit>:

/***************************************************************************
  Transmit data to SPI
 ****************************************************************************/
void SPI_Transmit(uint8_t data){
    SPDR = data;    //Write data to SPDR
    1cf4:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1<<SPIF))){} //SPIN write
    1cf6:	77 9b       	sbis	0x0e, 7	; 14
    1cf8:	fe cf       	rjmp	.-4      	; 0x1cf6 <SPI_Transmit+0x2>
}
    1cfa:	08 95       	ret

00001cfc <SPI_Receive>:

/***************************************************************************
  Read data from SPI input (SPDR)
 ****************************************************************************/
uint8_t SPI_Receive(void){
    PORTE &= 0;       //Write 0 to PE6 to trigger SPI on radio board
    1cfc:	83 b1       	in	r24, 0x03	; 3
    1cfe:	13 b8       	out	0x03, r1	; 3
    __asm__ __volatile__ ("nop");
    1d00:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1d02:	00 00       	nop
    // Wait until 8 clock cycles are done 
    SPDR = 0x00;     //Write 1 to set the SPI slave input to one (wait for read)
    1d04:	1f b8       	out	0x0f, r1	; 15
    PORTE |= (1 << PE6);  
    1d06:	1e 9a       	sbi	0x03, 6	; 3
    __asm__ __volatile__ ("nop");
    1d08:	00 00       	nop
    __asm__ __volatile__ ("nop");
    1d0a:	00 00       	nop
    while (bit_is_clear(SPSR,SPIF)){} //SPIN read 
    1d0c:	77 9b       	sbis	0x0e, 7	; 14
    1d0e:	fe cf       	rjmp	.-4      	; 0x1d0c <SPI_Receive+0x10>
    // Return incoming data from SPDR
    return(SPDR);  
    1d10:	8f b1       	in	r24, 0x0f	; 15
}
    1d12:	08 95       	ret

00001d14 <bar_graph>:

/***************************************************************************
  Transmit data to SPI
 ****************************************************************************/
void SPI_Transmit(uint8_t data){
    SPDR = data;    //Write data to SPDR
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1<<SPIF))){} //SPIN write
    1d18:	77 9b       	sbis	0x0e, 7	; 14
    1d1a:	fe cf       	rjmp	.-4      	; 0x1d18 <bar_graph+0x4>
    }
     */
    write = 0x01;
    //Write the bargraph to SPI
    SPI_Transmit(write);
    PORTD = (1 << PD2);  //Push data out of SPI
    1d1c:	84 e0       	ldi	r24, 0x04	; 4
    1d1e:	82 bb       	out	0x12, r24	; 18
    __asm__ __volatile__ ("nop"); //Buffer
    1d20:	00 00       	nop
    __asm__ __volatile__ ("nop");  //Buffer
    1d22:	00 00       	nop


    PORTD = (2 << PD2);  // Push data out of SPI
    1d24:	88 e0       	ldi	r24, 0x08	; 8
    1d26:	82 bb       	out	0x12, r24	; 18
    __asm__ __volatile__ ("nop");  //Buffer
    1d28:	00 00       	nop
    __asm__ __volatile__ ("nop");  //Buffer
    1d2a:	00 00       	nop
    1d2c:	08 95       	ret

00001d2e <display_update>:
 *Display the number (code from lab1)
 **************************************************************************/
void display_update(){
    uint8_t display_segment = 0;
    static uint8_t rotate_7seg = 0;
    switch(mode){
    1d2e:	80 91 24 01 	lds	r24, 0x0124
    1d32:	81 30       	cpi	r24, 0x01	; 1
    1d34:	99 f1       	breq	.+102    	; 0x1d9c <display_update+0x6e>
    1d36:	90 f1       	brcs	.+100    	; 0x1d9c <display_update+0x6e>
    1d38:	82 30       	cpi	r24, 0x02	; 2
    1d3a:	49 f1       	breq	.+82     	; 0x1d8e <display_update+0x60>
    1d3c:	83 30       	cpi	r24, 0x03	; 3
    1d3e:	21 f4       	brne	.+8      	; 0x1d48 <display_update+0x1a>
	    break;
	case 2:
	    segsum(alarm_time);
	    break;
	case 3:
	    segsum(ADCH);
    1d40:	85 b1       	in	r24, 0x05	; 5
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 c8 0c 	call	0x1990	; 0x1990 <segsum>
       PORTA = segment_data[display_segment];
       _delay_us(10);
       PORTA = OFF;
       }
     */
    if(rotate_7seg > 4){
    1d48:	80 91 19 01 	lds	r24, 0x0119
    1d4c:	85 30       	cpi	r24, 0x05	; 5
    1d4e:	10 f0       	brcs	.+4      	; 0x1d54 <display_update+0x26>
	rotate_7seg = 0;
    1d50:	10 92 19 01 	sts	0x0119, r1
    }
    PORTB &= 0x8F;
    1d54:	88 b3       	in	r24, 0x18	; 24
    1d56:	8f 78       	andi	r24, 0x8F	; 143
    1d58:	88 bb       	out	0x18, r24	; 24
    PORTB |= rotate_7seg << 4;
    1d5a:	28 b3       	in	r18, 0x18	; 24
    1d5c:	80 91 19 01 	lds	r24, 0x0119
    1d60:	30 e1       	ldi	r19, 0x10	; 16
    1d62:	83 9f       	mul	r24, r19
    1d64:	c0 01       	movw	r24, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	28 2b       	or	r18, r24
    1d6a:	28 bb       	out	0x18, r18	; 24
    PORTA = segment_data[rotate_7seg];	
    1d6c:	e0 91 19 01 	lds	r30, 0x0119
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	e8 5c       	subi	r30, 0xC8	; 200
    1d74:	fe 4f       	sbci	r31, 0xFE	; 254
    1d76:	80 81       	ld	r24, Z
    1d78:	8b bb       	out	0x1b, r24	; 27
    rotate_7seg++;
    1d7a:	80 91 19 01 	lds	r24, 0x0119
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	80 93 19 01 	sts	0x0119, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d84:	85 e3       	ldi	r24, 0x35	; 53
    1d86:	8a 95       	dec	r24
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <display_update+0x58>
    1d8a:	00 00       	nop
    1d8c:	08 95       	ret
	    break;
	case 1:
	    segsum(time);
	    break;
	case 2:
	    segsum(alarm_time);
    1d8e:	80 91 11 01 	lds	r24, 0x0111
    1d92:	90 91 12 01 	lds	r25, 0x0112
    1d96:	0e 94 c8 0c 	call	0x1990	; 0x1990 <segsum>
	    break;
    1d9a:	d6 cf       	rjmp	.-84     	; 0x1d48 <display_update+0x1a>
    switch(mode){
	case 0:
	    segsum(time);
	    break;
	case 1:
	    segsum(time);
    1d9c:	80 91 13 01 	lds	r24, 0x0113
    1da0:	90 91 14 01 	lds	r25, 0x0114
    1da4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <segsum>
	    break;
    1da8:	cf cf       	rjmp	.-98     	; 0x1d48 <display_update+0x1a>

00001daa <set_brightness>:
 - 1 == increase
 - 2 == decrease
 Brightness level goes from 1-10
 ***************************************************************************/
void set_brightness(int setting){
    if(setting == 1){
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	29 f0       	breq	.+10     	; 0x1dba <set_brightness+0x10>
	}
	else{
	    brightness_level++;
	}
    }
    else if(setting == 2){
    1db0:	02 97       	sbiw	r24, 0x02	; 2
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <set_brightness+0xc>
    1db4:	08 95       	ret
    1db6:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <set_brightness.part.1>
 - 2 == decrease
 Brightness level goes from 1-10
 ***************************************************************************/
void set_brightness(int setting){
    if(setting == 1){
	if(brightness_level >= 9){
    1dba:	80 91 37 01 	lds	r24, 0x0137
    1dbe:	89 30       	cpi	r24, 0x09	; 9
    1dc0:	20 f0       	brcs	.+8      	; 0x1dca <set_brightness+0x20>
	    brightness_level = 9;
    1dc2:	89 e0       	ldi	r24, 0x09	; 9
    1dc4:	80 93 37 01 	sts	0x0137, r24
    1dc8:	08 95       	ret
	}
	else{
	    brightness_level++;
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	80 93 37 01 	sts	0x0137, r24
    1dd0:	08 95       	ret

00001dd2 <right_inc>:
/***************************************************************************
 * Knob handle
 * increment/decrement timers depending on the selected mode
 ****************************************************************************/
void right_inc(){
    switch(mode){
    1dd2:	80 91 24 01 	lds	r24, 0x0124
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	99 f0       	breq	.+38     	; 0x1e00 <right_inc+0x2e>
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	69 f0       	breq	.+26     	; 0x1df8 <right_inc+0x26>
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <right_inc+0x12>
    1de2:	08 95       	ret
	case 0: 
	    break;
	case 1:
	    second++;
    1de4:	80 91 23 01 	lds	r24, 0x0123
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	80 93 23 01 	sts	0x0123, r24
	    if(second >= 60){
    1dee:	8c 33       	cpi	r24, 0x3C	; 60
    1df0:	c0 f3       	brcs	.-16     	; 0x1de2 <right_inc+0x10>
		second = 0;	    
    1df2:	10 92 23 01 	sts	0x0123, r1
    1df6:	08 95       	ret
	    if(alarm_minute >= 60){
		alarm_minute = 0;	
	    }
	    break;
	case 3:
	    set_brightness(1);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <set_brightness>
	    if(second >= 60){
		second = 0;	    
	    }
	    break;
	case 2: 
	    alarm_minute++;
    1e00:	80 91 20 01 	lds	r24, 0x0120
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	80 93 20 01 	sts	0x0120, r24
	    if(alarm_minute >= 60){
    1e0a:	8c 33       	cpi	r24, 0x3C	; 60
    1e0c:	50 f3       	brcs	.-44     	; 0x1de2 <right_inc+0x10>
		alarm_minute = 0;	
    1e0e:	10 92 20 01 	sts	0x0120, r1
    1e12:	08 95       	ret

00001e14 <right_dec>:
	default:
	    break;             
    }
}
void right_dec(){
    switch(mode){
    1e14:	80 91 24 01 	lds	r24, 0x0124
    1e18:	82 30       	cpi	r24, 0x02	; 2
    1e1a:	91 f0       	breq	.+36     	; 0x1e40 <right_dec+0x2c>
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	71 f0       	breq	.+28     	; 0x1e3c <right_dec+0x28>
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <right_dec+0x12>
    1e24:	08 95       	ret
	case 0: 
	    break;
	case 1:
	    second--;
    1e26:	80 91 23 01 	lds	r24, 0x0123
    1e2a:	81 50       	subi	r24, 0x01	; 1
    1e2c:	80 93 23 01 	sts	0x0123, r24
	    if(second >= 240){
    1e30:	80 3f       	cpi	r24, 0xF0	; 240
    1e32:	c0 f3       	brcs	.-16     	; 0x1e24 <right_dec+0x10>
		second = 59;	    
    1e34:	8b e3       	ldi	r24, 0x3B	; 59
    1e36:	80 93 23 01 	sts	0x0123, r24
    1e3a:	08 95       	ret
    1e3c:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <set_brightness.part.1>
	    }   
	    break;
	case 2: 
	    alarm_minute--;
    1e40:	80 91 20 01 	lds	r24, 0x0120
    1e44:	81 50       	subi	r24, 0x01	; 1
    1e46:	80 93 20 01 	sts	0x0120, r24
	    if(alarm_minute >= 240){
    1e4a:	80 3f       	cpi	r24, 0xF0	; 240
    1e4c:	58 f3       	brcs	.-42     	; 0x1e24 <right_dec+0x10>
		alarm_minute = 59;	
    1e4e:	8b e3       	ldi	r24, 0x3B	; 59
    1e50:	80 93 20 01 	sts	0x0120, r24
    1e54:	08 95       	ret

00001e56 <decode_spi_right_knob>:
    previous_encoder1 = encoder1;
}
/*************************************************************************
  Exactly the same with decode_spi_left_knob(), only mask different bits 
 **************************************************************************/
void decode_spi_right_knob(uint8_t encoder2){
    1e56:	cf 93       	push	r28
    uint8_t sw_index = 0;
    static uint8_t acount2 = 0;
    static uint8_t previous_encoder2 = 0;
    uint8_t direction = 0;
    encoder2 = ENCODE_RIGHT_KNOB(encoder2);
    1e58:	c8 2f       	mov	r28, r24
    1e5a:	c3 70       	andi	r28, 0x03	; 3
    sw_index = (previous_encoder2 << 2) | encoder2;
    1e5c:	e0 91 16 01 	lds	r30, 0x0116
    1e60:	ee 0f       	add	r30, r30
    1e62:	ee 0f       	add	r30, r30
    1e64:	ec 2b       	or	r30, r28
    direction = sw_table[sw_index];
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	e0 50       	subi	r30, 0x00	; 0
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    //value = modeA;
    if(direction == CW){
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	e9 f0       	breq	.+58     	; 0x1eac <decode_spi_right_knob+0x56>
	acount2++;
    }	
    if(direction == CCW){
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	31 f0       	breq	.+12     	; 0x1e82 <decode_spi_right_knob+0x2c>
	acount2--;
    }
    if(encoder2 == 3){
    1e76:	c3 30       	cpi	r28, 0x03	; 3
    1e78:	59 f0       	breq	.+22     	; 0x1e90 <decode_spi_right_knob+0x3a>
	    right_dec();
	}
	//update_number();
	acount2 = 0;
    }
    previous_encoder2 = encoder2;
    1e7a:	c0 93 16 01 	sts	0x0116, r28
}
    1e7e:	cf 91       	pop	r28
    1e80:	08 95       	ret
    //value = modeA;
    if(direction == CW){
	acount2++;
    }	
    if(direction == CCW){
	acount2--;
    1e82:	80 91 15 01 	lds	r24, 0x0115
    1e86:	81 50       	subi	r24, 0x01	; 1
    1e88:	80 93 15 01 	sts	0x0115, r24
    }
    if(encoder2 == 3){
    1e8c:	c3 30       	cpi	r28, 0x03	; 3
    1e8e:	a9 f7       	brne	.-22     	; 0x1e7a <decode_spi_right_knob+0x24>
	if((acount2 > 1) && (acount2 < 10)){
    1e90:	80 91 15 01 	lds	r24, 0x0115
    1e94:	9e ef       	ldi	r25, 0xFE	; 254
    1e96:	98 0f       	add	r25, r24
    1e98:	98 30       	cpi	r25, 0x08	; 8
    1e9a:	98 f0       	brcs	.+38     	; 0x1ec2 <decode_spi_right_knob+0x6c>
	    right_inc();
	}
	if ((acount2 <= 0xFF) && (acount2 > 0xF0)){
    1e9c:	81 3f       	cpi	r24, 0xF1	; 241
    1e9e:	60 f4       	brcc	.+24     	; 0x1eb8 <decode_spi_right_knob+0x62>
	    right_dec();
	}
	//update_number();
	acount2 = 0;
    1ea0:	10 92 15 01 	sts	0x0115, r1
    }
    previous_encoder2 = encoder2;
    1ea4:	c0 93 16 01 	sts	0x0116, r28
}
    1ea8:	cf 91       	pop	r28
    1eaa:	08 95       	ret
    encoder2 = ENCODE_RIGHT_KNOB(encoder2);
    sw_index = (previous_encoder2 << 2) | encoder2;
    direction = sw_table[sw_index];
    //value = modeA;
    if(direction == CW){
	acount2++;
    1eac:	80 91 15 01 	lds	r24, 0x0115
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	80 93 15 01 	sts	0x0115, r24
    1eb6:	df cf       	rjmp	.-66     	; 0x1e76 <decode_spi_right_knob+0x20>
    if(encoder2 == 3){
	if((acount2 > 1) && (acount2 < 10)){
	    right_inc();
	}
	if ((acount2 <= 0xFF) && (acount2 > 0xF0)){
	    right_dec();
    1eb8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <right_dec>
	}
	//update_number();
	acount2 = 0;
    1ebc:	10 92 15 01 	sts	0x0115, r1
    1ec0:	f1 cf       	rjmp	.-30     	; 0x1ea4 <decode_spi_right_knob+0x4e>
    if(direction == CCW){
	acount2--;
    }
    if(encoder2 == 3){
	if((acount2 > 1) && (acount2 < 10)){
	    right_inc();
    1ec2:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <right_inc>
	}
	if ((acount2 <= 0xFF) && (acount2 > 0xF0)){
	    right_dec();
	}
	//update_number();
	acount2 = 0;
    1ec6:	10 92 15 01 	sts	0x0115, r1
    1eca:	ec cf       	rjmp	.-40     	; 0x1ea4 <decode_spi_right_knob+0x4e>

00001ecc <left_inc>:
	    break;
    }

}
void left_inc(){
    switch(mode){
    1ecc:	80 91 24 01 	lds	r24, 0x0124
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	69 f0       	breq	.+26     	; 0x1eee <left_inc+0x22>
    1ed4:	82 30       	cpi	r24, 0x02	; 2
    1ed6:	51 f4       	brne	.+20     	; 0x1eec <left_inc+0x20>
	    if(minute >= 60){
		minute = 0;	    
	    }   
	    break;
	case 2: 
	    alarm_hour++;
    1ed8:	80 91 1f 01 	lds	r24, 0x011F
    1edc:	8f 5f       	subi	r24, 0xFF	; 255
    1ede:	80 93 1f 01 	sts	0x011F, r24
	    if(alarm_hour >= 23){
    1ee2:	87 31       	cpi	r24, 0x17	; 23
    1ee4:	10 f0       	brcs	.+4      	; 0x1eea <left_inc+0x1e>
		alarm_hour = 0;
    1ee6:	10 92 1f 01 	sts	0x011F, r1
    1eea:	08 95       	ret
    1eec:	08 95       	ret
void left_inc(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    minute++;
    1eee:	80 91 22 01 	lds	r24, 0x0122
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	80 93 22 01 	sts	0x0122, r24
	    if(minute >= 60){
    1ef8:	8c 33       	cpi	r24, 0x3C	; 60
    1efa:	b8 f3       	brcs	.-18     	; 0x1eea <left_inc+0x1e>
		minute = 0;	    
    1efc:	10 92 22 01 	sts	0x0122, r1
    1f00:	08 95       	ret

00001f02 <left_dec>:
	default:
	    break;
    }
}
void left_dec(){
    switch(mode){
    1f02:	80 91 24 01 	lds	r24, 0x0124
    1f06:	81 30       	cpi	r24, 0x01	; 1
    1f08:	71 f0       	breq	.+28     	; 0x1f26 <left_dec+0x24>
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	59 f4       	brne	.+22     	; 0x1f24 <left_dec+0x22>
	    if(minute >= 240){
		minute = 59;	    
	    }   
	    break;
	case 2:
	    alarm_hour--;
    1f0e:	80 91 1f 01 	lds	r24, 0x011F
    1f12:	81 50       	subi	r24, 0x01	; 1
    1f14:	80 93 1f 01 	sts	0x011F, r24
	    if(alarm_hour >= 240){
    1f18:	80 3f       	cpi	r24, 0xF0	; 240
    1f1a:	18 f0       	brcs	.+6      	; 0x1f22 <left_dec+0x20>
		alarm_hour = 23;
    1f1c:	87 e1       	ldi	r24, 0x17	; 23
    1f1e:	80 93 1f 01 	sts	0x011F, r24
    1f22:	08 95       	ret
    1f24:	08 95       	ret
void left_dec(){
    switch(mode){
	case 0: 
	    break;
	case 1:
	    minute--;    
    1f26:	80 91 22 01 	lds	r24, 0x0122
    1f2a:	81 50       	subi	r24, 0x01	; 1
    1f2c:	80 93 22 01 	sts	0x0122, r24
	    if(minute >= 240){
    1f30:	80 3f       	cpi	r24, 0xF0	; 240
    1f32:	b8 f3       	brcs	.-18     	; 0x1f22 <left_dec+0x20>
		minute = 59;	    
    1f34:	8b e3       	ldi	r24, 0x3B	; 59
    1f36:	80 93 22 01 	sts	0x0122, r24
    1f3a:	08 95       	ret

00001f3c <decode_spi_left_knob>:
}
/**************************************************************************
 *Decode the knobs encoder using table method
 *Track the last phase and current phase
 **************************************************************************/
void decode_spi_left_knob(uint8_t encoder1){
    1f3c:	cf 93       	push	r28
    1f3e:	df 93       	push	r29
    uint8_t sw_index = 0;
    //Counter for preventing unneccessary reset    
    static uint8_t acount1 = 0;
    static uint8_t previous_encoder1 = 0; //Initialize previous    
    uint8_t direction = 0;                    //Direction variable
    encoder1 = ENCODE_LEFT_KNOB(encoder1);  //Mask the bit for decoding left know
    1f40:	8c 70       	andi	r24, 0x0C	; 12
    1f42:	c8 2f       	mov	r28, r24
    1f44:	d0 e0       	ldi	r29, 0x00	; 0
    1f46:	d5 95       	asr	r29
    1f48:	c7 95       	ror	r28
    1f4a:	d5 95       	asr	r29
    1f4c:	c7 95       	ror	r28
    1f4e:	9c 2f       	mov	r25, r28
    sw_index = (previous_encoder1 << 2) | encoder1; 
    1f50:	e0 91 18 01 	lds	r30, 0x0118
    1f54:	ee 0f       	add	r30, r30
    1f56:	ee 0f       	add	r30, r30
    1f58:	ec 2b       	or	r30, r28
    /*shift previous to the left use it as an index Since
      we know the pattern of the knob when it is turning
      Use that data to compare with the table to determine
      Which way it is turning*/
    direction = sw_table[sw_index];
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	e0 50       	subi	r30, 0x00	; 0
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    //Read out the direction from table
    if(direction == CW){  //If CW, add counter
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	f9 f0       	breq	.+62     	; 0x1fa4 <decode_spi_left_knob+0x68>
	acount1++;
    }	
    if(direction == CCW){ //If CCW, decrement counter
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <decode_spi_left_knob+0x3c>
	acount1--;
    }
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
    1f6a:	93 30       	cpi	r25, 0x03	; 3
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <decode_spi_left_knob+0x4a>
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
	    left_dec();
	}
	acount1 = 0;                     //Reset counter
    }
    previous_encoder1 = encoder1;
    1f6e:	c0 93 18 01 	sts	0x0118, r28
}
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	08 95       	ret
    //Read out the direction from table
    if(direction == CW){  //If CW, add counter
	acount1++;
    }	
    if(direction == CCW){ //If CCW, decrement counter
	acount1--;
    1f78:	80 91 17 01 	lds	r24, 0x0117
    1f7c:	81 50       	subi	r24, 0x01	; 1
    1f7e:	80 93 17 01 	sts	0x0117, r24
    }
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
    1f82:	93 30       	cpi	r25, 0x03	; 3
    1f84:	a1 f7       	brne	.-24     	; 0x1f6e <decode_spi_left_knob+0x32>
	if((acount1 > 1) && (acount1 < 10)){   //Check if the counter for CW
    1f86:	80 91 17 01 	lds	r24, 0x0117
    1f8a:	9e ef       	ldi	r25, 0xFE	; 254
    1f8c:	98 0f       	add	r25, r24
    1f8e:	98 30       	cpi	r25, 0x08	; 8
    1f90:	a0 f0       	brcs	.+40     	; 0x1fba <decode_spi_left_knob+0x7e>
	    left_inc();
	}
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
    1f92:	81 3f       	cpi	r24, 0xF1	; 241
    1f94:	68 f4       	brcc	.+26     	; 0x1fb0 <decode_spi_left_knob+0x74>
	    left_dec();
	}
	acount1 = 0;                     //Reset counter
    1f96:	10 92 17 01 	sts	0x0117, r1
    }
    previous_encoder1 = encoder1;
    1f9a:	c0 93 18 01 	sts	0x0118, r28
}
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	08 95       	ret
      Use that data to compare with the table to determine
      Which way it is turning*/
    direction = sw_table[sw_index];
    //Read out the direction from table
    if(direction == CW){  //If CW, add counter
	acount1++;
    1fa4:	80 91 17 01 	lds	r24, 0x0117
    1fa8:	8f 5f       	subi	r24, 0xFF	; 255
    1faa:	80 93 17 01 	sts	0x0117, r24
    1fae:	dd cf       	rjmp	.-70     	; 0x1f6a <decode_spi_left_knob+0x2e>
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
	if((acount1 > 1) && (acount1 < 10)){   //Check if the counter for CW
	    left_inc();
	}
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
	    left_dec();
    1fb0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <left_dec>
	}
	acount1 = 0;                     //Reset counter
    1fb4:	10 92 17 01 	sts	0x0117, r1
    1fb8:	f0 cf       	rjmp	.-32     	; 0x1f9a <decode_spi_left_knob+0x5e>
    if(direction == CCW){ //If CCW, decrement counter
	acount1--;
    }
    if(encoder1 == 3){    //encoder1 = 3 (stop spinning)
	if((acount1 > 1) && (acount1 < 10)){   //Check if the counter for CW
	    left_inc();
    1fba:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <left_inc>
	}
	if ((acount1 <= 0xFF) && (acount1 > 0xF0)){    //Check counter for CCW
	    left_dec();
	}
	acount1 = 0;                     //Reset counter
    1fbe:	10 92 17 01 	sts	0x0117, r1
    1fc2:	eb cf       	rjmp	.-42     	; 0x1f9a <decode_spi_left_knob+0x5e>

00001fc4 <check_knobs>:
    __asm__ __volatile__ ("nop");
    while (bit_is_clear(SPSR,SPIF)){} //SPIN read 
    // Return incoming data from SPDR
    return(SPDR);  
}
void check_knobs(void){
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    static uint8_t encoder;
    encoder = SPI_Receive();
    1fc8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <SPI_Receive>
    1fcc:	80 93 1a 01 	sts	0x011A, r24
    decode_spi_left_knob(encoder);
    1fd0:	c8 2f       	mov	r28, r24
    1fd2:	d0 e0       	ldi	r29, 0x00	; 0
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <decode_spi_left_knob>
    decode_spi_right_knob(encoder);
    1fda:	ce 01       	movw	r24, r28
}
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
}
void check_knobs(void){
    static uint8_t encoder;
    encoder = SPI_Receive();
    decode_spi_left_knob(encoder);
    decode_spi_right_knob(encoder);
    1fe0:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <decode_spi_right_knob>

00001fe4 <__vector_10>:
	second++;    
    }

}

ISR(TIMER2_OVF_vect){
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	0b b6       	in	r0, 0x3b	; 59
    1ff0:	0f 92       	push	r0
    1ff2:	2f 93       	push	r18
    1ff4:	3f 93       	push	r19
    1ff6:	4f 93       	push	r20
    1ff8:	5f 93       	push	r21
    1ffa:	6f 93       	push	r22
    1ffc:	7f 93       	push	r23
    1ffe:	8f 93       	push	r24
    2000:	9f 93       	push	r25
    2002:	af 93       	push	r26
    2004:	bf 93       	push	r27
    2006:	ef 93       	push	r30
    2008:	ff 93       	push	r31
    button_routine();
    200a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <button_routine>
    check_knobs();
    200e:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <check_knobs>
    display_update(); 
    2012:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <display_update>
    //bar_graph();
    //OCR2 = brightness[brightness_level];
}
    2016:	ff 91       	pop	r31
    2018:	ef 91       	pop	r30
    201a:	bf 91       	pop	r27
    201c:	af 91       	pop	r26
    201e:	9f 91       	pop	r25
    2020:	8f 91       	pop	r24
    2022:	7f 91       	pop	r23
    2024:	6f 91       	pop	r22
    2026:	5f 91       	pop	r21
    2028:	4f 91       	pop	r20
    202a:	3f 91       	pop	r19
    202c:	2f 91       	pop	r18
    202e:	0f 90       	pop	r0
    2030:	0b be       	out	0x3b, r0	; 59
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	0f 90       	pop	r0
    2038:	1f 90       	pop	r1
    203a:	18 95       	reti

0000203c <timer_init>:
 *Left knob  = PWM for 7-seg
 *Right knob = PWM for bar graph
 *****************************************************************/

void timer_init(void){
    TCCR0 |= (1<<CS00) ;  //normal mode, prescale by 32
    203c:	83 b7       	in	r24, 0x33	; 51
    203e:	81 60       	ori	r24, 0x01	; 1
    2040:	83 bf       	out	0x33, r24	; 51
    ASSR  |= (1<<AS0);
    2042:	80 b7       	in	r24, 0x30	; 48
    2044:	88 60       	ori	r24, 0x08	; 8
    2046:	80 bf       	out	0x30, r24	; 48
    TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<COM20) |(1<<CS21) | (1<<CS20); //| (1<<CS20);  //normal mode, prescale by 32
    2048:	85 b5       	in	r24, 0x25	; 37
    204a:	8b 67       	ori	r24, 0x7B	; 123
    204c:	85 bd       	out	0x25, r24	; 37
    TIMSK |= (1<<TOIE0)| (1<<TOIE2);// | (1<<OCIE2);             //enable interrupts
    204e:	87 b7       	in	r24, 0x37	; 55
    2050:	81 64       	ori	r24, 0x41	; 65
    2052:	87 bf       	out	0x37, r24	; 55
    TIFR  |= (1 << TOV2);
    2054:	86 b7       	in	r24, 0x36	; 54
    2056:	80 64       	ori	r24, 0x40	; 64
    2058:	86 bf       	out	0x36, r24	; 54
    205a:	08 95       	ret

0000205c <ADC_init>:

}


void ADC_init(void){
    DDRF |= !(1<<PF0);
    205c:	e1 e6       	ldi	r30, 0x61	; 97
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	80 83       	st	Z, r24
    PORTF = 0x00;
    2064:	10 92 62 00 	sts	0x0062, r1
    ADMUX  |= (1<<ADLAR) | (1<<REFS0);
    2068:	87 b1       	in	r24, 0x07	; 7
    206a:	80 66       	ori	r24, 0x60	; 96
    206c:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (1<<ADIE)\
    206e:	86 b1       	in	r24, 0x06	; 6
    2070:	8f 6e       	ori	r24, 0xEF	; 239
    2072:	86 b9       	out	0x06, r24	; 6
	      |(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);

    OCR2 = 0xFF;
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	83 bd       	out	0x23, r24	; 35
    2078:	08 95       	ret

0000207a <main>:
}

int main()
{
    //set port bits 4-7 B as outputs
    DDRE = 0xc0;
    207a:	80 ec       	ldi	r24, 0xC0	; 192
    207c:	82 b9       	out	0x02, r24	; 2
    PORTE &= 0x7F;
    207e:	1f 98       	cbi	0x03, 7	; 3
    DDRB = 0xF7;
    2080:	87 ef       	ldi	r24, 0xF7	; 247
    2082:	87 bb       	out	0x17, r24	; 23
    DDRD |= (1 << PB2);
    2084:	8a 9a       	sbi	0x11, 2	; 17
void SPI_init(){
    /* Set MOSI and SCK output, all others input */
    //DDRB = (1<<PB3)|(1<<PB1);

    /* Enable SPI, Master, set clock rate fck/16 */
    SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    2086:	81 e5       	ldi	r24, 0x51	; 81
    2088:	8d b9       	out	0x0d, r24	; 13
    PORTE &= 0x7F;
    DDRB = 0xF7;
    DDRD |= (1 << PB2);

    SPI_init();
    timer_init();
    208a:	0e 94 1e 10 	call	0x203c	; 0x203c <timer_init>

}


void ADC_init(void){
    DDRF |= !(1<<PF0);
    208e:	80 91 61 00 	lds	r24, 0x0061
    2092:	80 93 61 00 	sts	0x0061, r24
    PORTF = 0x00;
    2096:	10 92 62 00 	sts	0x0062, r1
    ADMUX  |= (1<<ADLAR) | (1<<REFS0);
    209a:	87 b1       	in	r24, 0x07	; 7
    209c:	80 66       	ori	r24, 0x60	; 96
    209e:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADFR) | (1<<ADIE)\
    20a0:	86 b1       	in	r24, 0x06	; 6
    20a2:	8f 6e       	ori	r24, 0xEF	; 239
    20a4:	86 b9       	out	0x06, r24	; 6
	      |(1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);

    OCR2 = 0xFF;
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	83 bd       	out	0x23, r24	; 35
    DDRD |= (1 << PB2);

    SPI_init();
    timer_init();
    ADC_init();
    sei();
    20aa:	78 94       	sei
    20ac:	ff cf       	rjmp	.-2      	; 0x20ac <main+0x32>

000020ae <__tablejump2__>:
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31

000020b2 <__tablejump__>:
    20b2:	05 90       	lpm	r0, Z+
    20b4:	f4 91       	lpm	r31, Z
    20b6:	e0 2d       	mov	r30, r0
    20b8:	09 94       	ijmp

000020ba <__umulhisi3>:
    20ba:	a2 9f       	mul	r26, r18
    20bc:	b0 01       	movw	r22, r0
    20be:	b3 9f       	mul	r27, r19
    20c0:	c0 01       	movw	r24, r0
    20c2:	a3 9f       	mul	r26, r19
    20c4:	70 0d       	add	r23, r0
    20c6:	81 1d       	adc	r24, r1
    20c8:	11 24       	eor	r1, r1
    20ca:	91 1d       	adc	r25, r1
    20cc:	b2 9f       	mul	r27, r18
    20ce:	70 0d       	add	r23, r0
    20d0:	81 1d       	adc	r24, r1
    20d2:	11 24       	eor	r1, r1
    20d4:	91 1d       	adc	r25, r1
    20d6:	08 95       	ret

000020d8 <_exit>:
    20d8:	f8 94       	cli

000020da <__stop_program>:
    20da:	ff cf       	rjmp	.-2      	; 0x20da <__stop_program>
