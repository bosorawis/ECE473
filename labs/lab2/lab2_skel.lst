
lab2_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800100  00800100  00000454  2**0
                  ALLOC
  3 .stab         000009fc  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cb6  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001b06  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 31       	cpi	r26, 0x13	; 19
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
  ac:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <chk_buttons>:
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
  b4:	20 91 00 01 	lds	r18, 0x0100
  b8:	30 91 01 01 	lds	r19, 0x0101
  bc:	22 0f       	add	r18, r18
  be:	33 1f       	adc	r19, r19
  c0:	49 b3       	in	r20, 0x19	; 25
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <chk_buttons+0x16>
  c6:	55 95       	asr	r21
  c8:	47 95       	ror	r20
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <chk_buttons+0x12>
  ce:	40 fd       	sbrc	r20, 0
  d0:	0e c0       	rjmp	.+28     	; 0xee <chk_buttons+0x3a>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 ee       	ldi	r25, 0xE0	; 224
  d6:	28 2b       	or	r18, r24
  d8:	39 2b       	or	r19, r25
  da:	30 93 01 01 	sts	0x0101, r19
  de:	20 93 00 01 	sts	0x0100, r18
    if (state == 0xF000){
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	21 15       	cp	r18, r1
  e6:	30 4f       	sbci	r19, 0xF0	; 240
  e8:	09 f0       	breq	.+2      	; 0xec <chk_buttons+0x38>
  ea:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
    }
    return 0;

}
  ec:	08 95       	ret
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 ee       	ldi	r25, 0xE0	; 224
  f2:	f1 cf       	rjmp	.-30     	; 0xd6 <chk_buttons+0x22>

000000f4 <int2seg>:
*/
//***********************************************************************************
// int2seg
// return the 7-segment code for each digit
uint8_t int2seg(uint8_t number){
    if(number == 0 ){
  f4:	81 11       	cpse	r24, r1
  f6:	02 c0       	rjmp	.+4      	; 0xfc <int2seg+0x8>
	return ZERO;
  f8:	80 ec       	ldi	r24, 0xC0	; 192
  fa:	08 95       	ret
    }
    else if(number == 1 ){
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 f0       	breq	.+36     	; 0x124 <int2seg+0x30>
	return ONE;
    }
    else if(number == 2 ){
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	91 f0       	breq	.+36     	; 0x128 <int2seg+0x34>
	return TWO;
    }
    else if(number == 3 ){
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	a1 f0       	breq	.+40     	; 0x130 <int2seg+0x3c>
	return THREE;
    }
    else if(number == 4 ){
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	81 f0       	breq	.+32     	; 0x12c <int2seg+0x38>
	return FOUR;
    }
    else if(number == 5 ){
 10c:	85 30       	cpi	r24, 0x05	; 5
 10e:	91 f0       	breq	.+36     	; 0x134 <int2seg+0x40>
	return FIVE;
    }
    else if(number == 6 ){
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	91 f0       	breq	.+36     	; 0x138 <int2seg+0x44>
	return  SIX;
    }
    else if(number == 7 ){
 114:	87 30       	cpi	r24, 0x07	; 7
 116:	91 f0       	breq	.+36     	; 0x13c <int2seg+0x48>
	return SEVEN;
    }
    else if(number == 8 ){
 118:	88 30       	cpi	r24, 0x08	; 8
 11a:	91 f0       	breq	.+36     	; 0x140 <int2seg+0x4c>
	return EIGHT;
    }
    else if(number == 9 ){
 11c:	89 30       	cpi	r24, 0x09	; 9
 11e:	91 f0       	breq	.+36     	; 0x144 <int2seg+0x50>
	return NINE;
    }
    else{ 
	return 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
uint8_t int2seg(uint8_t number){
    if(number == 0 ){
	return ZERO;
    }
    else if(number == 1 ){
	return ONE;
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	08 95       	ret
    }
    else if(number == 2 ){
	return TWO;
 128:	84 ea       	ldi	r24, 0xA4	; 164
 12a:	08 95       	ret
    }
    else if(number == 3 ){
	return THREE;
    }
    else if(number == 4 ){
	return FOUR;
 12c:	89 e9       	ldi	r24, 0x99	; 153
 12e:	08 95       	ret
    }
    else if(number == 2 ){
	return TWO;
    }
    else if(number == 3 ){
	return THREE;
 130:	80 eb       	ldi	r24, 0xB0	; 176
 132:	08 95       	ret
    }
    else if(number == 4 ){
	return FOUR;
    }
    else if(number == 5 ){
	return FIVE;
 134:	82 e9       	ldi	r24, 0x92	; 146
 136:	08 95       	ret
    }
    else if(number == 6 ){
	return  SIX;
 138:	82 e8       	ldi	r24, 0x82	; 130
 13a:	08 95       	ret
    }
    else if(number == 7 ){
	return SEVEN;
 13c:	88 ef       	ldi	r24, 0xF8	; 248
	return NINE;
    }
    else{ 
	return 0;
    }
}
 13e:	08 95       	ret
    }
    else if(number == 7 ){
	return SEVEN;
    }
    else if(number == 8 ){
	return EIGHT;
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	08 95       	ret
    }
    else if(number == 9 ){
	return NINE;
 144:	80 e9       	ldi	r24, 0x90	; 144
 146:	08 95       	ret

00000148 <segsum>:
//                                   segment_sum                                    
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit 
//BCD segment code in the array segment_data for display.                       
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|

void segsum(uint16_t sum) {
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
    //determine how many digits there are 
    int digit;
    if(sum >= 1000){
 156:	88 3e       	cpi	r24, 0xE8	; 232
 158:	23 e0       	ldi	r18, 0x03	; 3
 15a:	92 07       	cpc	r25, r18
 15c:	50 f4       	brcc	.+20     	; 0x172 <segsum+0x2a>
	digit = 4;
    }
    else if (sum >= 100 && sum < 1000){
 15e:	84 56       	subi	r24, 0x64	; 100
 160:	91 09       	sbc	r25, r1
 162:	84 38       	cpi	r24, 0x84	; 132
 164:	33 e0       	ldi	r19, 0x03	; 3
 166:	93 07       	cpc	r25, r19
 168:	08 f0       	brcs	.+2      	; 0x16c <segsum+0x24>
 16a:	7f c0       	rjmp	.+254    	; 0x26a <segsum+0x122>
	digit = 3;
 16c:	03 e0       	ldi	r16, 0x03	; 3
 16e:	10 e0       	ldi	r17, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <segsum+0x2e>

void segsum(uint16_t sum) {
    //determine how many digits there are 
    int digit;
    if(sum >= 1000){
	digit = 4;
 172:	04 e0       	ldi	r16, 0x04	; 4
 174:	10 e0       	ldi	r17, 0x00	; 0
    }
    else if (sum <10){
	digit = 1;
    }
    //break up decimal sum into 4 digit-segments
    segment_data[0] = int2seg(sum % 10); //ones
 176:	9e 01       	movw	r18, r28
 178:	ad ec       	ldi	r26, 0xCD	; 205
 17a:	bc ec       	ldi	r27, 0xCC	; 204
 17c:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	96 95       	lsr	r25
 18a:	87 95       	ror	r24
 18c:	3c 2f       	mov	r19, r28
 18e:	2a e0       	ldi	r18, 0x0A	; 10
 190:	82 9f       	mul	r24, r18
 192:	30 19       	sub	r19, r0
 194:	11 24       	eor	r1, r1
 196:	83 2f       	mov	r24, r19
 198:	0e 94 7a 00 	call	0xf4	; 0xf4 <int2seg>
 19c:	80 93 0e 01 	sts	0x010E, r24
    segment_data[1] = int2seg((sum % 100)/10); //tens
 1a0:	9e 01       	movw	r18, r28
 1a2:	36 95       	lsr	r19
 1a4:	27 95       	ror	r18
 1a6:	36 95       	lsr	r19
 1a8:	27 95       	ror	r18
 1aa:	ab e7       	ldi	r26, 0x7B	; 123
 1ac:	b4 e1       	ldi	r27, 0x14	; 20
 1ae:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	44 e6       	ldi	r20, 0x64	; 100
 1b8:	48 9f       	mul	r20, r24
 1ba:	90 01       	movw	r18, r0
 1bc:	49 9f       	mul	r20, r25
 1be:	30 0d       	add	r19, r0
 1c0:	11 24       	eor	r1, r1
 1c2:	ce 01       	movw	r24, r28
 1c4:	82 1b       	sub	r24, r18
 1c6:	93 0b       	sbc	r25, r19
 1c8:	9c 01       	movw	r18, r24
 1ca:	ad ec       	ldi	r26, 0xCD	; 205
 1cc:	bc ec       	ldi	r27, 0xCC	; 204
 1ce:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	0e 94 7a 00 	call	0xf4	; 0xf4 <int2seg>
 1e2:	80 93 0f 01 	sts	0x010F, r24
    //segment_data[2] = 1; //decimal
    segment_data[3] = int2seg((sum % 1000)/100); //hundreds
 1e6:	9e 01       	movw	r18, r28
 1e8:	36 95       	lsr	r19
 1ea:	27 95       	ror	r18
 1ec:	36 95       	lsr	r19
 1ee:	27 95       	ror	r18
 1f0:	36 95       	lsr	r19
 1f2:	27 95       	ror	r18
 1f4:	a5 ec       	ldi	r26, 0xC5	; 197
 1f6:	b0 e2       	ldi	r27, 0x20	; 32
 1f8:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 1fc:	7c 01       	movw	r14, r24
 1fe:	f2 94       	swap	r15
 200:	e2 94       	swap	r14
 202:	ef e0       	ldi	r30, 0x0F	; 15
 204:	ee 22       	and	r14, r30
 206:	ef 24       	eor	r14, r15
 208:	fe 22       	and	r15, r30
 20a:	ef 24       	eor	r14, r15
 20c:	28 ee       	ldi	r18, 0xE8	; 232
 20e:	33 e0       	ldi	r19, 0x03	; 3
 210:	e2 9e       	mul	r14, r18
 212:	c0 01       	movw	r24, r0
 214:	e3 9e       	mul	r14, r19
 216:	90 0d       	add	r25, r0
 218:	f2 9e       	mul	r15, r18
 21a:	90 0d       	add	r25, r0
 21c:	11 24       	eor	r1, r1
 21e:	9e 01       	movw	r18, r28
 220:	28 1b       	sub	r18, r24
 222:	39 0b       	sbc	r19, r25
 224:	36 95       	lsr	r19
 226:	27 95       	ror	r18
 228:	36 95       	lsr	r19
 22a:	27 95       	ror	r18
 22c:	ab e7       	ldi	r26, 0x7B	; 123
 22e:	b4 e1       	ldi	r27, 0x14	; 20
 230:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 234:	96 95       	lsr	r25
 236:	87 95       	ror	r24
 238:	0e 94 7a 00 	call	0xf4	; 0xf4 <int2seg>
 23c:	80 93 11 01 	sts	0x0111, r24
    segment_data[4] = int2seg(sum/1000); //thousands
 240:	8e 2d       	mov	r24, r14
 242:	0e 94 7a 00 	call	0xf4	; 0xf4 <int2seg>
    //blank out leading zero digits 
    switch (digit){
 246:	02 30       	cpi	r16, 0x02	; 2
 248:	11 05       	cpc	r17, r1
 24a:	39 f1       	breq	.+78     	; 0x29a <segsum+0x152>
 24c:	03 30       	cpi	r16, 0x03	; 3
 24e:	11 05       	cpc	r17, r1
 250:	11 f1       	breq	.+68     	; 0x296 <segsum+0x14e>
 252:	01 30       	cpi	r16, 0x01	; 1
 254:	11 05       	cpc	r17, r1
 256:	89 f0       	breq	.+34     	; 0x27a <segsum+0x132>
	case 3:
	    segment_data[4] = OFF;
 258:	80 93 12 01 	sts	0x0112, r24
	    break;
	default:
	    break;
    }
    //now move data to right place for misplaced colon position
}//segment_sum
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	08 95       	ret
	digit = 4;
    }
    else if (sum >= 100 && sum < 1000){
	digit = 3;
    }
    else if (sum >= 10 && sum < 100){
 26a:	86 5a       	subi	r24, 0xA6	; 166
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	8a 35       	cpi	r24, 0x5A	; 90
 270:	91 05       	cpc	r25, r1
 272:	f8 f4       	brcc	.+62     	; 0x2b2 <segsum+0x16a>
	digit = 2;
 274:	02 e0       	ldi	r16, 0x02	; 2
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	7e cf       	rjmp	.-260    	; 0x176 <segsum+0x2e>
	case 2:
	    segment_data[4] = OFF;  	
	    segment_data[3] = OFF;  	
	    break;
	case 1:
	    segment_data[4] = OFF;  	
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	80 93 12 01 	sts	0x0112, r24
	    segment_data[3] = OFF;  	
 280:	80 93 11 01 	sts	0x0111, r24
	    segment_data[1] = OFF;  	
 284:	80 93 0f 01 	sts	0x010F, r24
	    break;
	default:
	    break;
    }
    //now move data to right place for misplaced colon position
}//segment_sum
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret
    segment_data[3] = int2seg((sum % 1000)/100); //hundreds
    segment_data[4] = int2seg(sum/1000); //thousands
    //blank out leading zero digits 
    switch (digit){
	case 3:
	    segment_data[4] = OFF;
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	df cf       	rjmp	.-66     	; 0x258 <segsum+0x110>
	    break;
	case 2:
	    segment_data[4] = OFF;  	
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	80 93 12 01 	sts	0x0112, r24
	    segment_data[3] = OFF;  	
 2a0:	80 93 11 01 	sts	0x0111, r24
	    break;
	default:
	    break;
    }
    //now move data to right place for misplaced colon position
}//segment_sum
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	08 95       	ret
    }
    else if (sum >= 10 && sum < 100){
	digit = 2;
    }
    else if (sum <10){
	digit = 1;
 2b2:	01 e0       	ldi	r16, 0x01	; 1
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	5f cf       	rjmp	.-322    	; 0x176 <segsum+0x2e>

000002b8 <main>:

//***********************************************************************************
int main()
{
    //set port bits 4-7 B as outputs
    DDRB = 0x70;
 2b8:	80 e7       	ldi	r24, 0x70	; 112
 2ba:	87 bb       	out	0x17, r24	; 23
    uint16_t value = 0;
    int display_segment;
    int button;
    segment_data[2] = OFF;
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	80 93 10 01 	sts	0x0110, r24
//***********************************************************************************
int main()
{
    //set port bits 4-7 B as outputs
    DDRB = 0x70;
    uint16_t value = 0;
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
    while(1){
	//insert loop delay for debounce 
	_delay_ms(2);
	//make PORTA an input port with pullups 
	DDRA  = 0x00; // PORTA input mode
	PORTA = 0xFF; //Pull ups
 2c6:	cc 24       	eor	r12, r12
 2c8:	ca 94       	dec	r12
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	//enable tristate buffer for pushbutton switches
	PORTB = 0x70; //Set S2,S1,S0 to 111
 2ca:	10 e7       	ldi	r17, 0x70	; 112
 2cc:	d1 2e       	mov	r13, r17
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	//now check each button and increment the count as needed
	for (button = 0 ; button < BUTTON_COUNT ; button++){
	    if (chk_buttons(button)){
		value = value + (1 << button);
 2ce:	ee 24       	eor	r14, r14
 2d0:	e3 94       	inc	r14
 2d2:	f1 2c       	mov	r15, r1
 2d4:	0e e0       	ldi	r16, 0x0E	; 14
 2d6:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	9f e1       	ldi	r25, 0x1F	; 31
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <main+0x24>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x2a>
 2e2:	00 00       	nop
    segment_data[2] = OFF;
    while(1){
	//insert loop delay for debounce 
	_delay_ms(2);
	//make PORTA an input port with pullups 
	DDRA  = 0x00; // PORTA input mode
 2e4:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0xFF; //Pull ups
 2e6:	cb ba       	out	0x1b, r12	; 27
	__asm__ __volatile__ ("nop");
 2e8:	00 00       	nop
	__asm__ __volatile__ ("nop");
 2ea:	00 00       	nop
	//enable tristate buffer for pushbutton switches
	PORTB = 0x70; //Set S2,S1,S0 to 111
 2ec:	d8 ba       	out	0x18, r13	; 24
	__asm__ __volatile__ ("nop");
 2ee:	00 00       	nop
	__asm__ __volatile__ ("nop");
 2f0:	00 00       	nop
 2f2:	40 91 00 01 	lds	r20, 0x0100
 2f6:	50 91 01 01 	lds	r21, 0x0101
	//now check each button and increment the count as needed
	for (button = 0 ; button < BUTTON_COUNT ; button++){
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <main+0x6a>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	50 ee       	ldi	r21, 0xE0	; 224
 304:	48 2b       	or	r20, r24
 306:	59 2b       	or	r21, r25
 308:	50 93 01 01 	sts	0x0101, r21
 30c:	40 93 00 01 	sts	0x0100, r20
    if (state == 0xF000){
 310:	41 15       	cp	r20, r1
 312:	90 ef       	ldi	r25, 0xF0	; 240
 314:	59 07       	cpc	r21, r25
 316:	a9 f0       	breq	.+42     	; 0x342 <main+0x8a>
	//enable tristate buffer for pushbutton switches
	PORTB = 0x70; //Set S2,S1,S0 to 111
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	//now check each button and increment the count as needed
	for (button = 0 ; button < BUTTON_COUNT ; button++){
 318:	2f 5f       	subi	r18, 0xFF	; 255
 31a:	3f 4f       	sbci	r19, 0xFF	; 255
 31c:	28 30       	cpi	r18, 0x08	; 8
 31e:	31 05       	cpc	r19, r1
 320:	f1 f0       	breq	.+60     	; 0x35e <main+0xa6>
//Expects active low pushbuttons on PINA port.  Debounce time is determined by 
//external loop delay times 12. 
//
int8_t chk_buttons(uint8_t button){
    static uint16_t state = 0;
    state = (state << 1) | (bit_is_clear(PINA, button) | 0xE000);
 322:	ca 01       	movw	r24, r20
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	49 b3       	in	r20, 0x19	; 25
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	02 2e       	mov	r0, r18
 32e:	02 c0       	rjmp	.+4      	; 0x334 <main+0x7c>
 330:	55 95       	asr	r21
 332:	47 95       	ror	r20
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <main+0x78>
 338:	40 ff       	sbrs	r20, 0
 33a:	e2 cf       	rjmp	.-60     	; 0x300 <main+0x48>
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	50 ee       	ldi	r21, 0xE0	; 224
 340:	e1 cf       	rjmp	.-62     	; 0x304 <main+0x4c>
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	//now check each button and increment the count as needed
	for (button = 0 ; button < BUTTON_COUNT ; button++){
	    if (chk_buttons(button)){
		value = value + (1 << button);
 342:	c7 01       	movw	r24, r14
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <main+0x94>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <main+0x90>
 350:	c8 0f       	add	r28, r24
 352:	d9 1f       	adc	r29, r25
	//enable tristate buffer for pushbutton switches
	PORTB = 0x70; //Set S2,S1,S0 to 111
	__asm__ __volatile__ ("nop");
	__asm__ __volatile__ ("nop");
	//now check each button and increment the count as needed
	for (button = 0 ; button < BUTTON_COUNT ; button++){
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	28 30       	cpi	r18, 0x08	; 8
 35a:	31 05       	cpc	r19, r1
 35c:	11 f7       	brne	.-60     	; 0x322 <main+0x6a>
	    if (chk_buttons(button)){
		value = value + (1 << button);
	    }
	}
	//bound the count to 0 - 1023
	if (value >= MAX_SUM){
 35e:	c1 15       	cp	r28, r1
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	d8 07       	cpc	r29, r24
 364:	10 f0       	brcs	.+4      	; 0x36a <main+0xb2>
	    value = 0;
 366:	c0 e0       	ldi	r28, 0x00	; 0
 368:	d0 e0       	ldi	r29, 0x00	; 0
	}
	//break up the disp_value to 4, BCD digits in the array: call (segsum)
	//value = 20;
	segsum(value);
 36a:	ce 01       	movw	r24, r28
 36c:	0e 94 a4 00 	call	0x148	; 0x148 <segsum>
	//bound a counter (0-4) to keep track of digit to display 
	//make PORTA an output
	DDRA = 0xFF;
 370:	ca ba       	out	0x1a, r12	; 26
	__asm__ __volatile__ ("nop"); //Buffer
 372:	00 00       	nop
	__asm__ __volatile__ ("nop"); //Buffer
 374:	00 00       	nop
 376:	ee e0       	ldi	r30, 0x0E	; 14
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	8e 2f       	mov	r24, r30
 37c:	80 1b       	sub	r24, r16
	for(display_segment = 0 ; display_segment < MAX_SEGMENT ; display_segment++){
	    //send PORTB the digit to display
	    PORTB = display_segment << 4;
 37e:	82 95       	swap	r24
 380:	80 7f       	andi	r24, 0xF0	; 240
 382:	88 bb       	out	0x18, r24	; 24
	    //send 7 segment code to LED segments
	    //update digit to display
	    PORTA = segment_data[display_segment];	
 384:	81 91       	ld	r24, Z+
 386:	8b bb       	out	0x1b, r24	; 27
 388:	8f e9       	ldi	r24, 0x9F	; 159
 38a:	9f e0       	ldi	r25, 0x0F	; 15
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <main+0xd4>
 390:	00 c0       	rjmp	.+0      	; 0x392 <main+0xda>
 392:	00 00       	nop
	//bound a counter (0-4) to keep track of digit to display 
	//make PORTA an output
	DDRA = 0xFF;
	__asm__ __volatile__ ("nop"); //Buffer
	__asm__ __volatile__ ("nop"); //Buffer
	for(display_segment = 0 ; display_segment < MAX_SEGMENT ; display_segment++){
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	e3 31       	cpi	r30, 0x13	; 19
 398:	f9 07       	cpc	r31, r25
 39a:	79 f7       	brne	.-34     	; 0x37a <main+0xc2>
 39c:	9d cf       	rjmp	.-198    	; 0x2d8 <main+0x20>

0000039e <__umulhisi3>:
 39e:	a2 9f       	mul	r26, r18
 3a0:	b0 01       	movw	r22, r0
 3a2:	b3 9f       	mul	r27, r19
 3a4:	c0 01       	movw	r24, r0
 3a6:	a3 9f       	mul	r26, r19
 3a8:	70 0d       	add	r23, r0
 3aa:	81 1d       	adc	r24, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	91 1d       	adc	r25, r1
 3b0:	b2 9f       	mul	r27, r18
 3b2:	70 0d       	add	r23, r0
 3b4:	81 1d       	adc	r24, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	91 1d       	adc	r25, r1
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
