
bar_graph_demo_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000172  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000208  2**0
                  ALLOC
  3 .stab         000006a8  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c1d  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  c6:	0c 94 b7 00 	jmp	0x16e	; 0x16e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
  DDRB  |=   0 | (1 << MOSI) | (1 << SCK) | (1 << SS);            //Turn on SS, MOSI, SCLK
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
  SPCR  |=   0 | (1 << SPE) | (1 << DORD) | (1 << MSTR);          //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 67       	ori	r24, 0x70	; 112
  d8:	8d b9       	out	0x0d, r24	; 13
  SPSR  |=   0 | (1 << SPIF) | (1 << SPI2X);           // double speed operation
  da:	8e b1       	in	r24, 0x0e	; 14
  dc:	81 68       	ori	r24, 0x81	; 129
  de:	8e b9       	out	0x0e, r24	; 14
  e0:	08 95       	ret

000000e2 <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
  ASSR   |=  0 | (1 << AS0);    //ext osc TOSC
  e2:	80 b7       	in	r24, 0x30	; 48
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 bf       	out	0x30, r24	; 48
  TIMSK  |=  0 | (1 << TOIE0);  //enable timer/counter0 overflow interrupt
  e8:	87 b7       	in	r24, 0x37	; 55
  ea:	81 60       	ori	r24, 0x01	; 1
  ec:	87 bf       	out	0x37, r24	; 55
  TCCR0  |=  0 | (1 << CS00);  //normal mode, no prescale
  ee:	83 b7       	in	r24, 0x33	; 51
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	83 bf       	out	0x33, r24	; 51
  f4:	08 95       	ret

000000f6 <__vector_16>:
//tcnt0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
    static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
    static uint8_t display_count = 0x01; //holds count for display 

    count_7ms++;                //increment count every 7.8125 ms 
 102:	80 91 02 01 	lds	r24, 0x0102
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 02 01 	sts	0x0102, r24
    if ((count_7ms % 64)==0){ //?? interrupts equals one half second 
 10c:	8f 73       	andi	r24, 0x3F	; 63
 10e:	69 f0       	breq	.+26     	; 0x12a <__vector_16+0x34>
 110:	80 91 00 01 	lds	r24, 0x0100
	    while(bit_is_clear(SPSR, SPIF)) {}               //wait till data is sent out (while spin loop)
	    PORTB |=  0x01;         //strobe output data reg in HC595 - rising edge
	    PORTB &=  0x00;          //falling edge
	    display_count = (display_count << 1) ; //shift display bit for next time 
    }
    if (display_count == 0x00){display_count = 0x01;} //display back to 1st positon
 114:	81 11       	cpse	r24, r1
 116:	03 c0       	rjmp	.+6      	; 0x11e <__vector_16+0x28>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 00 01 	sts	0x0100, r24
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti
    static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
    static uint8_t display_count = 0x01; //holds count for display 

    count_7ms++;                //increment count every 7.8125 ms 
    if ((count_7ms % 64)==0){ //?? interrupts equals one half second 
	SPDR = display_count;               //send to display 
 12a:	80 91 00 01 	lds	r24, 0x0100
 12e:	8f b9       	out	0x0f, r24	; 15
	    while(bit_is_clear(SPSR, SPIF)) {}               //wait till data is sent out (while spin loop)
 130:	77 9b       	sbis	0x0e, 7	; 14
 132:	fe cf       	rjmp	.-4      	; 0x130 <__vector_16+0x3a>
	    PORTB |=  0x01;         //strobe output data reg in HC595 - rising edge
 134:	c0 9a       	sbi	0x18, 0	; 24
	    PORTB &=  0x00;          //falling edge
 136:	88 b3       	in	r24, 0x18	; 24
 138:	18 ba       	out	0x18, r1	; 24
	    display_count = (display_count << 1) ; //shift display bit for next time 
 13a:	80 91 00 01 	lds	r24, 0x0100
 13e:	88 0f       	add	r24, r24
 140:	80 93 00 01 	sts	0x0100, r24
 144:	e7 cf       	rjmp	.-50     	; 0x114 <__vector_16+0x1e>

00000146 <main>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
  ASSR   |=  0 | (1 << AS0);    //ext osc TOSC
 146:	80 b7       	in	r24, 0x30	; 48
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 bf       	out	0x30, r24	; 48
  TIMSK  |=  0 | (1 << TOIE0);  //enable timer/counter0 overflow interrupt
 14c:	87 b7       	in	r24, 0x37	; 55
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	87 bf       	out	0x37, r24	; 55
  TCCR0  |=  0 | (1 << CS00);  //normal mode, no prescale
 152:	83 b7       	in	r24, 0x33	; 51
 154:	81 60       	ori	r24, 0x01	; 1
 156:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
  DDRB  |=   0 | (1 << MOSI) | (1 << SCK) | (1 << SS);            //Turn on SS, MOSI, SCLK
 158:	87 b3       	in	r24, 0x17	; 23
 15a:	87 60       	ori	r24, 0x07	; 7
 15c:	87 bb       	out	0x17, r24	; 23
  SPCR  |=   0 | (1 << SPE) | (1 << DORD) | (1 << MSTR);          //set up SPI mode
 15e:	8d b1       	in	r24, 0x0d	; 13
 160:	80 67       	ori	r24, 0x70	; 112
 162:	8d b9       	out	0x0d, r24	; 13
  SPSR  |=   0 | (1 << SPIF) | (1 << SPI2X);           // double speed operation
 164:	8e b1       	in	r24, 0x0e	; 14
 166:	81 68       	ori	r24, 0x81	; 129
 168:	8e b9       	out	0x0e, r24	; 14
//                                main                                 
/***********************************************************************/
int main(){     
    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
 16a:	78 94       	sei
 16c:	ff cf       	rjmp	.-2      	; 0x16c <main+0x26>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
