
stim_timer_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000c1a  00000cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800178  00800178  00000d26  2**0
                  ALLOC
  3 .stab         00001f98  00000000  00000000  00000d28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7d  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003c3d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 37       	cpi	r26, 0x78	; 120
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e7       	ldi	r26, 0x78	; 120
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 38       	cpi	r26, 0x88	; 136
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 2d 04 	call	0x85a	; 0x85a <main>
  c6:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <strobe_lcd>:
}


void strobe_lcd(void) {
	//twiddles bit 3, PORTF creating the enable signal for the LCD
	PORTF |= 0x08;
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	80 83       	st	Z, r24
	PORTF &= ~0x08;
  d8:	80 81       	ld	r24, Z
  da:	87 7f       	andi	r24, 0xF7	; 247
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <LCD_Clr>:
}

void LCD_Clr(void) {
	LCD_CMD(0x01);
  e0:	1f b8       	out	0x0f, r1	; 15
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <LCD_Clr+0x2>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	8f b9       	out	0x0f, r24	; 15
  ea:	77 9b       	sbis	0x0e, 7	; 14
  ec:	fe cf       	rjmp	.-4      	; 0xea <LCD_Clr+0xa>
  ee:	80 91 62 00 	lds	r24, 0x0062
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 93 62 00 	sts	0x0062, r24
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	87 7f       	andi	r24, 0xF7	; 247
  fe:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	8f e8       	ldi	r24, 0x8F	; 143
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_Clr+0x26>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_Clr+0x2c>
 10c:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9f e1       	ldi	r25, 0x1F	; 31
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Clr+0x32>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Clr+0x38>
 118:	00 00       	nop
 11a:	08 95       	ret

0000011c <LCD_MovCursorLn1>:
	_delay_ms(2);   //obligatory waiting for slow LCD
}

void LCD_MovCursorLn1(void) {
	LCD_CMD(0x80);
 11c:	1f b8       	out	0x0f, r1	; 15
 11e:	77 9b       	sbis	0x0e, 7	; 14
 120:	fe cf       	rjmp	.-4      	; 0x11e <LCD_MovCursorLn1+0x2>
 122:	80 e8       	ldi	r24, 0x80	; 128
 124:	8f b9       	out	0x0f, r24	; 15
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <LCD_MovCursorLn1+0xa>
 12a:	80 91 62 00 	lds	r24, 0x0062
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	80 93 62 00 	sts	0x0062, r24
 134:	80 91 62 00 	lds	r24, 0x0062
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	80 93 62 00 	sts	0x0062, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	8f e8       	ldi	r24, 0x8F	; 143
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_MovCursorLn1+0x26>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_MovCursorLn1+0x2c>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <LCD_MovCursorLn2>:
}

void LCD_MovCursorLn2(void) {
	LCD_CMD(0xC0);
 14c:	1f b8       	out	0x0f, r1	; 15
 14e:	77 9b       	sbis	0x0e, 7	; 14
 150:	fe cf       	rjmp	.-4      	; 0x14e <LCD_MovCursorLn2+0x2>
 152:	80 ec       	ldi	r24, 0xC0	; 192
 154:	8f b9       	out	0x0f, r24	; 15
 156:	77 9b       	sbis	0x0e, 7	; 14
 158:	fe cf       	rjmp	.-4      	; 0x156 <LCD_MovCursorLn2+0xa>
 15a:	80 91 62 00 	lds	r24, 0x0062
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 93 62 00 	sts	0x0062, r24
 164:	80 91 62 00 	lds	r24, 0x0062
 168:	87 7f       	andi	r24, 0xF7	; 247
 16a:	80 93 62 00 	sts	0x0062, r24
 16e:	8f e8       	ldi	r24, 0x8F	; 143
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <LCD_MovCursorLn2+0x26>
 176:	00 c0       	rjmp	.+0      	; 0x178 <LCD_MovCursorLn2+0x2c>
 178:	00 00       	nop
 17a:	08 95       	ret

0000017c <LCD_CursorBlinkOn>:
}

void LCD_CursorBlinkOn(void) {
	LCD_CMD(0x0F);
 17c:	1f b8       	out	0x0f, r1	; 15
 17e:	77 9b       	sbis	0x0e, 7	; 14
 180:	fe cf       	rjmp	.-4      	; 0x17e <LCD_CursorBlinkOn+0x2>
 182:	8f e0       	ldi	r24, 0x0F	; 15
 184:	8f b9       	out	0x0f, r24	; 15
 186:	77 9b       	sbis	0x0e, 7	; 14
 188:	fe cf       	rjmp	.-4      	; 0x186 <LCD_CursorBlinkOn+0xa>
 18a:	80 91 62 00 	lds	r24, 0x0062
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 93 62 00 	sts	0x0062, r24
 194:	80 91 62 00 	lds	r24, 0x0062
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	80 93 62 00 	sts	0x0062, r24
 19e:	8f e8       	ldi	r24, 0x8F	; 143
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_CursorBlinkOn+0x26>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_CursorBlinkOn+0x2c>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <LCD_CursorBlinkOff>:
}

void LCD_CursorBlinkOff(void) {
	LCD_CMD(0x0C);
 1ac:	1f b8       	out	0x0f, r1	; 15
 1ae:	77 9b       	sbis	0x0e, 7	; 14
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <LCD_CursorBlinkOff+0x2>
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	8f b9       	out	0x0f, r24	; 15
 1b6:	77 9b       	sbis	0x0e, 7	; 14
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <LCD_CursorBlinkOff+0xa>
 1ba:	80 91 62 00 	lds	r24, 0x0062
 1be:	88 60       	ori	r24, 0x08	; 8
 1c0:	80 93 62 00 	sts	0x0062, r24
 1c4:	80 91 62 00 	lds	r24, 0x0062
 1c8:	87 7f       	andi	r24, 0xF7	; 247
 1ca:	80 93 62 00 	sts	0x0062, r24
 1ce:	8f e8       	ldi	r24, 0x8F	; 143
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_CursorBlinkOff+0x26>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_CursorBlinkOff+0x2c>
 1d8:	00 00       	nop
 1da:	08 95       	ret

000001dc <LCD_MovCursor>:
		
	The cursor will not be moved if an invalid location is provided
*/
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
 1dc:	60 31       	cpi	r22, 0x10	; 16
 1de:	20 f4       	brcc	.+8      	; 0x1e8 <LCD_MovCursor+0xc>
		return;
	if (line == 1) {
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	19 f0       	breq	.+6      	; 0x1ea <LCD_MovCursor+0xe>
		addr = 0x80 + position;
	} else if (line == 2) {
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <LCD_MovCursor+0x3e>
 1e8:	08 95       	ret
void LCD_MovCursor(uint8_t line, uint8_t position) {
	uint8_t addr;
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
 1ea:	60 58       	subi	r22, 0x80	; 128
		addr = 0xC0 + position;
	} else {
		// invalid line number
		return;
	}
	LCD_CMD(addr);
 1ec:	1f b8       	out	0x0f, r1	; 15
 1ee:	77 9b       	sbis	0x0e, 7	; 14
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <LCD_MovCursor+0x12>
 1f2:	6f b9       	out	0x0f, r22	; 15
 1f4:	77 9b       	sbis	0x0e, 7	; 14
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <LCD_MovCursor+0x18>
 1f8:	80 91 62 00 	lds	r24, 0x0062
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	80 93 62 00 	sts	0x0062, r24
 202:	80 91 62 00 	lds	r24, 0x0062
 206:	87 7f       	andi	r24, 0xF7	; 247
 208:	80 93 62 00 	sts	0x0062, r24
 20c:	8f e8       	ldi	r24, 0x8F	; 143
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_MovCursor+0x34>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_MovCursor+0x3a>
 216:	00 00       	nop
 218:	08 95       	ret
	if (position > 15)
		return;
	if (line == 1) {
		addr = 0x80 + position;
	} else if (line == 2) {
		addr = 0xC0 + position;
 21a:	60 54       	subi	r22, 0x40	; 64
 21c:	e7 cf       	rjmp	.-50     	; 0x1ec <LCD_MovCursor+0x10>

0000021e <LCD_FillSpaces>:
		return;
	}
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
 21e:	80 e1       	ldi	r24, 0x10	; 16
 220:	90 e0       	ldi	r25, 0x00	; 0
	int count;
	for (count=0; count<=15; count++){
		LCD_DATA(' ');
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	30 e2       	ldi	r19, 0x20	; 32
 226:	4f b9       	out	0x0f, r20	; 15
 228:	77 9b       	sbis	0x0e, 7	; 14
 22a:	fe cf       	rjmp	.-4      	; 0x228 <LCD_FillSpaces+0xa>
 22c:	3f b9       	out	0x0f, r19	; 15
 22e:	77 9b       	sbis	0x0e, 7	; 14
 230:	fe cf       	rjmp	.-4      	; 0x22e <LCD_FillSpaces+0x10>
 232:	20 91 62 00 	lds	r18, 0x0062
 236:	28 60       	ori	r18, 0x08	; 8
 238:	20 93 62 00 	sts	0x0062, r18
 23c:	20 91 62 00 	lds	r18, 0x0062
 240:	27 7f       	andi	r18, 0xF7	; 247
 242:	20 93 62 00 	sts	0x0062, r18
 246:	ef e8       	ldi	r30, 0x8F	; 143
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_FillSpaces+0x2c>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_FillSpaces+0x32>
 250:	00 00       	nop
 252:	01 97       	sbiw	r24, 0x01	; 1
	LCD_CMD(addr);
}

void LCD_FillSpaces(void) {
	int count;
	for (count=0; count<=15; count++){
 254:	00 97       	sbiw	r24, 0x00	; 0
 256:	39 f7       	brne	.-50     	; 0x226 <LCD_FillSpaces+0x8>
		LCD_DATA(' ');
	}
}
 258:	08 95       	ret

0000025a <LCD_PutDec8>:
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
 25a:	84 36       	cpi	r24, 0x64	; 100
 25c:	08 f4       	brcc	.+2      	; 0x260 <LCD_PutDec8+0x6>
 25e:	5d c0       	rjmp	.+186    	; 0x31a <LCD_PutDec8+0xc0>
		digit++;
		num -= 100;
 260:	9c e9       	ldi	r25, 0x9C	; 156
 262:	98 0f       	add	r25, r24
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
 264:	94 36       	cpi	r25, 0x64	; 100
 266:	08 f4       	brcc	.+2      	; 0x26a <LCD_PutDec8+0x10>
 268:	5c c0       	rjmp	.+184    	; 0x322 <LCD_PutDec8+0xc8>
		digit++;
		num -= 100;
 26a:	88 5c       	subi	r24, 0xC8	; 200
 26c:	22 e3       	ldi	r18, 0x32	; 50
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	9f b9       	out	0x0f, r25	; 15
 272:	77 9b       	sbis	0x0e, 7	; 14
 274:	fe cf       	rjmp	.-4      	; 0x272 <LCD_PutDec8+0x18>
 276:	2f b9       	out	0x0f, r18	; 15
 278:	77 9b       	sbis	0x0e, 7	; 14
 27a:	fe cf       	rjmp	.-4      	; 0x278 <LCD_PutDec8+0x1e>
 27c:	90 91 62 00 	lds	r25, 0x0062
 280:	98 60       	ori	r25, 0x08	; 8
 282:	90 93 62 00 	sts	0x0062, r25
 286:	90 91 62 00 	lds	r25, 0x0062
 28a:	97 7f       	andi	r25, 0xF7	; 247
 28c:	90 93 62 00 	sts	0x0062, r25
 290:	ef e8       	ldi	r30, 0x8F	; 143
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <LCD_PutDec8+0x3a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <LCD_PutDec8+0x40>
 29a:	00 00       	nop
		flag = 1;
 29c:	91 e0       	ldi	r25, 0x01	; 1
	}
	digit = 0;
	while (num >= 10) {
 29e:	8a 30       	cpi	r24, 0x0A	; 10
 2a0:	c0 f1       	brcs	.+112    	; 0x312 <LCD_PutDec8+0xb8>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 2a2:	90 e0       	ldi	r25, 0x00	; 0
	while (num >= 10) {
		digit++;
 2a4:	9f 5f       	subi	r25, 0xFF	; 255
		num -= 10;
 2a6:	8a 50       	subi	r24, 0x0A	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 2a8:	8a 30       	cpi	r24, 0x0A	; 10
 2aa:	e0 f7       	brcc	.-8      	; 0x2a4 <LCD_PutDec8+0x4a>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	2f b9       	out	0x0f, r18	; 15
 2b0:	77 9b       	sbis	0x0e, 7	; 14
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <LCD_PutDec8+0x56>
 2b4:	90 5d       	subi	r25, 0xD0	; 208
 2b6:	9f b9       	out	0x0f, r25	; 15
 2b8:	77 9b       	sbis	0x0e, 7	; 14
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <LCD_PutDec8+0x5e>
 2bc:	90 91 62 00 	lds	r25, 0x0062
 2c0:	98 60       	ori	r25, 0x08	; 8
 2c2:	90 93 62 00 	sts	0x0062, r25
 2c6:	90 91 62 00 	lds	r25, 0x0062
 2ca:	97 7f       	andi	r25, 0xF7	; 247
 2cc:	90 93 62 00 	sts	0x0062, r25
 2d0:	ef e8       	ldi	r30, 0x8F	; 143
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_PutDec8+0x7a>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_PutDec8+0x80>
 2da:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
 2dc:	88 23       	and	r24, r24
 2de:	f9 f0       	breq	.+62     	; 0x31e <LCD_PutDec8+0xc4>
 2e0:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	9f b9       	out	0x0f, r25	; 15
 2e6:	77 9b       	sbis	0x0e, 7	; 14
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <LCD_PutDec8+0x8c>
 2ea:	8f b9       	out	0x0f, r24	; 15
 2ec:	77 9b       	sbis	0x0e, 7	; 14
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <LCD_PutDec8+0x92>
 2f0:	80 91 62 00 	lds	r24, 0x0062
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	80 93 62 00 	sts	0x0062, r24
 2fa:	80 91 62 00 	lds	r24, 0x0062
 2fe:	87 7f       	andi	r24, 0xF7	; 247
 300:	80 93 62 00 	sts	0x0062, r24
 304:	8f e8       	ldi	r24, 0x8F	; 143
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_PutDec8+0xae>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_PutDec8+0xb4>
 30e:	00 00       	nop
 310:	08 95       	ret
	digit = 0;
	while (num >= 10) {
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
 312:	91 30       	cpi	r25, 0x01	; 1
 314:	19 f7       	brne	.-58     	; 0x2dc <LCD_PutDec8+0x82>
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	c9 cf       	rjmp	.-110    	; 0x2ac <LCD_PutDec8+0x52>
	Convert an 8 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	c0 cf       	rjmp	.-128    	; 0x29e <LCD_PutDec8+0x44>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
 31e:	80 e3       	ldi	r24, 0x30	; 48
 320:	e0 cf       	rjmp	.-64     	; 0x2e2 <LCD_PutDec8+0x88>
	and display the result.
*/
void LCD_PutDec8(uint8_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 100) {
 322:	89 2f       	mov	r24, r25
 324:	21 e3       	ldi	r18, 0x31	; 49
 326:	a3 cf       	rjmp	.-186    	; 0x26e <LCD_PutDec8+0x14>

00000328 <LCD_PutDec16>:
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
 328:	80 31       	cpi	r24, 0x10	; 16
 32a:	27 e2       	ldi	r18, 0x27	; 39
 32c:	92 07       	cpc	r25, r18
 32e:	08 f4       	brcc	.+2      	; 0x332 <LCD_PutDec16+0xa>
 330:	bf c0       	rjmp	.+382    	; 0x4b0 <LCD_PutDec16+0x188>
/*
	Convert a 16 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	01 c0       	rjmp	.+2      	; 0x338 <LCD_PutDec16+0x10>
	uint8_t flag = 0;
	while (num >= 10000) {
		digit++;
 336:	23 2f       	mov	r18, r19
 338:	31 e0       	ldi	r19, 0x01	; 1
 33a:	32 0f       	add	r19, r18
		num -= 10000;
 33c:	80 51       	subi	r24, 0x10	; 16
 33e:	97 42       	sbci	r25, 0x27	; 39
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
	while (num >= 10000) {
 340:	80 31       	cpi	r24, 0x10	; 16
 342:	47 e2       	ldi	r20, 0x27	; 39
 344:	94 07       	cpc	r25, r20
 346:	b8 f7       	brcc	.-18     	; 0x336 <LCD_PutDec16+0xe>
		digit++;
		num -= 10000;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 348:	31 e0       	ldi	r19, 0x01	; 1
 34a:	3f b9       	out	0x0f, r19	; 15
 34c:	77 9b       	sbis	0x0e, 7	; 14
 34e:	fe cf       	rjmp	.-4      	; 0x34c <LCD_PutDec16+0x24>
 350:	2f 5c       	subi	r18, 0xCF	; 207
 352:	2f b9       	out	0x0f, r18	; 15
 354:	77 9b       	sbis	0x0e, 7	; 14
 356:	fe cf       	rjmp	.-4      	; 0x354 <LCD_PutDec16+0x2c>
 358:	20 91 62 00 	lds	r18, 0x0062
 35c:	28 60       	ori	r18, 0x08	; 8
 35e:	20 93 62 00 	sts	0x0062, r18
 362:	20 91 62 00 	lds	r18, 0x0062
 366:	27 7f       	andi	r18, 0xF7	; 247
 368:	20 93 62 00 	sts	0x0062, r18
 36c:	ef e8       	ldi	r30, 0x8F	; 143
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	f1 f7       	brne	.-4      	; 0x370 <LCD_PutDec16+0x48>
 374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_PutDec16+0x4e>
 376:	00 00       	nop
		flag = 1;
 378:	21 e0       	ldi	r18, 0x01	; 1
	}
	digit = 0;
	while (num >= 1000) {
 37a:	88 3e       	cpi	r24, 0xE8	; 232
 37c:	f3 e0       	ldi	r31, 0x03	; 3
 37e:	9f 07       	cpc	r25, r31
 380:	08 f4       	brcc	.+2      	; 0x384 <LCD_PutDec16+0x5c>
 382:	8e c0       	rjmp	.+284    	; 0x4a0 <LCD_PutDec16+0x178>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 384:	20 e0       	ldi	r18, 0x00	; 0
	while (num >= 1000) {
		digit++;
 386:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 1000;
 388:	88 5e       	subi	r24, 0xE8	; 232
 38a:	93 40       	sbci	r25, 0x03	; 3
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1000) {
 38c:	88 3e       	cpi	r24, 0xE8	; 232
 38e:	33 e0       	ldi	r19, 0x03	; 3
 390:	93 07       	cpc	r25, r19
 392:	c8 f7       	brcc	.-14     	; 0x386 <LCD_PutDec16+0x5e>
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
 394:	31 e0       	ldi	r19, 0x01	; 1
 396:	3f b9       	out	0x0f, r19	; 15
 398:	77 9b       	sbis	0x0e, 7	; 14
 39a:	fe cf       	rjmp	.-4      	; 0x398 <LCD_PutDec16+0x70>
 39c:	20 5d       	subi	r18, 0xD0	; 208
 39e:	2f b9       	out	0x0f, r18	; 15
 3a0:	77 9b       	sbis	0x0e, 7	; 14
 3a2:	fe cf       	rjmp	.-4      	; 0x3a0 <LCD_PutDec16+0x78>
 3a4:	20 91 62 00 	lds	r18, 0x0062
 3a8:	28 60       	ori	r18, 0x08	; 8
 3aa:	20 93 62 00 	sts	0x0062, r18
 3ae:	20 91 62 00 	lds	r18, 0x0062
 3b2:	27 7f       	andi	r18, 0xF7	; 247
 3b4:	20 93 62 00 	sts	0x0062, r18
 3b8:	ef e8       	ldi	r30, 0x8F	; 143
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_PutDec16+0x94>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <LCD_PutDec16+0x9a>
 3c2:	00 00       	nop
		flag = 1;
 3c4:	31 e0       	ldi	r19, 0x01	; 1
	}
	digit = 0;
	while (num >= 100) {
 3c6:	84 36       	cpi	r24, 0x64	; 100
 3c8:	91 05       	cpc	r25, r1
 3ca:	08 f4       	brcc	.+2      	; 0x3ce <LCD_PutDec16+0xa6>
 3cc:	65 c0       	rjmp	.+202    	; 0x498 <LCD_PutDec16+0x170>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 3ce:	20 e0       	ldi	r18, 0x00	; 0
	while (num >= 100) {
		digit++;
 3d0:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 100;
 3d2:	84 56       	subi	r24, 0x64	; 100
 3d4:	91 09       	sbc	r25, r1
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 100) {
 3d6:	84 36       	cpi	r24, 0x64	; 100
 3d8:	91 05       	cpc	r25, r1
 3da:	d0 f7       	brcc	.-12     	; 0x3d0 <LCD_PutDec16+0xa8>
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
 3dc:	22 23       	and	r18, r18
 3de:	09 f4       	brne	.+2      	; 0x3e2 <LCD_PutDec16+0xba>
 3e0:	5b c0       	rjmp	.+182    	; 0x498 <LCD_PutDec16+0x170>
		LCD_DATA(digit + 48);
 3e2:	31 e0       	ldi	r19, 0x01	; 1
 3e4:	3f b9       	out	0x0f, r19	; 15
 3e6:	77 9b       	sbis	0x0e, 7	; 14
 3e8:	fe cf       	rjmp	.-4      	; 0x3e6 <LCD_PutDec16+0xbe>
 3ea:	20 5d       	subi	r18, 0xD0	; 208
 3ec:	2f b9       	out	0x0f, r18	; 15
 3ee:	77 9b       	sbis	0x0e, 7	; 14
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <LCD_PutDec16+0xc6>
 3f2:	20 91 62 00 	lds	r18, 0x0062
 3f6:	28 60       	ori	r18, 0x08	; 8
 3f8:	20 93 62 00 	sts	0x0062, r18
 3fc:	20 91 62 00 	lds	r18, 0x0062
 400:	27 7f       	andi	r18, 0xF7	; 247
 402:	20 93 62 00 	sts	0x0062, r18
 406:	ef e8       	ldi	r30, 0x8F	; 143
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <LCD_PutDec16+0xe2>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <LCD_PutDec16+0xe8>
 410:	00 00       	nop
		flag = 1;
 412:	31 e0       	ldi	r19, 0x01	; 1
	}
	digit = 0;
	while (num >= 10) {
 414:	8a 30       	cpi	r24, 0x0A	; 10
 416:	91 05       	cpc	r25, r1
 418:	d8 f1       	brcs	.+118    	; 0x490 <LCD_PutDec16+0x168>
	}
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
 41a:	20 e0       	ldi	r18, 0x00	; 0
	while (num >= 10) {
		digit++;
 41c:	2f 5f       	subi	r18, 0xFF	; 255
		num -= 10;
 41e:	0a 97       	sbiw	r24, 0x0a	; 10
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 10) {
 420:	8a 30       	cpi	r24, 0x0A	; 10
 422:	91 05       	cpc	r25, r1
 424:	d8 f7       	brcc	.-10     	; 0x41c <LCD_PutDec16+0xf4>
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
 426:	22 23       	and	r18, r18
 428:	99 f1       	breq	.+102    	; 0x490 <LCD_PutDec16+0x168>
		LCD_DATA(digit + 48);
 42a:	31 e0       	ldi	r19, 0x01	; 1
 42c:	3f b9       	out	0x0f, r19	; 15
 42e:	77 9b       	sbis	0x0e, 7	; 14
 430:	fe cf       	rjmp	.-4      	; 0x42e <LCD_PutDec16+0x106>
 432:	20 5d       	subi	r18, 0xD0	; 208
 434:	2f b9       	out	0x0f, r18	; 15
 436:	77 9b       	sbis	0x0e, 7	; 14
 438:	fe cf       	rjmp	.-4      	; 0x436 <LCD_PutDec16+0x10e>
 43a:	20 91 62 00 	lds	r18, 0x0062
 43e:	28 60       	ori	r18, 0x08	; 8
 440:	20 93 62 00 	sts	0x0062, r18
 444:	20 91 62 00 	lds	r18, 0x0062
 448:	27 7f       	andi	r18, 0xF7	; 247
 44a:	20 93 62 00 	sts	0x0062, r18
 44e:	ef e8       	ldi	r30, 0x8F	; 143
 450:	f1 e0       	ldi	r31, 0x01	; 1
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <LCD_PutDec16+0x12a>
 456:	00 c0       	rjmp	.+0      	; 0x458 <LCD_PutDec16+0x130>
 458:	00 00       	nop
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	59 f1       	breq	.+86     	; 0x4b4 <LCD_PutDec16+0x18c>
 45e:	80 5d       	subi	r24, 0xD0	; 208
		digit++;
		num -= 1;
	}
	LCD_DATA(digit + 48);
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	9f b9       	out	0x0f, r25	; 15
 464:	77 9b       	sbis	0x0e, 7	; 14
 466:	fe cf       	rjmp	.-4      	; 0x464 <LCD_PutDec16+0x13c>
 468:	8f b9       	out	0x0f, r24	; 15
 46a:	77 9b       	sbis	0x0e, 7	; 14
 46c:	fe cf       	rjmp	.-4      	; 0x46a <LCD_PutDec16+0x142>
 46e:	80 91 62 00 	lds	r24, 0x0062
 472:	88 60       	ori	r24, 0x08	; 8
 474:	80 93 62 00 	sts	0x0062, r24
 478:	80 91 62 00 	lds	r24, 0x0062
 47c:	87 7f       	andi	r24, 0xF7	; 247
 47e:	80 93 62 00 	sts	0x0062, r24
 482:	8f e8       	ldi	r24, 0x8F	; 143
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <LCD_PutDec16+0x15e>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <LCD_PutDec16+0x164>
 48c:	00 00       	nop
 48e:	08 95       	ret
	digit = 0;
	while (num >= 10) {
		digit++;
		num -= 10;
	}
	if (digit > 0 || flag == 1) {
 490:	31 30       	cpi	r19, 0x01	; 1
 492:	19 f7       	brne	.-58     	; 0x45a <LCD_PutDec16+0x132>
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	c9 cf       	rjmp	.-110    	; 0x42a <LCD_PutDec16+0x102>
	digit = 0;
	while (num >= 100) {
		digit++;
		num -= 100;
	}
	if (digit > 0 || flag == 1) {
 498:	31 30       	cpi	r19, 0x01	; 1
 49a:	41 f0       	breq	.+16     	; 0x4ac <LCD_PutDec16+0x184>
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	ba cf       	rjmp	.-140    	; 0x414 <LCD_PutDec16+0xec>
	digit = 0;
	while (num >= 1000) {
		digit++;
		num -= 1000;
	}
	if (digit > 0 || flag == 1) {
 4a0:	21 30       	cpi	r18, 0x01	; 1
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <LCD_PutDec16+0x180>
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	8f cf       	rjmp	.-226    	; 0x3c6 <LCD_PutDec16+0x9e>
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	74 cf       	rjmp	.-280    	; 0x394 <LCD_PutDec16+0x6c>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	99 cf       	rjmp	.-206    	; 0x3e2 <LCD_PutDec16+0xba>
	Convert a 16 bit unsigned number to ASCII
	and display the result.
*/
void LCD_PutDec16(uint16_t num) {
	uint8_t digit = 0;
	uint8_t flag = 0;
 4b0:	20 e0       	ldi	r18, 0x00	; 0
 4b2:	63 cf       	rjmp	.-314    	; 0x37a <LCD_PutDec16+0x52>
	if (digit > 0 || flag == 1) {
		LCD_DATA(digit + 48);
		flag = 1;
	}
	digit = 0;
	while (num >= 1) {
 4b4:	80 e3       	ldi	r24, 0x30	; 48
 4b6:	d4 cf       	rjmp	.-88     	; 0x460 <LCD_PutDec16+0x138>

000004b8 <LCD_PutChar>:
/*
	Send an ASCII character to the LCD
	usage: LCD_PutChar('H');
*/
void LCD_PutChar(char a_char) {
	LCD_DATA(a_char);
 4b8:	91 e0       	ldi	r25, 0x01	; 1
 4ba:	9f b9       	out	0x0f, r25	; 15
 4bc:	77 9b       	sbis	0x0e, 7	; 14
 4be:	fe cf       	rjmp	.-4      	; 0x4bc <LCD_PutChar+0x4>
 4c0:	8f b9       	out	0x0f, r24	; 15
 4c2:	77 9b       	sbis	0x0e, 7	; 14
 4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <LCD_PutChar+0xa>
 4c6:	80 91 62 00 	lds	r24, 0x0062
 4ca:	88 60       	ori	r24, 0x08	; 8
 4cc:	80 93 62 00 	sts	0x0062, r24
 4d0:	80 91 62 00 	lds	r24, 0x0062
 4d4:	87 7f       	andi	r24, 0xF7	; 247
 4d6:	80 93 62 00 	sts	0x0062, r24
 4da:	8f e8       	ldi	r24, 0x8F	; 143
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <LCD_PutChar+0x26>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <LCD_PutChar+0x2c>
 4e4:	00 00       	nop
 4e6:	08 95       	ret

000004e8 <LCD_PutStr>:
}

/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
 4e8:	dc 01       	movw	r26, r24
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	90 e0       	ldi	r25, 0x00	; 0
		LCD_DATA(lcd_str[count]);
 4f0:	41 e0       	ldi	r20, 0x01	; 1
 4f2:	4f b9       	out	0x0f, r20	; 15
 4f4:	77 9b       	sbis	0x0e, 7	; 14
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <LCD_PutStr+0xc>
 4f8:	fd 01       	movw	r30, r26
 4fa:	e2 0f       	add	r30, r18
 4fc:	f3 1f       	adc	r31, r19
 4fe:	80 81       	ld	r24, Z
 500:	8f b9       	out	0x0f, r24	; 15
 502:	77 9b       	sbis	0x0e, 7	; 14
 504:	fe cf       	rjmp	.-4      	; 0x502 <LCD_PutStr+0x1a>
 506:	80 91 62 00 	lds	r24, 0x0062
 50a:	88 60       	ori	r24, 0x08	; 8
 50c:	80 93 62 00 	sts	0x0062, r24
 510:	80 91 62 00 	lds	r24, 0x0062
 514:	87 7f       	andi	r24, 0xF7	; 247
 516:	80 93 62 00 	sts	0x0062, r24
 51a:	ef e8       	ldi	r30, 0x8F	; 143
 51c:	f1 e0       	ldi	r31, 0x01	; 1
 51e:	31 97       	sbiw	r30, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <LCD_PutStr+0x36>
 522:	00 c0       	rjmp	.+0      	; 0x524 <LCD_PutStr+0x3c>
 524:	00 00       	nop
/*
	Send an ASCII string to the LCD
*/
void LCD_PutStr(char *lcd_str) {
	uint8_t count;
	for (count=0; count<=(strlen(lcd_str)-1); count++){
 526:	9f 5f       	subi	r25, 0xFF	; 255
 528:	29 2f       	mov	r18, r25
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	fd 01       	movw	r30, r26
 52e:	01 90       	ld	r0, Z+
 530:	00 20       	and	r0, r0
 532:	e9 f7       	brne	.-6      	; 0x52e <LCD_PutStr+0x46>
 534:	ea 1b       	sub	r30, r26
 536:	fb 0b       	sbc	r31, r27
 538:	32 97       	sbiw	r30, 0x02	; 2
 53a:	e2 17       	cp	r30, r18
 53c:	f3 07       	cpc	r31, r19
 53e:	c8 f6       	brcc	.-78     	; 0x4f2 <LCD_PutStr+0xa>
		LCD_DATA(lcd_str[count]);
	}
}
 540:	08 95       	ret

00000542 <LCD_SPIInit>:

void LCD_SPIInit(void) {
	DDRF |= 0x08;  //port F bit 3 is enable for LCD
 542:	e1 e6       	ldi	r30, 0x61	; 97
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	88 60       	ori	r24, 0x08	; 8
 54a:	80 83       	st	Z, r24
	PORTB |= 0x00; //port B initialization for SPI
 54c:	88 b3       	in	r24, 0x18	; 24
 54e:	88 bb       	out	0x18, r24	; 24
	DDRB |= 0x07;  //Turn on SS, MOSI, SCLK
 550:	87 b3       	in	r24, 0x17	; 23
 552:	87 60       	ori	r24, 0x07	; 7
 554:	87 bb       	out	0x17, r24	; 23
	//Master mode, Clock=clk/2, Cycle half phase, Low polarity, MSB first
	SPCR = 0x50;
 556:	80 e5       	ldi	r24, 0x50	; 80
 558:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x01;
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	8e b9       	out	0x0e, r24	; 14
 55e:	08 95       	ret

00000560 <LCD_Init>:
 560:	80 e8       	ldi	r24, 0x80	; 128
 562:	85 bf       	out	0x35, r24	; 53
 564:	92 e4       	ldi	r25, 0x42	; 66
 566:	90 93 6d 00 	sts	0x006D, r25
 56a:	80 93 6c 00 	sts	0x006C, r24
 56e:	80 91 61 00 	lds	r24, 0x0061
 572:	88 60       	ori	r24, 0x08	; 8
 574:	80 93 61 00 	sts	0x0061, r24
 578:	88 b3       	in	r24, 0x18	; 24
 57a:	88 bb       	out	0x18, r24	; 24
 57c:	87 b3       	in	r24, 0x17	; 23
 57e:	87 60       	ori	r24, 0x07	; 7
 580:	87 bb       	out	0x17, r24	; 23
 582:	80 e5       	ldi	r24, 0x50	; 80
 584:	8d b9       	out	0x0d, r24	; 13
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	8e b9       	out	0x0e, r24	; 14
 58a:	80 91 61 00 	lds	r24, 0x0061
 58e:	88 60       	ori	r24, 0x08	; 8
 590:	80 93 61 00 	sts	0x0061, r24
 594:	8f e5       	ldi	r24, 0x5F	; 95
 596:	9a ee       	ldi	r25, 0xEA	; 234
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LCD_Init+0x38>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <LCD_Init+0x3e>
 59e:	00 00       	nop
 5a0:	1f b8       	out	0x0f, r1	; 15
 5a2:	77 9b       	sbis	0x0e, 7	; 14
 5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <LCD_Init+0x42>
 5a6:	88 e3       	ldi	r24, 0x38	; 56
 5a8:	8f b9       	out	0x0f, r24	; 15
 5aa:	77 9b       	sbis	0x0e, 7	; 14
 5ac:	fe cf       	rjmp	.-4      	; 0x5aa <LCD_Init+0x4a>
 5ae:	80 91 62 00 	lds	r24, 0x0062
 5b2:	88 60       	ori	r24, 0x08	; 8
 5b4:	80 93 62 00 	sts	0x0062, r24
 5b8:	80 91 62 00 	lds	r24, 0x0062
 5bc:	87 7f       	andi	r24, 0xF7	; 247
 5be:	80 93 62 00 	sts	0x0062, r24
 5c2:	8f e8       	ldi	r24, 0x8F	; 143
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <LCD_Init+0x66>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <LCD_Init+0x6c>
 5cc:	00 00       	nop
 5ce:	8f e1       	ldi	r24, 0x1F	; 31
 5d0:	9e e4       	ldi	r25, 0x4E	; 78
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_Init+0x72>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_Init+0x78>
 5d8:	00 00       	nop
 5da:	1f b8       	out	0x0f, r1	; 15
 5dc:	77 9b       	sbis	0x0e, 7	; 14
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <LCD_Init+0x7c>
 5e0:	88 e0       	ldi	r24, 0x08	; 8
 5e2:	8f b9       	out	0x0f, r24	; 15
 5e4:	77 9b       	sbis	0x0e, 7	; 14
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <LCD_Init+0x84>
 5e8:	80 91 62 00 	lds	r24, 0x0062
 5ec:	88 60       	ori	r24, 0x08	; 8
 5ee:	80 93 62 00 	sts	0x0062, r24
 5f2:	80 91 62 00 	lds	r24, 0x0062
 5f6:	87 7f       	andi	r24, 0xF7	; 247
 5f8:	80 93 62 00 	sts	0x0062, r24
 5fc:	8f e8       	ldi	r24, 0x8F	; 143
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <LCD_Init+0xa0>
 604:	00 c0       	rjmp	.+0      	; 0x606 <LCD_Init+0xa6>
 606:	00 00       	nop
 608:	8f e3       	ldi	r24, 0x3F	; 63
 60a:	9f e1       	ldi	r25, 0x1F	; 31
 60c:	01 97       	sbiw	r24, 0x01	; 1
 60e:	f1 f7       	brne	.-4      	; 0x60c <LCD_Init+0xac>
 610:	00 c0       	rjmp	.+0      	; 0x612 <LCD_Init+0xb2>
 612:	00 00       	nop
 614:	1f b8       	out	0x0f, r1	; 15
 616:	77 9b       	sbis	0x0e, 7	; 14
 618:	fe cf       	rjmp	.-4      	; 0x616 <LCD_Init+0xb6>
 61a:	86 e0       	ldi	r24, 0x06	; 6
 61c:	8f b9       	out	0x0f, r24	; 15
 61e:	77 9b       	sbis	0x0e, 7	; 14
 620:	fe cf       	rjmp	.-4      	; 0x61e <LCD_Init+0xbe>
 622:	80 91 62 00 	lds	r24, 0x0062
 626:	88 60       	ori	r24, 0x08	; 8
 628:	80 93 62 00 	sts	0x0062, r24
 62c:	80 91 62 00 	lds	r24, 0x0062
 630:	87 7f       	andi	r24, 0xF7	; 247
 632:	80 93 62 00 	sts	0x0062, r24
 636:	8f e8       	ldi	r24, 0x8F	; 143
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <LCD_Init+0xda>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <LCD_Init+0xe0>
 640:	00 00       	nop
 642:	1f b8       	out	0x0f, r1	; 15
 644:	77 9b       	sbis	0x0e, 7	; 14
 646:	fe cf       	rjmp	.-4      	; 0x644 <LCD_Init+0xe4>
 648:	80 e4       	ldi	r24, 0x40	; 64
 64a:	8f b9       	out	0x0f, r24	; 15
 64c:	77 9b       	sbis	0x0e, 7	; 14
 64e:	fe cf       	rjmp	.-4      	; 0x64c <LCD_Init+0xec>
 650:	80 91 62 00 	lds	r24, 0x0062
 654:	88 60       	ori	r24, 0x08	; 8
 656:	80 93 62 00 	sts	0x0062, r24
 65a:	80 91 62 00 	lds	r24, 0x0062
 65e:	87 7f       	andi	r24, 0xF7	; 247
 660:	80 93 62 00 	sts	0x0062, r24
 664:	8f e8       	ldi	r24, 0x8F	; 143
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	01 97       	sbiw	r24, 0x01	; 1
 66a:	f1 f7       	brne	.-4      	; 0x668 <LCD_Init+0x108>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <LCD_Init+0x10e>
 66e:	00 00       	nop
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	8f b9       	out	0x0f, r24	; 15
 674:	77 9b       	sbis	0x0e, 7	; 14
 676:	fe cf       	rjmp	.-4      	; 0x674 <LCD_Init+0x114>
 678:	8e e0       	ldi	r24, 0x0E	; 14
 67a:	8f b9       	out	0x0f, r24	; 15
 67c:	77 9b       	sbis	0x0e, 7	; 14
 67e:	fe cf       	rjmp	.-4      	; 0x67c <LCD_Init+0x11c>
 680:	80 91 62 00 	lds	r24, 0x0062
 684:	88 60       	ori	r24, 0x08	; 8
 686:	80 93 62 00 	sts	0x0062, r24
 68a:	80 91 62 00 	lds	r24, 0x0062
 68e:	87 7f       	andi	r24, 0xF7	; 247
 690:	80 93 62 00 	sts	0x0062, r24
 694:	8f e8       	ldi	r24, 0x8F	; 143
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <LCD_Init+0x138>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <LCD_Init+0x13e>
 69e:	00 00       	nop
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	8f b9       	out	0x0f, r24	; 15
 6a4:	77 9b       	sbis	0x0e, 7	; 14
 6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <LCD_Init+0x144>
 6a8:	8b e1       	ldi	r24, 0x1B	; 27
 6aa:	8f b9       	out	0x0f, r24	; 15
 6ac:	77 9b       	sbis	0x0e, 7	; 14
 6ae:	fe cf       	rjmp	.-4      	; 0x6ac <LCD_Init+0x14c>
 6b0:	80 91 62 00 	lds	r24, 0x0062
 6b4:	88 60       	ori	r24, 0x08	; 8
 6b6:	80 93 62 00 	sts	0x0062, r24
 6ba:	80 91 62 00 	lds	r24, 0x0062
 6be:	87 7f       	andi	r24, 0xF7	; 247
 6c0:	80 93 62 00 	sts	0x0062, r24
 6c4:	8f e8       	ldi	r24, 0x8F	; 143
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <LCD_Init+0x168>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <LCD_Init+0x16e>
 6ce:	00 00       	nop
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	8f b9       	out	0x0f, r24	; 15
 6d4:	77 9b       	sbis	0x0e, 7	; 14
 6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <LCD_Init+0x174>
 6d8:	81 e1       	ldi	r24, 0x11	; 17
 6da:	8f b9       	out	0x0f, r24	; 15
 6dc:	77 9b       	sbis	0x0e, 7	; 14
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <LCD_Init+0x17c>
 6e0:	80 91 62 00 	lds	r24, 0x0062
 6e4:	88 60       	ori	r24, 0x08	; 8
 6e6:	80 93 62 00 	sts	0x0062, r24
 6ea:	80 91 62 00 	lds	r24, 0x0062
 6ee:	87 7f       	andi	r24, 0xF7	; 247
 6f0:	80 93 62 00 	sts	0x0062, r24
 6f4:	8f e8       	ldi	r24, 0x8F	; 143
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	01 97       	sbiw	r24, 0x01	; 1
 6fa:	f1 f7       	brne	.-4      	; 0x6f8 <LCD_Init+0x198>
 6fc:	00 c0       	rjmp	.+0      	; 0x6fe <LCD_Init+0x19e>
 6fe:	00 00       	nop
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	8f b9       	out	0x0f, r24	; 15
 704:	77 9b       	sbis	0x0e, 7	; 14
 706:	fe cf       	rjmp	.-4      	; 0x704 <LCD_Init+0x1a4>
 708:	81 e1       	ldi	r24, 0x11	; 17
 70a:	8f b9       	out	0x0f, r24	; 15
 70c:	77 9b       	sbis	0x0e, 7	; 14
 70e:	fe cf       	rjmp	.-4      	; 0x70c <LCD_Init+0x1ac>
 710:	80 91 62 00 	lds	r24, 0x0062
 714:	88 60       	ori	r24, 0x08	; 8
 716:	80 93 62 00 	sts	0x0062, r24
 71a:	80 91 62 00 	lds	r24, 0x0062
 71e:	87 7f       	andi	r24, 0xF7	; 247
 720:	80 93 62 00 	sts	0x0062, r24
 724:	8f e8       	ldi	r24, 0x8F	; 143
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <LCD_Init+0x1c8>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <LCD_Init+0x1ce>
 72e:	00 00       	nop
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	8f b9       	out	0x0f, r24	; 15
 734:	77 9b       	sbis	0x0e, 7	; 14
 736:	fe cf       	rjmp	.-4      	; 0x734 <LCD_Init+0x1d4>
 738:	81 e1       	ldi	r24, 0x11	; 17
 73a:	8f b9       	out	0x0f, r24	; 15
 73c:	77 9b       	sbis	0x0e, 7	; 14
 73e:	fe cf       	rjmp	.-4      	; 0x73c <LCD_Init+0x1dc>
 740:	80 91 62 00 	lds	r24, 0x0062
 744:	88 60       	ori	r24, 0x08	; 8
 746:	80 93 62 00 	sts	0x0062, r24
 74a:	80 91 62 00 	lds	r24, 0x0062
 74e:	87 7f       	andi	r24, 0xF7	; 247
 750:	80 93 62 00 	sts	0x0062, r24
 754:	8f e8       	ldi	r24, 0x8F	; 143
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	01 97       	sbiw	r24, 0x01	; 1
 75a:	f1 f7       	brne	.-4      	; 0x758 <LCD_Init+0x1f8>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <LCD_Init+0x1fe>
 75e:	00 00       	nop
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	8f b9       	out	0x0f, r24	; 15
 764:	77 9b       	sbis	0x0e, 7	; 14
 766:	fe cf       	rjmp	.-4      	; 0x764 <LCD_Init+0x204>
 768:	81 e1       	ldi	r24, 0x11	; 17
 76a:	8f b9       	out	0x0f, r24	; 15
 76c:	77 9b       	sbis	0x0e, 7	; 14
 76e:	fe cf       	rjmp	.-4      	; 0x76c <LCD_Init+0x20c>
 770:	80 91 62 00 	lds	r24, 0x0062
 774:	88 60       	ori	r24, 0x08	; 8
 776:	80 93 62 00 	sts	0x0062, r24
 77a:	80 91 62 00 	lds	r24, 0x0062
 77e:	87 7f       	andi	r24, 0xF7	; 247
 780:	80 93 62 00 	sts	0x0062, r24
 784:	8f e8       	ldi	r24, 0x8F	; 143
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <LCD_Init+0x228>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <LCD_Init+0x22e>
 78e:	00 00       	nop
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	8f b9       	out	0x0f, r24	; 15
 794:	77 9b       	sbis	0x0e, 7	; 14
 796:	fe cf       	rjmp	.-4      	; 0x794 <LCD_Init+0x234>
 798:	81 e1       	ldi	r24, 0x11	; 17
 79a:	8f b9       	out	0x0f, r24	; 15
 79c:	77 9b       	sbis	0x0e, 7	; 14
 79e:	fe cf       	rjmp	.-4      	; 0x79c <LCD_Init+0x23c>
 7a0:	80 91 62 00 	lds	r24, 0x0062
 7a4:	88 60       	ori	r24, 0x08	; 8
 7a6:	80 93 62 00 	sts	0x0062, r24
 7aa:	80 91 62 00 	lds	r24, 0x0062
 7ae:	87 7f       	andi	r24, 0xF7	; 247
 7b0:	80 93 62 00 	sts	0x0062, r24
 7b4:	8f e8       	ldi	r24, 0x8F	; 143
 7b6:	91 e0       	ldi	r25, 0x01	; 1
 7b8:	01 97       	sbiw	r24, 0x01	; 1
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <LCD_Init+0x258>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <LCD_Init+0x25e>
 7be:	00 00       	nop
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	8f b9       	out	0x0f, r24	; 15
 7c4:	77 9b       	sbis	0x0e, 7	; 14
 7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <LCD_Init+0x264>
 7c8:	8f e1       	ldi	r24, 0x1F	; 31
 7ca:	8f b9       	out	0x0f, r24	; 15
 7cc:	77 9b       	sbis	0x0e, 7	; 14
 7ce:	fe cf       	rjmp	.-4      	; 0x7cc <LCD_Init+0x26c>
 7d0:	80 91 62 00 	lds	r24, 0x0062
 7d4:	88 60       	ori	r24, 0x08	; 8
 7d6:	80 93 62 00 	sts	0x0062, r24
 7da:	80 91 62 00 	lds	r24, 0x0062
 7de:	87 7f       	andi	r24, 0xF7	; 247
 7e0:	80 93 62 00 	sts	0x0062, r24
 7e4:	8f e8       	ldi	r24, 0x8F	; 143
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	01 97       	sbiw	r24, 0x01	; 1
 7ea:	f1 f7       	brne	.-4      	; 0x7e8 <LCD_Init+0x288>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <LCD_Init+0x28e>
 7ee:	00 00       	nop
 7f0:	1f b8       	out	0x0f, r1	; 15
 7f2:	77 9b       	sbis	0x0e, 7	; 14
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <LCD_Init+0x292>
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	8f b9       	out	0x0f, r24	; 15
 7fa:	77 9b       	sbis	0x0e, 7	; 14
 7fc:	fe cf       	rjmp	.-4      	; 0x7fa <LCD_Init+0x29a>
 7fe:	80 91 62 00 	lds	r24, 0x0062
 802:	88 60       	ori	r24, 0x08	; 8
 804:	80 93 62 00 	sts	0x0062, r24
 808:	80 91 62 00 	lds	r24, 0x0062
 80c:	87 7f       	andi	r24, 0xF7	; 247
 80e:	80 93 62 00 	sts	0x0062, r24
 812:	8f e8       	ldi	r24, 0x8F	; 143
 814:	91 e0       	ldi	r25, 0x01	; 1
 816:	01 97       	sbiw	r24, 0x01	; 1
 818:	f1 f7       	brne	.-4      	; 0x816 <LCD_Init+0x2b6>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <LCD_Init+0x2bc>
 81c:	00 00       	nop
 81e:	8f e1       	ldi	r24, 0x1F	; 31
 820:	9e e4       	ldi	r25, 0x4E	; 78
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	f1 f7       	brne	.-4      	; 0x822 <LCD_Init+0x2c2>
 826:	00 c0       	rjmp	.+0      	; 0x828 <LCD_Init+0x2c8>
 828:	00 00       	nop
 82a:	1f b8       	out	0x0f, r1	; 15
 82c:	77 9b       	sbis	0x0e, 7	; 14
 82e:	fe cf       	rjmp	.-4      	; 0x82c <LCD_Init+0x2cc>
 830:	8c e0       	ldi	r24, 0x0C	; 12
 832:	8f b9       	out	0x0f, r24	; 15
 834:	77 9b       	sbis	0x0e, 7	; 14
 836:	fe cf       	rjmp	.-4      	; 0x834 <LCD_Init+0x2d4>
 838:	80 91 62 00 	lds	r24, 0x0062
 83c:	88 60       	ori	r24, 0x08	; 8
 83e:	80 93 62 00 	sts	0x0062, r24
 842:	80 91 62 00 	lds	r24, 0x0062
 846:	87 7f       	andi	r24, 0xF7	; 247
 848:	80 93 62 00 	sts	0x0062, r24
 84c:	8f e8       	ldi	r24, 0x8F	; 143
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	01 97       	sbiw	r24, 0x01	; 1
 852:	f1 f7       	brne	.-4      	; 0x850 <LCD_Init+0x2f0>
 854:	00 c0       	rjmp	.+0      	; 0x856 <LCD_Init+0x2f6>
 856:	00 00       	nop
 858:	08 95       	ret

0000085a <main>:
#include "LCDDriver.h"

enum states {SR_WELCOME, SR_RANDOM_DELAY, SR_TIMING_USER, SR_RESULTS};

int main(void)
{
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	00 d0       	rcall	.+0      	; 0x860 <main+0x6>
 860:	00 d0       	rcall	.+0      	; 0x862 <main+0x8>
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
  uint16_t numticks = 0;
	
  // set default state
  enum states state = SR_WELCOME;
  
  DDRB = 0xFF; PORTB = 0x00; // PORTB is all outputs for LEDs except when used by SPI
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	87 bb       	out	0x17, r24	; 23
 86a:	18 ba       	out	0x18, r1	; 24
  DDRD = 0x00; // Switches are inputs
 86c:	11 ba       	out	0x11, r1	; 17
{
  // Variables
  uint16_t numticks = 0;
	
  // set default state
  enum states state = SR_WELCOME;
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	90 e0       	ldi	r25, 0x00	; 0
enum states {SR_WELCOME, SR_RANDOM_DELAY, SR_TIMING_USER, SR_RESULTS};

int main(void)
{
  // Variables
  uint16_t numticks = 0;
 872:	41 2c       	mov	r4, r1
 874:	51 2c       	mov	r5, r1
        SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs

        // Set up Timer Counter 0   
        TCCR0 = 0;                          //normal mode, clock disabled
        TIMSK = 0;                          //disable _all_ TC0 interrupts	
        TIFR  = (1 << TOV0);                          //manually clear overflow flag
 876:	bb 24       	eor	r11, r11
 878:	b3 94       	inc	r11

        // start the timer with a 1024 prescaler;  16MHz/1024 = 15.625 KHz
        //TCCR0 =   (1<<CS02) | (1<<CS01) | (1<<CS00);
        TCCR0 = 0b111;
 87a:	47 e0       	ldi	r20, 0x07	; 7
 87c:	74 2e       	mov	r7, r20

        //Need to randomly wait between 2-10 seconds. Since it takes 1.64 ms for
        //the 8 bit timer to overflow, we need to loop between 122-610 times.
        
        //following code is supposedly more random than other methods 
        uint16_t numIterations = rand() / (RAND_MAX / 488 + 1); //pick number between (0 - 487)
 87e:	04 e4       	ldi	r16, 0x44	; 68
 880:	10 e0       	ldi	r17, 0x00	; 0
      TCCR1B = 0;                  //disable noise canceler, set WGM1{3,2} to 0, and disable clock
      TCCR1A = 0;                  //disable all output compare pins and set WGM1{1,0} to 0

      TIMSK  = 0;                                    //disable all TCNT1 interrupts in here
      ETIMSK = 0;                                    //and in here
      TIFR   = (1 << TOV1);                                    // manually clear the TC1 overflow flag
 882:	54 e0       	ldi	r21, 0x04	; 4
 884:	85 2e       	mov	r8, r21
      TCNT1  =  0;                                   // initialize TCNT counter to 0

      //Count the number of ticks until a button is pressed. Start the timer with a 1024 prescaler.
      //16MHz / 1024 = 15.625 KHz
      TCCR1B = (1 << CS12) | (1 << CS10);                                              // start TC1 counter
 886:	65 e0       	ldi	r22, 0x05	; 5
 888:	96 2e       	mov	r9, r22
      PORTB = 0xFF; // light all LEDs so the user knows to push the button
 88a:	aa 24       	eor	r10, r10
 88c:	aa 94       	dec	r10
      // are 15.625 ticks in a millisecond. We can use this information to determine the user's reaction time.
      PORTB = 0x00; //disable LEDs

      //To compute milliseconds, we multiply by 8/125. Since we are multiplying a 16 bit number,
      //be sure to perform the math using a 32 bit number.
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
 88e:	7d e7       	ldi	r23, 0x7D	; 125
 890:	c7 2e       	mov	r12, r23
 892:	d1 2c       	mov	r13, r1
 894:	e1 2c       	mov	r14, r1
 896:	f1 2c       	mov	r15, r1
  
  DDRB = 0xFF; PORTB = 0x00; // PORTB is all outputs for LEDs except when used by SPI
  DDRD = 0x00; // Switches are inputs

  while(1) {
    switch (state) {
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	91 05       	cpc	r25, r1
 89c:	09 f4       	brne	.+2      	; 0x8a0 <main+0x46>
 89e:	5b c0       	rjmp	.+182    	; 0x956 <main+0xfc>
 8a0:	81 30       	cpi	r24, 0x01	; 1
 8a2:	91 05       	cpc	r25, r1
 8a4:	08 f4       	brcc	.+2      	; 0x8a8 <main+0x4e>
 8a6:	95 c0       	rjmp	.+298    	; 0x9d2 <main+0x178>
 8a8:	82 30       	cpi	r24, 0x02	; 2
 8aa:	91 05       	cpc	r25, r1
 8ac:	09 f4       	brne	.+2      	; 0x8b0 <main+0x56>
 8ae:	78 c0       	rjmp	.+240    	; 0x9a0 <main+0x146>
 8b0:	83 30       	cpi	r24, 0x03	; 3
 8b2:	91 05       	cpc	r25, r1
 8b4:	89 f7       	brne	.-30     	; 0x898 <main+0x3e>
    }
			
    case SR_RESULTS: {
      // Now we compute the results without using floating point arithmetic. The timer runs at 15.625KHz so there 
      // are 15.625 ticks in a millisecond. We can use this information to determine the user's reaction time.
      PORTB = 0x00; //disable LEDs
 8b6:	18 ba       	out	0x18, r1	; 24

      //To compute milliseconds, we multiply by 8/125. Since we are multiplying a 16 bit number,
      //be sure to perform the math using a 32 bit number.
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
 8b8:	b2 01       	movw	r22, r4
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	66 0f       	add	r22, r22
 8c8:	77 1f       	adc	r23, r23
 8ca:	88 1f       	adc	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	66 0f       	add	r22, r22
 8d0:	77 1f       	adc	r23, r23
 8d2:	88 1f       	adc	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	a7 01       	movw	r20, r14
 8d8:	96 01       	movw	r18, r12
 8da:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
	
      LCD_Init();
 8de:	29 83       	std	Y+1, r18	; 0x01
 8e0:	3a 83       	std	Y+2, r19	; 0x02
 8e2:	4b 83       	std	Y+3, r20	; 0x03
 8e4:	5c 83       	std	Y+4, r21	; 0x04
 8e6:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_Init>
      if (((TIFR & (1 << TOV1)) == 0) && (numMilliseconds == 0)) {
 8ea:	29 81       	ldd	r18, Y+1	; 0x01
 8ec:	3a 81       	ldd	r19, Y+2	; 0x02
 8ee:	4b 81       	ldd	r20, Y+3	; 0x03
 8f0:	5c 81       	ldd	r21, Y+4	; 0x04
 8f2:	06 b6       	in	r0, 0x36	; 54
 8f4:	02 fc       	sbrc	r0, 2
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <main+0xaa>
 8f8:	21 15       	cp	r18, r1
 8fa:	31 05       	cpc	r19, r1
 8fc:	41 05       	cpc	r20, r1
 8fe:	51 05       	cpc	r21, r1
 900:	09 f4       	brne	.+2      	; 0x904 <main+0xaa>
 902:	8e c0       	rjmp	.+284    	; 0xa20 <main+0x1c6>
      // overflow wasn't triggered but numMilliseconds = 0, the user held down the button
        LCD_PutStr("No cheating!!");
        LCD_MovCursorLn2();
        LCD_PutStr("Retry?");
        _delay_ms(1000);
      } else if ((TIFR & (1 << TOV1)) == 0) {
 904:	06 b6       	in	r0, 0x36	; 54
 906:	02 fc       	sbrc	r0, 2
 908:	80 c0       	rjmp	.+256    	; 0xa0a <main+0x1b0>
        // overflow wasn't triggered
        // display the time
        LCD_PutStr("Your time:");
 90a:	89 e4       	ldi	r24, 0x49	; 73
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	29 83       	std	Y+1, r18	; 0x01
 910:	3a 83       	std	Y+2, r19	; 0x02
 912:	4b 83       	std	Y+3, r20	; 0x03
 914:	5c 83       	std	Y+4, r21	; 0x04
 916:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
        LCD_MovCursorLn2();
 91a:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutDec16((uint16_t)numMilliseconds);
 91e:	29 81       	ldd	r18, Y+1	; 0x01
 920:	3a 81       	ldd	r19, Y+2	; 0x02
 922:	c9 01       	movw	r24, r18
 924:	0e 94 94 01 	call	0x328	; 0x328 <LCD_PutDec16>
        LCD_PutStr(" ms");
 928:	84 e5       	ldi	r24, 0x54	; 84
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
        LCD_PutStr("Timer expired.");
        LCD_MovCursorLn2();
        LCD_PutStr("Press btn to rst");
    }
	
    SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs
 930:	1d b8       	out	0x0d, r1	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	95 ea       	ldi	r25, 0xA5	; 165
 936:	ee e0       	ldi	r30, 0x0E	; 14
 938:	81 50       	subi	r24, 0x01	; 1
 93a:	90 40       	sbci	r25, 0x00	; 0
 93c:	e0 40       	sbci	r30, 0x00	; 0
 93e:	e1 f7       	brne	.-8      	; 0x938 <main+0xde>
 940:	00 c0       	rjmp	.+0      	; 0x942 <main+0xe8>
 942:	00 00       	nop
    _delay_ms(300); // add delay to avoid switch bouncing issues
    while (PIND == 0xFF) {}; // wait until a button is pressed
 944:	80 b3       	in	r24, 0x10	; 16
 946:	8f 3f       	cpi	r24, 0xFF	; 255
 948:	e9 f3       	breq	.-6      	; 0x944 <main+0xea>
    state = SR_RANDOM_DELAY; // move back to the random delay state
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
  
  DDRB = 0xFF; PORTB = 0x00; // PORTB is all outputs for LEDs except when used by SPI
  DDRD = 0x00; // Switches are inputs

  while(1) {
    switch (state) {
 94e:	81 30       	cpi	r24, 0x01	; 1
 950:	91 05       	cpc	r25, r1
 952:	09 f0       	breq	.+2      	; 0x956 <main+0xfc>
 954:	a5 cf       	rjmp	.-182    	; 0x8a0 <main+0x46>
	state = SR_RANDOM_DELAY;  //progress to RANDOM_DELAY state
	break;
     }

      case SR_RANDOM_DELAY: {
        LCD_Init();
 956:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_Init>
        LCD_PutStr("Press any button");
 95a:	82 e1       	ldi	r24, 0x12	; 18
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
        LCD_MovCursorLn2();
 962:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutStr("after LEDs light");
 966:	83 e2       	ldi	r24, 0x23	; 35
 968:	91 e0       	ldi	r25, 0x01	; 1
 96a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
        SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs
 96e:	1d b8       	out	0x0d, r1	; 13

        // Set up Timer Counter 0   
        TCCR0 = 0;                          //normal mode, clock disabled
 970:	13 be       	out	0x33, r1	; 51
        TIMSK = 0;                          //disable _all_ TC0 interrupts	
 972:	17 be       	out	0x37, r1	; 55
        TIFR  = (1 << TOV0);                          //manually clear overflow flag
 974:	b6 be       	out	0x36, r11	; 54

        // start the timer with a 1024 prescaler;  16MHz/1024 = 15.625 KHz
        //TCCR0 =   (1<<CS02) | (1<<CS01) | (1<<CS00);
        TCCR0 = 0b111;
 976:	73 be       	out	0x33, r7	; 51

        //Need to randomly wait between 2-10 seconds. Since it takes 1.64 ms for
        //the 8 bit timer to overflow, we need to loop between 122-610 times.
        
        //following code is supposedly more random than other methods 
        uint16_t numIterations = rand() / (RAND_MAX / 488 + 1); //pick number between (0 - 487)
 978:	0e 94 bb 05 	call	0xb76	; 0xb76 <rand>
 97c:	b8 01       	movw	r22, r16
 97e:	0e 94 24 05 	call	0xa48	; 0xa48 <__divmodhi4>
        numIterations += 122; //numIterations should now be between (122 - 610)
 982:	66 58       	subi	r22, 0x86	; 134
 984:	7f 4f       	sbci	r23, 0xFF	; 255
    
        do {

    	 while(bit_is_clear(TIFR, TOV0)) {}; //spin till TC0 OVF flag set
 986:	06 b6       	in	r0, 0x36	; 54
 988:	00 fe       	sbrs	r0, 0
 98a:	fd cf       	rjmp	.-6      	; 0x986 <main+0x12c>
    	 TIFR = (1<<TOV0);                                     //manually clear TC0 OVF flag
 98c:	b6 be       	out	0x36, r11	; 54
    	 //note: the counter will automatically keep counting upward again
    	 numIterations--; // decrement number of iterations
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	71 09       	sbc	r23, r1
           } while (numIterations > 0);
 992:	61 15       	cp	r22, r1
 994:	71 05       	cpc	r23, r1
 996:	b9 f7       	brne	.-18     	; 0x986 <main+0x12c>

        TCCR0 = 0;                //disable the TC0 timer
 998:	13 be       	out	0x33, r1	; 51

        state = SR_TIMING_USER;  //progress to TIMING_USER state
 99a:	82 e0       	ldi	r24, 0x02	; 2
 99c:	90 e0       	ldi	r25, 0x00	; 0
        break;
 99e:	7c cf       	rjmp	.-264    	; 0x898 <main+0x3e>
    }
    case SR_TIMING_USER: {
      //Set up TCNT1 to measure the user's reaction time
      TCCR1B = 0;                  //disable noise canceler, set WGM1{3,2} to 0, and disable clock
 9a0:	1e bc       	out	0x2e, r1	; 46
      TCCR1A = 0;                  //disable all output compare pins and set WGM1{1,0} to 0
 9a2:	1f bc       	out	0x2f, r1	; 47

      TIMSK  = 0;                                    //disable all TCNT1 interrupts in here
 9a4:	17 be       	out	0x37, r1	; 55
      ETIMSK = 0;                                    //and in here
 9a6:	10 92 7d 00 	sts	0x007D, r1
      TIFR   = (1 << TOV1);                                    // manually clear the TC1 overflow flag
 9aa:	86 be       	out	0x36, r8	; 54
      TCNT1  =  0;                                   // initialize TCNT counter to 0
 9ac:	1d bc       	out	0x2d, r1	; 45
 9ae:	1c bc       	out	0x2c, r1	; 44

      //Count the number of ticks until a button is pressed. Start the timer with a 1024 prescaler.
      //16MHz / 1024 = 15.625 KHz
      TCCR1B = (1 << CS12) | (1 << CS10);                                              // start TC1 counter
 9b0:	9e bc       	out	0x2e, r9	; 46
      PORTB = 0xFF; // light all LEDs so the user knows to push the button
 9b2:	a8 ba       	out	0x18, r10	; 24

      while ( ((TIFR & (1 << TOV1)) == 0) && (PIND == 0xFF) ) {}; // wait until button pressed or TC1 OVF set
 9b4:	03 c0       	rjmp	.+6      	; 0x9bc <main+0x162>
 9b6:	80 b3       	in	r24, 0x10	; 16
 9b8:	8f 3f       	cpi	r24, 0xFF	; 255
 9ba:	19 f4       	brne	.+6      	; 0x9c2 <main+0x168>
 9bc:	06 b6       	in	r0, 0x36	; 54
 9be:	02 fe       	sbrs	r0, 2
 9c0:	fa cf       	rjmp	.-12     	; 0x9b6 <main+0x15c>
      numticks = TCNT1;
 9c2:	4c b4       	in	r4, 0x2c	; 44
 9c4:	5d b4       	in	r5, 0x2d	; 45
      TCCR1B &= 0b1111000 ;                    // stop the TC1 counter
 9c6:	8e b5       	in	r24, 0x2e	; 46
 9c8:	88 77       	andi	r24, 0x78	; 120
 9ca:	8e bd       	out	0x2e, r24	; 46
      // note that the count is now stored in TCNT1
      state = SR_RESULTS; // progress to RESULTS state
 9cc:	83 e0       	ldi	r24, 0x03	; 3
 9ce:	90 e0       	ldi	r25, 0x00	; 0
      break;
 9d0:	63 cf       	rjmp	.-314    	; 0x898 <main+0x3e>
  DDRD = 0x00; // Switches are inputs

  while(1) {
    switch (state) {
      case SR_WELCOME: {
        LCD_Init();
 9d2:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_Init>
       	LCD_PutStr("REFLEX TESTER");
 9d6:	84 e0       	ldi	r24, 0x04	; 4
 9d8:	91 e0       	ldi	r25, 0x01	; 1
 9da:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
       	LCD_MovCursorLn2();
 9de:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
       	LCD_PutStr("Press any button");
 9e2:	82 e1       	ldi	r24, 0x12	; 18
 9e4:	91 e0       	ldi	r25, 0x01	; 1
 9e6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
       	SPCR = 0x00;    //disable SPI so that PORTB can be used for LEDs
 9ea:	1d b8       	out	0x0d, r1	; 13
 9ec:	2f ef       	ldi	r18, 0xFF	; 255
 9ee:	81 ee       	ldi	r24, 0xE1	; 225
 9f0:	94 e0       	ldi	r25, 0x04	; 4
 9f2:	21 50       	subi	r18, 0x01	; 1
 9f4:	80 40       	sbci	r24, 0x00	; 0
 9f6:	90 40       	sbci	r25, 0x00	; 0
 9f8:	e1 f7       	brne	.-8      	; 0x9f2 <main+0x198>
 9fa:	00 c0       	rjmp	.+0      	; 0x9fc <main+0x1a2>
 9fc:	00 00       	nop
       	_delay_ms(100); //force minimum 100ms display time
       	while (PIND == 0xFF) {};  //spin till button pressed
 9fe:	80 b3       	in	r24, 0x10	; 16
 a00:	8f 3f       	cpi	r24, 0xFF	; 255
 a02:	e9 f3       	breq	.-6      	; 0x9fe <main+0x1a4>
    }
	
    SPCR = 0x00; // disable SPI so that PORTB can be used for LEDs
    _delay_ms(300); // add delay to avoid switch bouncing issues
    while (PIND == 0xFF) {}; // wait until a button is pressed
    state = SR_RANDOM_DELAY; // move back to the random delay state
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	a2 cf       	rjmp	.-188    	; 0x94e <main+0xf4>
        LCD_PutDec16((uint16_t)numMilliseconds);
        LCD_PutStr(" ms");
      } else {
        // overflow was triggered
        // user took too long
        LCD_PutStr("Timer expired.");
 a0a:	88 e5       	ldi	r24, 0x58	; 88
 a0c:	91 e0       	ldi	r25, 0x01	; 1
 a0e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
        LCD_MovCursorLn2();
 a12:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutStr("Press btn to rst");
 a16:	87 e6       	ldi	r24, 0x67	; 103
 a18:	91 e0       	ldi	r25, 0x01	; 1
 a1a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
 a1e:	88 cf       	rjmp	.-240    	; 0x930 <main+0xd6>
      uint32_t numMilliseconds = ((uint32_t)numticks * 8) / 125;
	
      LCD_Init();
      if (((TIFR & (1 << TOV1)) == 0) && (numMilliseconds == 0)) {
      // overflow wasn't triggered but numMilliseconds = 0, the user held down the button
        LCD_PutStr("No cheating!!");
 a20:	84 e3       	ldi	r24, 0x34	; 52
 a22:	91 e0       	ldi	r25, 0x01	; 1
 a24:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
        LCD_MovCursorLn2();
 a28:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_MovCursorLn2>
        LCD_PutStr("Retry?");
 a2c:	82 e4       	ldi	r24, 0x42	; 66
 a2e:	91 e0       	ldi	r25, 0x01	; 1
 a30:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_PutStr>
 a34:	ef ef       	ldi	r30, 0xFF	; 255
 a36:	f3 ed       	ldi	r31, 0xD3	; 211
 a38:	20 e3       	ldi	r18, 0x30	; 48
 a3a:	e1 50       	subi	r30, 0x01	; 1
 a3c:	f0 40       	sbci	r31, 0x00	; 0
 a3e:	20 40       	sbci	r18, 0x00	; 0
 a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x1e0>
 a42:	00 c0       	rjmp	.+0      	; 0xa44 <main+0x1ea>
 a44:	00 00       	nop
 a46:	74 cf       	rjmp	.-280    	; 0x930 <main+0xd6>

00000a48 <__divmodhi4>:
 a48:	97 fb       	bst	r25, 7
 a4a:	07 2e       	mov	r0, r23
 a4c:	16 f4       	brtc	.+4      	; 0xa52 <__divmodhi4+0xa>
 a4e:	00 94       	com	r0
 a50:	07 d0       	rcall	.+14     	; 0xa60 <__divmodhi4_neg1>
 a52:	77 fd       	sbrc	r23, 7
 a54:	09 d0       	rcall	.+18     	; 0xa68 <__divmodhi4_neg2>
 a56:	0e 94 5a 05 	call	0xab4	; 0xab4 <__udivmodhi4>
 a5a:	07 fc       	sbrc	r0, 7
 a5c:	05 d0       	rcall	.+10     	; 0xa68 <__divmodhi4_neg2>
 a5e:	3e f4       	brtc	.+14     	; 0xa6e <__divmodhi4_exit>

00000a60 <__divmodhi4_neg1>:
 a60:	90 95       	com	r25
 a62:	81 95       	neg	r24
 a64:	9f 4f       	sbci	r25, 0xFF	; 255
 a66:	08 95       	ret

00000a68 <__divmodhi4_neg2>:
 a68:	70 95       	com	r23
 a6a:	61 95       	neg	r22
 a6c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a6e <__divmodhi4_exit>:
 a6e:	08 95       	ret

00000a70 <__udivmodsi4>:
 a70:	a1 e2       	ldi	r26, 0x21	; 33
 a72:	1a 2e       	mov	r1, r26
 a74:	aa 1b       	sub	r26, r26
 a76:	bb 1b       	sub	r27, r27
 a78:	fd 01       	movw	r30, r26
 a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__udivmodsi4_ep>

00000a7c <__udivmodsi4_loop>:
 a7c:	aa 1f       	adc	r26, r26
 a7e:	bb 1f       	adc	r27, r27
 a80:	ee 1f       	adc	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	a2 17       	cp	r26, r18
 a86:	b3 07       	cpc	r27, r19
 a88:	e4 07       	cpc	r30, r20
 a8a:	f5 07       	cpc	r31, r21
 a8c:	20 f0       	brcs	.+8      	; 0xa96 <__udivmodsi4_ep>
 a8e:	a2 1b       	sub	r26, r18
 a90:	b3 0b       	sbc	r27, r19
 a92:	e4 0b       	sbc	r30, r20
 a94:	f5 0b       	sbc	r31, r21

00000a96 <__udivmodsi4_ep>:
 a96:	66 1f       	adc	r22, r22
 a98:	77 1f       	adc	r23, r23
 a9a:	88 1f       	adc	r24, r24
 a9c:	99 1f       	adc	r25, r25
 a9e:	1a 94       	dec	r1
 aa0:	69 f7       	brne	.-38     	; 0xa7c <__udivmodsi4_loop>
 aa2:	60 95       	com	r22
 aa4:	70 95       	com	r23
 aa6:	80 95       	com	r24
 aa8:	90 95       	com	r25
 aaa:	9b 01       	movw	r18, r22
 aac:	ac 01       	movw	r20, r24
 aae:	bd 01       	movw	r22, r26
 ab0:	cf 01       	movw	r24, r30
 ab2:	08 95       	ret

00000ab4 <__udivmodhi4>:
 ab4:	aa 1b       	sub	r26, r26
 ab6:	bb 1b       	sub	r27, r27
 ab8:	51 e1       	ldi	r21, 0x11	; 17
 aba:	07 c0       	rjmp	.+14     	; 0xaca <__udivmodhi4_ep>

00000abc <__udivmodhi4_loop>:
 abc:	aa 1f       	adc	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	a6 17       	cp	r26, r22
 ac2:	b7 07       	cpc	r27, r23
 ac4:	10 f0       	brcs	.+4      	; 0xaca <__udivmodhi4_ep>
 ac6:	a6 1b       	sub	r26, r22
 ac8:	b7 0b       	sbc	r27, r23

00000aca <__udivmodhi4_ep>:
 aca:	88 1f       	adc	r24, r24
 acc:	99 1f       	adc	r25, r25
 ace:	5a 95       	dec	r21
 ad0:	a9 f7       	brne	.-22     	; 0xabc <__udivmodhi4_loop>
 ad2:	80 95       	com	r24
 ad4:	90 95       	com	r25
 ad6:	bc 01       	movw	r22, r24
 ad8:	cd 01       	movw	r24, r26
 ada:	08 95       	ret

00000adc <do_rand>:
 adc:	8f 92       	push	r8
 ade:	9f 92       	push	r9
 ae0:	af 92       	push	r10
 ae2:	bf 92       	push	r11
 ae4:	cf 92       	push	r12
 ae6:	df 92       	push	r13
 ae8:	ef 92       	push	r14
 aea:	ff 92       	push	r15
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	ec 01       	movw	r28, r24
 af2:	68 81       	ld	r22, Y
 af4:	79 81       	ldd	r23, Y+1	; 0x01
 af6:	8a 81       	ldd	r24, Y+2	; 0x02
 af8:	9b 81       	ldd	r25, Y+3	; 0x03
 afa:	61 15       	cp	r22, r1
 afc:	71 05       	cpc	r23, r1
 afe:	81 05       	cpc	r24, r1
 b00:	91 05       	cpc	r25, r1
 b02:	21 f4       	brne	.+8      	; 0xb0c <do_rand+0x30>
 b04:	64 e2       	ldi	r22, 0x24	; 36
 b06:	79 ed       	ldi	r23, 0xD9	; 217
 b08:	8b e5       	ldi	r24, 0x5B	; 91
 b0a:	97 e0       	ldi	r25, 0x07	; 7
 b0c:	2d e1       	ldi	r18, 0x1D	; 29
 b0e:	33 ef       	ldi	r19, 0xF3	; 243
 b10:	41 e0       	ldi	r20, 0x01	; 1
 b12:	50 e0       	ldi	r21, 0x00	; 0
 b14:	0e 94 ca 05 	call	0xb94	; 0xb94 <__divmodsi4>
 b18:	49 01       	movw	r8, r18
 b1a:	5a 01       	movw	r10, r20
 b1c:	9b 01       	movw	r18, r22
 b1e:	ac 01       	movw	r20, r24
 b20:	a7 ea       	ldi	r26, 0xA7	; 167
 b22:	b1 e4       	ldi	r27, 0x41	; 65
 b24:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__muluhisi3>
 b28:	6b 01       	movw	r12, r22
 b2a:	7c 01       	movw	r14, r24
 b2c:	ac ee       	ldi	r26, 0xEC	; 236
 b2e:	b4 ef       	ldi	r27, 0xF4	; 244
 b30:	a5 01       	movw	r20, r10
 b32:	94 01       	movw	r18, r8
 b34:	0e 94 f7 05 	call	0xbee	; 0xbee <__mulohisi3>
 b38:	c6 0e       	add	r12, r22
 b3a:	d7 1e       	adc	r13, r23
 b3c:	e8 1e       	adc	r14, r24
 b3e:	f9 1e       	adc	r15, r25
 b40:	f7 fe       	sbrs	r15, 7
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <do_rand+0x74>
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	c8 1a       	sub	r12, r24
 b48:	d1 08       	sbc	r13, r1
 b4a:	e1 08       	sbc	r14, r1
 b4c:	80 e8       	ldi	r24, 0x80	; 128
 b4e:	f8 0a       	sbc	r15, r24
 b50:	c8 82       	st	Y, r12
 b52:	d9 82       	std	Y+1, r13	; 0x01
 b54:	ea 82       	std	Y+2, r14	; 0x02
 b56:	fb 82       	std	Y+3, r15	; 0x03
 b58:	c6 01       	movw	r24, r12
 b5a:	9f 77       	andi	r25, 0x7F	; 127
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	ff 90       	pop	r15
 b62:	ef 90       	pop	r14
 b64:	df 90       	pop	r13
 b66:	cf 90       	pop	r12
 b68:	bf 90       	pop	r11
 b6a:	af 90       	pop	r10
 b6c:	9f 90       	pop	r9
 b6e:	8f 90       	pop	r8
 b70:	08 95       	ret

00000b72 <rand_r>:
 b72:	0c 94 6e 05 	jmp	0xadc	; 0xadc <do_rand>

00000b76 <rand>:
 b76:	80 e0       	ldi	r24, 0x00	; 0
 b78:	91 e0       	ldi	r25, 0x01	; 1
 b7a:	0c 94 6e 05 	jmp	0xadc	; 0xadc <do_rand>

00000b7e <srand>:
 b7e:	a0 e0       	ldi	r26, 0x00	; 0
 b80:	b0 e0       	ldi	r27, 0x00	; 0
 b82:	80 93 00 01 	sts	0x0100, r24
 b86:	90 93 01 01 	sts	0x0101, r25
 b8a:	a0 93 02 01 	sts	0x0102, r26
 b8e:	b0 93 03 01 	sts	0x0103, r27
 b92:	08 95       	ret

00000b94 <__divmodsi4>:
 b94:	05 2e       	mov	r0, r21
 b96:	97 fb       	bst	r25, 7
 b98:	1e f4       	brtc	.+6      	; 0xba0 <__divmodsi4+0xc>
 b9a:	00 94       	com	r0
 b9c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__negsi2>
 ba0:	57 fd       	sbrc	r21, 7
 ba2:	07 d0       	rcall	.+14     	; 0xbb2 <__divmodsi4_neg2>
 ba4:	0e 94 38 05 	call	0xa70	; 0xa70 <__udivmodsi4>
 ba8:	07 fc       	sbrc	r0, 7
 baa:	03 d0       	rcall	.+6      	; 0xbb2 <__divmodsi4_neg2>
 bac:	4e f4       	brtc	.+18     	; 0xbc0 <__divmodsi4_exit>
 bae:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__negsi2>

00000bb2 <__divmodsi4_neg2>:
 bb2:	50 95       	com	r21
 bb4:	40 95       	com	r20
 bb6:	30 95       	com	r19
 bb8:	21 95       	neg	r18
 bba:	3f 4f       	sbci	r19, 0xFF	; 255
 bbc:	4f 4f       	sbci	r20, 0xFF	; 255
 bbe:	5f 4f       	sbci	r21, 0xFF	; 255

00000bc0 <__divmodsi4_exit>:
 bc0:	08 95       	ret

00000bc2 <__negsi2>:
 bc2:	90 95       	com	r25
 bc4:	80 95       	com	r24
 bc6:	70 95       	com	r23
 bc8:	61 95       	neg	r22
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	8f 4f       	sbci	r24, 0xFF	; 255
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	08 95       	ret

00000bd2 <__muluhisi3>:
 bd2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__umulhisi3>
 bd6:	a5 9f       	mul	r26, r21
 bd8:	90 0d       	add	r25, r0
 bda:	b4 9f       	mul	r27, r20
 bdc:	90 0d       	add	r25, r0
 bde:	a4 9f       	mul	r26, r20
 be0:	80 0d       	add	r24, r0
 be2:	91 1d       	adc	r25, r1
 be4:	11 24       	eor	r1, r1
 be6:	08 95       	ret

00000be8 <__mulshisi3>:
 be8:	b7 ff       	sbrs	r27, 7
 bea:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__muluhisi3>

00000bee <__mulohisi3>:
 bee:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__muluhisi3>
 bf2:	82 1b       	sub	r24, r18
 bf4:	93 0b       	sbc	r25, r19
 bf6:	08 95       	ret

00000bf8 <__umulhisi3>:
 bf8:	a2 9f       	mul	r26, r18
 bfa:	b0 01       	movw	r22, r0
 bfc:	b3 9f       	mul	r27, r19
 bfe:	c0 01       	movw	r24, r0
 c00:	a3 9f       	mul	r26, r19
 c02:	70 0d       	add	r23, r0
 c04:	81 1d       	adc	r24, r1
 c06:	11 24       	eor	r1, r1
 c08:	91 1d       	adc	r25, r1
 c0a:	b2 9f       	mul	r27, r18
 c0c:	70 0d       	add	r23, r0
 c0e:	81 1d       	adc	r24, r1
 c10:	11 24       	eor	r1, r1
 c12:	91 1d       	adc	r25, r1
 c14:	08 95       	ret

00000c16 <_exit>:
 c16:	f8 94       	cli

00000c18 <__stop_program>:
 c18:	ff cf       	rjmp	.-2      	; 0xc18 <__stop_program>
